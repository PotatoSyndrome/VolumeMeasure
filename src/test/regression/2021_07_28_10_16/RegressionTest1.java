import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test501");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        roundVolume0.setDiameter(100);
        roundVolume0.setLength((double) (-1));
        double double7 = roundVolume0.getVolume();
        int int8 = roundVolume0.getDiameter();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test502");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) '4', 52, (double) 0);
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test503");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator17 = roundVolumeList15.spliterator();
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        int int32 = roundVolumeList25.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream33 = roundVolumeList25.stream();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood34.getWood();
        int int40 = roundVolumeList25.lastIndexOf((java.lang.Object) roundVolumeList39);
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        yourWood41.diameterFirstSortWood();
        yourWood41.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList48 = yourWood41.getWood();
        logic.YourWood yourWood49 = new logic.YourWood();
// flaky:         yourWood49.addWood((double) 1L, (int) (byte) 100);
        yourWood49.lengthFirstSortWood();
        boolean boolean54 = roundVolumeList48.contains((java.lang.Object) yourWood49);
        yourWood49.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList56 = yourWood49.getWood();
        logic.RoundVolume roundVolume58 = new logic.RoundVolume();
        roundVolume58.setVolume((double) 0);
        double double61 = roundVolume58.getVolume();
        roundVolume58.setLength((double) 10L);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume();
        roundVolume64.setVolume((double) 0);
        double double67 = roundVolume64.getVolume();
        java.lang.String str68 = roundVolume64.toString();
        boolean boolean69 = roundVolume58.equals((java.lang.Object) str68);
        roundVolume58.setLength((double) 10L);
        boolean boolean73 = roundVolume58.equals((java.lang.Object) "CASPIAN");
        roundVolumeList56.add(0, roundVolume58);
        logic.RoundVolume roundVolume78 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean79 = roundVolumeList56.remove((java.lang.Object) (byte) 1);
        boolean boolean80 = roundVolumeList39.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList56);
        boolean boolean81 = roundVolumeList15.remove((java.lang.Object) boolean80);
        logic.YourWood yourWood82 = new logic.YourWood();
        yourWood82.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList84 = yourWood82.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood82.getWood();
        java.lang.Object obj86 = new java.lang.Object();
        boolean boolean87 = roundVolumeList85.remove(obj86);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor88 = roundVolumeList85.listIterator();
        boolean boolean89 = roundVolumeList15.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList85);
        boolean boolean90 = roundVolumeList85.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream33);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(roundVolumeList56);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str68, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(roundVolumeList84);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test504");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        double double8 = roundVolume0.getLength();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList16 = yourWood9.getWood();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        boolean boolean22 = roundVolumeList16.contains((java.lang.Object) yourWood17);
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor25 = roundVolumeList24.listIterator();
        boolean boolean26 = roundVolume0.equals((java.lang.Object) roundVolumeList24);
        roundVolumeList24.clear();
        java.lang.Object[] objArray28 = roundVolumeList24.toArray();
        Main main29 = new Main();
        main29.stop();
        javafx.application.Application.Parameters parameters31 = main29.getParameters();
        javafx.application.Application.Parameters parameters32 = main29.getParameters();
        main29.init();
        javafx.application.Application.Parameters parameters34 = main29.getParameters();
        boolean boolean35 = roundVolumeList24.contains((java.lang.Object) main29);
        logic.RoundVolume roundVolume36 = new logic.RoundVolume();
        roundVolume36.setVolume((double) 0);
        double double39 = roundVolume36.getVolume();
        java.lang.String str40 = roundVolume36.toString();
        double double41 = roundVolume36.getLength();
        roundVolume36.setVolume((double) (-1L));
        java.lang.String str44 = roundVolume36.toString();
        roundVolume36.setVolume(0.0d);
        boolean boolean47 = roundVolumeList24.add(roundVolume36);
        double double48 = roundVolume36.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 97.0d + "'", double8 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertNotNull(roundVolumeItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNull(parameters31);
        org.junit.Assert.assertNull(parameters32);
        org.junit.Assert.assertNull(parameters34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str40, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=-1.0)" + "'", str44, "RoundVolume(length=0.0, diameter=0, volume=-1.0)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test505");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getLength();
        roundVolume0.setVolume(100.0d);
        int int6 = roundVolume0.getDiameter();
        java.lang.String str7 = roundVolume0.toString();
        java.lang.String str8 = roundVolume0.toString();
        roundVolume0.setDiameter((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str7, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str8, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test506");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        double double6 = roundVolume3.getLength();
        int int7 = roundVolume3.getDiameter();
        roundVolume3.setDiameter((int) '4');
        double double10 = roundVolume3.getLength();
        double double11 = roundVolume3.getLength();
        roundVolume3.setVolume((double) '#');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test507");
        java.lang.String[] strArray4 = new java.lang.String[] { "RoundVolume(length=10.0, diameter=100, volume=0.0)", "RoundVolume(length=10.0, diameter=100, volume=0.0)", "RoundVolume(length=0.0, diameter=100, volume=0.0)", "RoundVolume(length=100.0, diameter=1, volume=1.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor70");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test508");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "RoundVolume(length=0.0, diameter=0, volume=100.0)", "RoundVolume(length=97.0, diameter=0, volume=0.0)", "RoundVolume(length=0.0, diameter=100, volume=-1.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor70");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test509");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream35 = roundVolumeList23.stream();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume37 = roundVolumeList23.remove(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream35);
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test510");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator14 = roundVolumeList7.spliterator();
        java.lang.Object obj15 = null;
        boolean boolean16 = roundVolumeList7.remove(obj15);
        roundVolumeList7.clear();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test511");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        yourWood78.diameterFirstSortWood();
        yourWood78.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood78.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList86 = yourWood78.getWood();
        int int87 = roundVolumeList69.lastIndexOf((java.lang.Object) roundVolumeList86);
        java.lang.Object[] objArray88 = roundVolumeList86.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream89 = roundVolumeList86.parallelStream();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertNotNull(roundVolumeList86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(objArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream89);
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test512");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setVolume(10.0d);
        java.lang.String str10 = roundVolume0.toString();
        java.lang.String str11 = roundVolume0.toString();
        roundVolume0.setLength((double) 0);
        roundVolume0.setLength((double) '4');
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=35.0, diameter=0, volume=10.0)" + "'", str10, "RoundVolume(length=35.0, diameter=0, volume=10.0)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=35.0, diameter=0, volume=10.0)" + "'", str11, "RoundVolume(length=35.0, diameter=0, volume=10.0)");
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test513");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        logic.YourWood yourWood3 = new logic.YourWood();
// flaky:         yourWood3.addWood((double) 1L, (int) (byte) 100);
        yourWood3.lengthFirstSortWood();
        yourWood3.diameterFirstSortWood();
        yourWood3.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList10 = yourWood3.getWood();
        logic.YourWood yourWood11 = new logic.YourWood();
// flaky:         yourWood11.addWood((double) 1L, (int) (byte) 100);
        yourWood11.lengthFirstSortWood();
        boolean boolean16 = roundVolumeList10.contains((java.lang.Object) yourWood11);
        yourWood11.diameterFirstSortWood();
        boolean boolean18 = roundVolume0.equals((java.lang.Object) yourWood11);
        yourWood11.lengthFirstSortWood();
        yourWood11.diameterFirstSortWood();
        org.junit.Assert.assertNotNull(roundVolumeList10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test514");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        roundVolume0.setLength((double) (-1L));
        double double6 = roundVolume0.getLength();
        roundVolume0.setDiameter((int) (byte) -1);
        double double9 = roundVolume0.getVolume();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test515");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        roundVolume0.setDiameter(100);
        java.lang.String str5 = roundVolume0.toString();
        roundVolume0.setVolume((double) (-1.0f));
        roundVolume0.setVolume((double) (short) -1);
        logic.YourWood yourWood10 = new logic.YourWood();
// flaky:         yourWood10.addWood((double) 1L, (int) (byte) 100);
        yourWood10.lengthFirstSortWood();
        yourWood10.diameterFirstSortWood();
        yourWood10.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList17 = yourWood10.getWood();
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        boolean boolean23 = roundVolumeList17.contains((java.lang.Object) yourWood18);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor24 = roundVolumeList17.iterator();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        yourWood26.diameterFirstSortWood();
        yourWood26.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList33 = yourWood26.getWood();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        boolean boolean39 = roundVolumeList33.contains((java.lang.Object) yourWood34);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor40 = roundVolumeList33.iterator();
        boolean boolean41 = roundVolumeList17.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList33);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor42 = roundVolumeList33.listIterator();
        java.lang.Object[] objArray43 = roundVolumeList33.toArray();
        roundVolumeList33.clear();
        logic.RoundVolume roundVolume45 = new logic.RoundVolume();
        boolean boolean46 = roundVolumeList33.equals((java.lang.Object) roundVolume45);
        boolean boolean47 = roundVolume0.equals((java.lang.Object) roundVolume45);
        double double48 = roundVolume45.getLength();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str5, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertNotNull(roundVolumeList17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor24);
        org.junit.Assert.assertNotNull(roundVolumeList33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor42);
        org.junit.Assert.assertNotNull(objArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test516");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream4 = roundVolumeList3.stream();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        boolean boolean18 = roundVolumeList12.contains((java.lang.Object) yourWood13);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList12.iterator();
        logic.YourWood yourWood21 = new logic.YourWood();
// flaky:         yourWood21.addWood((double) 1L, (int) (byte) 100);
        yourWood21.lengthFirstSortWood();
        yourWood21.diameterFirstSortWood();
        yourWood21.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList28 = yourWood21.getWood();
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        boolean boolean34 = roundVolumeList28.contains((java.lang.Object) yourWood29);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList28.iterator();
        boolean boolean36 = roundVolumeList12.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList28);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor38 = null; // flaky: roundVolumeList28.listIterator((int) (short) 1);
        boolean boolean39 = roundVolumeList3.remove((java.lang.Object) roundVolumeList28);
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        yourWood40.diameterFirstSortWood();
        yourWood40.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList47 = yourWood40.getWood();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        boolean boolean53 = roundVolumeList47.contains((java.lang.Object) yourWood48);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor54 = roundVolumeList47.iterator();
        boolean boolean55 = roundVolumeList47.isEmpty();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        yourWood56.diameterFirstSortWood();
        yourWood56.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList63 = yourWood56.getWood();
        logic.YourWood yourWood64 = new logic.YourWood();
// flaky:         yourWood64.addWood((double) 1L, (int) (byte) 100);
        yourWood64.lengthFirstSortWood();
        boolean boolean69 = roundVolumeList63.contains((java.lang.Object) yourWood64);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor70 = roundVolumeList63.iterator();
        logic.YourWood yourWood72 = new logic.YourWood();
// flaky:         yourWood72.addWood((double) 1L, (int) (byte) 100);
        yourWood72.lengthFirstSortWood();
        yourWood72.diameterFirstSortWood();
        yourWood72.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList79 = yourWood72.getWood();
        logic.YourWood yourWood80 = new logic.YourWood();
// flaky:         yourWood80.addWood((double) 1L, (int) (byte) 100);
        yourWood80.lengthFirstSortWood();
        boolean boolean85 = roundVolumeList79.contains((java.lang.Object) yourWood80);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor86 = roundVolumeList79.iterator();
        boolean boolean87 = roundVolumeList63.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList79);
        boolean boolean88 = roundVolumeList79.isEmpty();
        java.lang.Object[] objArray89 = roundVolumeList79.toArray();
        boolean boolean90 = roundVolumeList47.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList79);
        boolean boolean91 = roundVolumeList3.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList47);
        logic.YourWood yourWood92 = new logic.YourWood();
// flaky:         yourWood92.addWood((double) 1L, (int) (byte) 100);
        yourWood92.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList97 = yourWood92.getWood();
        yourWood92.lengthFirstSortWood();
        int int99 = roundVolumeList47.lastIndexOf((java.lang.Object) yourWood92);
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertNotNull(roundVolumeStream4);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor19);
        org.junit.Assert.assertNotNull(roundVolumeList28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeList47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(roundVolumeList63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor70);
        org.junit.Assert.assertNotNull(roundVolumeList79);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor86);
// flaky:         org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(roundVolumeList97);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test517");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.lang.Object[] objArray90 = roundVolumeList7.toArray();
        boolean boolean91 = roundVolumeList7.isEmpty();
        Main main92 = new Main();
        javafx.application.HostServices hostServices93 = main92.getHostServices();
        javafx.application.Application.Parameters parameters94 = main92.getParameters();
        javafx.application.Application.Parameters parameters95 = main92.getParameters();
        main92.init();
        java.lang.Class<?> wildcardClass97 = main92.getClass();
        int int98 = roundVolumeList7.indexOf((java.lang.Object) wildcardClass97);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(hostServices93);
        org.junit.Assert.assertNull(parameters94);
        org.junit.Assert.assertNull(parameters95);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test518");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        roundVolume3.setVolume(0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test519");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        roundVolumeList23.clear();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        roundVolume35.setVolume((double) 0);
        double double38 = roundVolume35.getVolume();
        java.lang.String str39 = roundVolume35.toString();
        int int40 = roundVolume35.getDiameter();
        roundVolume35.setLength((double) '#');
        roundVolume35.setDiameter((int) 'a');
        roundVolume35.setVolume((double) 100);
        roundVolume35.setDiameter((int) (byte) 0);
        boolean boolean49 = roundVolumeList23.remove((java.lang.Object) roundVolume35);
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        logic.YourWood yourWood67 = new logic.YourWood();
// flaky:         yourWood67.addWood((double) 1L, (int) (byte) 100);
        yourWood67.lengthFirstSortWood();
        yourWood67.diameterFirstSortWood();
        yourWood67.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList74 = yourWood67.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList75 = yourWood67.getWood();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList75.iterator();
        boolean boolean77 = roundVolumeList58.addAll((int) (byte) 0, (java.util.Collection<logic.RoundVolume>) roundVolumeList75);
        roundVolumeList75.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = roundVolumeList23.addAll((int) (byte) 1, (java.util.Collection<logic.RoundVolume>) roundVolumeList75);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str39, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
        org.junit.Assert.assertNotNull(roundVolumeList74);
        org.junit.Assert.assertNotNull(roundVolumeList75);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test520");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        logic.YourWood yourWood3 = new logic.YourWood();
// flaky:         yourWood3.addWood((double) 1L, (int) (byte) 100);
        yourWood3.lengthFirstSortWood();
        yourWood3.diameterFirstSortWood();
        yourWood3.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList10 = yourWood3.getWood();
        logic.YourWood yourWood11 = new logic.YourWood();
// flaky:         yourWood11.addWood((double) 1L, (int) (byte) 100);
        yourWood11.lengthFirstSortWood();
        boolean boolean16 = roundVolumeList10.contains((java.lang.Object) yourWood11);
        yourWood11.diameterFirstSortWood();
        boolean boolean18 = roundVolume0.equals((java.lang.Object) yourWood11);
        yourWood11.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList20 = yourWood11.getWood();
        yourWood11.lengthFirstSortWood();
        org.junit.Assert.assertNotNull(roundVolumeList10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeList20);
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test521");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        int int29 = roundVolumeList22.size();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double34 = roundVolume33.getLength();
        int int35 = roundVolume33.getDiameter();
        double double36 = roundVolume33.getLength();
        int int37 = roundVolume33.getDiameter();
        boolean boolean38 = roundVolumeList22.contains((java.lang.Object) int37);
        int int39 = roundVolumeList7.indexOf((java.lang.Object) boolean38);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator40 = roundVolumeList7.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeSpliterator40);
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test522");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        double double8 = roundVolume0.getLength();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList16 = yourWood9.getWood();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        boolean boolean22 = roundVolumeList16.contains((java.lang.Object) yourWood17);
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor25 = roundVolumeList24.listIterator();
        boolean boolean26 = roundVolume0.equals((java.lang.Object) roundVolumeList24);
        logic.YourWood yourWood27 = new logic.YourWood();
// flaky:         yourWood27.addWood((double) 1L, (int) (byte) 100);
        yourWood27.lengthFirstSortWood();
        yourWood27.diameterFirstSortWood();
        yourWood27.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList34 = yourWood27.getWood();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        boolean boolean40 = roundVolumeList34.contains((java.lang.Object) yourWood35);
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        roundVolume44.setLength((double) 10L);
        boolean boolean59 = roundVolume44.equals((java.lang.Object) "CASPIAN");
        roundVolumeList42.add(0, roundVolume44);
        boolean boolean61 = roundVolumeList42.isEmpty();
        boolean boolean62 = roundVolumeList24.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList42);
        int int63 = roundVolumeList24.size();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume65 = roundVolumeList24.get((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 97.0d + "'", double8 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertNotNull(roundVolumeItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(roundVolumeList34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test523");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        java.lang.String str40 = roundVolume33.toString();
        roundVolume33.setDiameter((-1));
        roundVolume33.setVolume((-1.0d));
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=-1.0, diameter=0, volume=0.0)" + "'", str40, "RoundVolume(length=-1.0, diameter=0, volume=0.0)");
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test524");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double36 = roundVolume35.getLength();
        int int37 = roundVolume35.getDiameter();
        boolean boolean38 = roundVolumeList23.add(roundVolume35);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator39 = roundVolumeList23.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator39);
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test525");
        Main main0 = new Main();
        main0.init();
        main0.init();
        main0.init();
        main0.init();
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test526");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList8 = yourWood0.getWood();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator9 = roundVolumeList8.spliterator();
        logic.RoundVolume roundVolume10 = new logic.RoundVolume();
        roundVolume10.setVolume((double) 0);
        double double13 = roundVolume10.getVolume();
        java.lang.String str14 = roundVolume10.toString();
        int int15 = roundVolume10.getDiameter();
        roundVolume10.setLength((double) '#');
        roundVolume10.setVolume(10.0d);
        int int20 = roundVolumeList8.lastIndexOf((java.lang.Object) 10.0d);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream21 = roundVolumeList8.stream();
        int int22 = roundVolumeList8.size();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertNotNull(roundVolumeList8);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str14, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeStream21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test527");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream92 = roundVolumeList69.parallelStream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor93 = roundVolumeList69.iterator();
        Main main94 = new Main();
        main94.init();
        javafx.application.Application.Parameters parameters96 = main94.getParameters();
        int int97 = roundVolumeList69.indexOf((java.lang.Object) main94);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor98 = roundVolumeList69.listIterator();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor99 = roundVolumeList69.listIterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(roundVolumeStream92);
        org.junit.Assert.assertNotNull(roundVolumeItor93);
        org.junit.Assert.assertNull(parameters96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeItor98);
        org.junit.Assert.assertNotNull(roundVolumeItor99);
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test528");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList7.iterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        java.lang.String str37 = roundVolume33.toString();
        int int38 = roundVolume33.getDiameter();
        roundVolume33.setLength((double) '#');
        roundVolume33.setDiameter((int) 'a');
        roundVolume33.setLength((double) (byte) 1);
        logic.YourWood yourWood45 = new logic.YourWood();
// flaky:         yourWood45.addWood((double) 1L, (int) (byte) 100);
        yourWood45.lengthFirstSortWood();
        yourWood45.diameterFirstSortWood();
        yourWood45.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList52 = yourWood45.getWood();
        logic.YourWood yourWood53 = new logic.YourWood();
// flaky:         yourWood53.addWood((double) 1L, (int) (byte) 100);
        yourWood53.lengthFirstSortWood();
        boolean boolean58 = roundVolumeList52.contains((java.lang.Object) yourWood53);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor59 = roundVolumeList52.iterator();
        boolean boolean60 = roundVolumeList52.isEmpty();
        logic.YourWood yourWood61 = new logic.YourWood();
// flaky:         yourWood61.addWood((double) 1L, (int) (byte) 100);
        yourWood61.lengthFirstSortWood();
        yourWood61.diameterFirstSortWood();
        yourWood61.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList68 = yourWood61.getWood();
        logic.YourWood yourWood69 = new logic.YourWood();
// flaky:         yourWood69.addWood((double) 1L, (int) (byte) 100);
        yourWood69.lengthFirstSortWood();
        boolean boolean74 = roundVolumeList68.contains((java.lang.Object) yourWood69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor75 = roundVolumeList68.iterator();
        boolean boolean76 = roundVolumeList52.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList68);
        logic.RoundVolume roundVolume77 = new logic.RoundVolume();
        roundVolume77.setVolume((double) 0);
        double double80 = roundVolume77.getVolume();
        java.lang.String str81 = roundVolume77.toString();
        double double82 = roundVolume77.getLength();
        roundVolume77.setLength((double) 'a');
        boolean boolean85 = roundVolumeList52.add(roundVolume77);
        double double86 = roundVolume77.getLength();
        roundVolume77.setLength((double) '4');
        double double89 = roundVolume77.getVolume();
        boolean boolean90 = roundVolume33.equals((java.lang.Object) roundVolume77);
        boolean boolean91 = roundVolumeList7.contains((java.lang.Object) boolean90);
        boolean boolean92 = roundVolumeList7.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str37, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(roundVolumeList52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor59);
// flaky:         org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(roundVolumeList68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str81, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 97.0d + "'", double86 == 97.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test529");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        boolean boolean38 = roundVolumeList23.remove((java.lang.Object) (-1));
        boolean boolean40 = roundVolumeList23.contains((java.lang.Object) 3);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test530");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
// flaky:         yourWood0.addWood((double) 1L, 100);
        yourWood0.diameterFirstSortWood();
// flaky:         yourWood0.addWood(1.0d, 10);
        yourWood0.lengthFirstSortWood();
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test531");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        logic.RoundVolume roundVolume82 = new logic.RoundVolume((double) 3, (int) (byte) 10, (double) (-1.0f));
        boolean boolean83 = roundVolumeList69.equals((java.lang.Object) (-1.0f));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test532");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 3, (int) (short) -1, 100.0d);
        java.lang.String str4 = roundVolume3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=3.0, diameter=-1, volume=100.0)" + "'", str4, "RoundVolume(length=3.0, diameter=-1, volume=100.0)");
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test533");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        java.lang.String str6 = roundVolume0.toString();
        int int7 = roundVolume0.getDiameter();
        roundVolume0.setVolume(35.0d);
        java.lang.String str10 = roundVolume0.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str6, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=35.0)" + "'", str10, "RoundVolume(length=0.0, diameter=0, volume=35.0)");
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test534");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList4 = yourWood0.getWood();
        java.lang.Class<?> wildcardClass5 = yourWood0.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test535");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        yourWood48.diameterFirstSortWood();
        yourWood48.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList55 = yourWood48.getWood();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        boolean boolean61 = roundVolumeList55.contains((java.lang.Object) yourWood56);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor62 = roundVolumeList55.iterator();
        boolean boolean63 = roundVolumeList39.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList55);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList39.iterator();
        boolean boolean65 = roundVolumeList23.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
        org.junit.Assert.assertNotNull(roundVolumeList55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor62);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test536");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.lang.Object[] objArray66 = roundVolumeList57.toArray();
        java.lang.Object[] objArray67 = roundVolumeList57.toArray();
        boolean boolean68 = roundVolumeList7.equals((java.lang.Object) roundVolumeList57);
        boolean boolean69 = roundVolumeList7.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume71 = roundVolumeList7.remove(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test537");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.lengthFirstSortWood();
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test538");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        logic.RoundVolume roundVolume4 = new logic.RoundVolume();
        roundVolume4.setVolume((double) 0);
        roundVolume4.setDiameter(100);
        java.lang.String str9 = roundVolume4.toString();
        java.lang.String str10 = roundVolume4.toString();
        boolean boolean11 = roundVolume3.equals((java.lang.Object) str10);
        int int12 = roundVolume3.getDiameter();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume16.setVolume((double) 10);
        java.lang.String str19 = roundVolume16.toString();
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        roundVolume20.setLength((double) 'a');
        java.lang.String str28 = roundVolume20.toString();
        logic.RoundVolume roundVolume32 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        java.lang.String str37 = roundVolume33.toString();
        double double38 = roundVolume33.getLength();
        logic.RoundVolume roundVolume42 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume42.setVolume((double) 10);
        logic.RoundVolume roundVolume48 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str49 = roundVolume48.toString();
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        logic.RoundVolume roundVolume53 = new logic.RoundVolume();
        roundVolume53.setVolume((double) 0);
        double double56 = roundVolume53.getVolume();
        roundVolume53.setLength((double) 10L);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume();
        roundVolume59.setVolume((double) 0);
        double double62 = roundVolume59.getVolume();
        java.lang.String str63 = roundVolume59.toString();
        boolean boolean64 = roundVolume53.equals((java.lang.Object) str63);
        logic.RoundVolume roundVolume68 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume68.setVolume((double) 10);
        java.lang.String str71 = roundVolume68.toString();
        logic.RoundVolume[] roundVolumeArray72 = new logic.RoundVolume[] { roundVolume16, roundVolume20, roundVolume32, roundVolume33, roundVolume42, roundVolume48, roundVolume50, roundVolume53, roundVolume68 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73, roundVolumeArray72);
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        yourWood75.diameterFirstSortWood();
        yourWood75.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList82 = yourWood75.getWood();
        logic.YourWood yourWood83 = new logic.YourWood();
// flaky:         yourWood83.addWood((double) 1L, (int) (byte) 100);
        yourWood83.lengthFirstSortWood();
        boolean boolean88 = roundVolumeList82.contains((java.lang.Object) yourWood83);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor89 = roundVolumeList82.iterator();
        boolean boolean90 = roundVolumeList73.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList82);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator91 = roundVolumeList73.spliterator();
        boolean boolean92 = roundVolume3.equals((java.lang.Object) roundVolumeSpliterator91);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str9, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str10, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str19, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str37, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str49, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str63, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str71, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(roundVolumeList82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test539");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        yourWood23.diameterFirstSortWood();
        boolean boolean30 = roundVolumeList7.remove((java.lang.Object) yourWood23);
        roundVolumeList7.clear();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        yourWood48.diameterFirstSortWood();
        yourWood48.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList55 = yourWood48.getWood();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        boolean boolean61 = roundVolumeList55.contains((java.lang.Object) yourWood56);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor62 = roundVolumeList55.iterator();
        boolean boolean63 = roundVolumeList39.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList55);
        boolean boolean64 = roundVolumeList55.isEmpty();
        java.lang.Object[] objArray65 = roundVolumeList55.toArray();
        boolean boolean66 = roundVolumeList55.isEmpty();
        boolean boolean67 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList55);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
        org.junit.Assert.assertNotNull(roundVolumeList55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor62);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test540");
        Main main0 = new Main();
        javafx.application.Application.Parameters parameters1 = main0.getParameters();
        javafx.application.HostServices hostServices2 = main0.getHostServices();
        main0.init();
        main0.stop();
        javafx.application.HostServices hostServices5 = main0.getHostServices();
        javafx.application.HostServices hostServices6 = main0.getHostServices();
        org.junit.Assert.assertNull(parameters1);
        org.junit.Assert.assertNotNull(hostServices2);
        org.junit.Assert.assertNotNull(hostServices5);
        org.junit.Assert.assertNotNull(hostServices6);
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test541");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean78 = roundVolumeList69.isEmpty();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        boolean boolean80 = roundVolumeList69.isEmpty();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream81 = roundVolumeList69.stream();
        roundVolumeList69.clear();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream81);
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test542");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList39.isEmpty();
        boolean boolean49 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        int int64 = roundVolumeList57.size();
        boolean boolean65 = roundVolumeList39.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator66 = roundVolumeList39.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume68 = roundVolumeList39.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator66);
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test543");
        Main main0 = new Main();
        main0.init();
        javafx.application.HostServices hostServices2 = main0.getHostServices();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        main0.stop();
        org.junit.Assert.assertNotNull(hostServices2);
        org.junit.Assert.assertNull(parameters3);
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test544");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator17 = roundVolumeList15.spliterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream18 = roundVolumeList15.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator17);
        org.junit.Assert.assertNotNull(roundVolumeStream18);
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test545");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        yourWood40.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList47 = yourWood40.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList47.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator49 = roundVolumeList47.spliterator();
        Main main50 = new Main();
        main50.init();
        javafx.application.Application.Parameters parameters52 = main50.getParameters();
        javafx.application.HostServices hostServices53 = main50.getHostServices();
        javafx.application.HostServices hostServices54 = main50.getHostServices();
        int int55 = roundVolumeList47.lastIndexOf((java.lang.Object) main50);
        boolean boolean56 = roundVolumeList23.contains((java.lang.Object) roundVolumeList47);
        boolean boolean58 = roundVolumeList23.contains((java.lang.Object) 0);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeList47);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator49);
        org.junit.Assert.assertNull(parameters52);
        org.junit.Assert.assertNotNull(hostServices53);
        org.junit.Assert.assertNotNull(hostServices54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test546");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume16 = null;
        boolean boolean17 = roundVolumeList15.add(roundVolume16);
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList25.iterator();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        boolean boolean49 = roundVolumeList25.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList41.listIterator();
        java.lang.Object[] objArray51 = roundVolumeList41.toArray();
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        boolean boolean56 = roundVolumeList41.remove((java.lang.Object) (-1));
        logic.YourWood yourWood57 = new logic.YourWood();
// flaky:         yourWood57.addWood((double) 1L, (int) (byte) 100);
        yourWood57.lengthFirstSortWood();
        yourWood57.diameterFirstSortWood();
        yourWood57.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = yourWood57.getWood();
        logic.YourWood yourWood65 = new logic.YourWood();
// flaky:         yourWood65.addWood((double) 1L, (int) (byte) 100);
        yourWood65.lengthFirstSortWood();
        boolean boolean70 = roundVolumeList64.contains((java.lang.Object) yourWood65);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor71 = roundVolumeList64.iterator();
        logic.YourWood yourWood73 = new logic.YourWood();
// flaky:         yourWood73.addWood((double) 1L, (int) (byte) 100);
        yourWood73.lengthFirstSortWood();
        yourWood73.diameterFirstSortWood();
        yourWood73.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList80 = yourWood73.getWood();
        logic.YourWood yourWood81 = new logic.YourWood();
// flaky:         yourWood81.addWood((double) 1L, (int) (byte) 100);
        yourWood81.lengthFirstSortWood();
        boolean boolean86 = roundVolumeList80.contains((java.lang.Object) yourWood81);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor87 = roundVolumeList80.iterator();
        boolean boolean88 = roundVolumeList64.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList80);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor89 = roundVolumeList64.iterator();
        logic.RoundVolume roundVolume93 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double94 = roundVolume93.getLength();
        boolean boolean95 = roundVolumeList64.add(roundVolume93);
        boolean boolean96 = roundVolumeList41.contains((java.lang.Object) boolean95);
        boolean boolean97 = roundVolumeList15.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertNotNull(objArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(roundVolumeList64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor71);
        org.junit.Assert.assertNotNull(roundVolumeList80);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor87);
// flaky:         org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor89);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test547");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setVolume(10.0d);
        roundVolume0.setVolume(100.0d);
        roundVolume0.setLength((double) (byte) 100);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test548");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator17 = roundVolumeList15.spliterator();
        Main main18 = new Main();
        main18.init();
        javafx.application.Application.Parameters parameters20 = main18.getParameters();
        javafx.application.HostServices hostServices21 = main18.getHostServices();
        javafx.application.HostServices hostServices22 = main18.getHostServices();
        int int23 = roundVolumeList15.lastIndexOf((java.lang.Object) main18);
        javafx.application.HostServices hostServices24 = main18.getHostServices();
        main18.stop();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator17);
        org.junit.Assert.assertNull(parameters20);
        org.junit.Assert.assertNotNull(hostServices21);
        org.junit.Assert.assertNotNull(hostServices22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(hostServices24);
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test549");
        Main main0 = new Main();
        javafx.application.HostServices hostServices1 = main0.getHostServices();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        main0.init();
        main0.stop();
        javafx.application.HostServices hostServices5 = main0.getHostServices();
        org.junit.Assert.assertNotNull(hostServices1);
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNotNull(hostServices5);
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test550");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator14 = roundVolumeList7.spliterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        boolean boolean30 = roundVolumeList22.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray31 = roundVolumeList22.toArray();
        boolean boolean32 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList22);
        logic.YourWood yourWood33 = new logic.YourWood();
// flaky:         yourWood33.addWood((double) 1L, (int) (byte) 100);
        yourWood33.lengthFirstSortWood();
        yourWood33.diameterFirstSortWood();
        yourWood33.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList40 = yourWood33.getWood();
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        boolean boolean46 = roundVolumeList40.contains((java.lang.Object) yourWood41);
        yourWood41.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList48 = yourWood41.getWood();
        logic.YourWood yourWood49 = new logic.YourWood();
// flaky:         yourWood49.addWood((double) 1L, (int) (byte) 100);
        yourWood49.lengthFirstSortWood();
        yourWood49.diameterFirstSortWood();
        yourWood49.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList56 = yourWood49.getWood();
        logic.YourWood yourWood57 = new logic.YourWood();
// flaky:         yourWood57.addWood((double) 1L, (int) (byte) 100);
        yourWood57.lengthFirstSortWood();
        boolean boolean62 = roundVolumeList56.contains((java.lang.Object) yourWood57);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor63 = roundVolumeList56.iterator();
        boolean boolean64 = roundVolumeList56.isEmpty();
        logic.YourWood yourWood65 = new logic.YourWood();
// flaky:         yourWood65.addWood((double) 1L, (int) (byte) 100);
        yourWood65.lengthFirstSortWood();
        yourWood65.diameterFirstSortWood();
        yourWood65.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList72 = yourWood65.getWood();
        logic.YourWood yourWood73 = new logic.YourWood();
// flaky:         yourWood73.addWood((double) 1L, (int) (byte) 100);
        yourWood73.lengthFirstSortWood();
        boolean boolean78 = roundVolumeList72.contains((java.lang.Object) yourWood73);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor79 = roundVolumeList72.iterator();
        boolean boolean80 = roundVolumeList56.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList72);
        int int81 = roundVolumeList48.indexOf((java.lang.Object) roundVolumeList72);
        logic.RoundVolume roundVolume82 = new logic.RoundVolume();
        roundVolume82.setVolume((double) 0);
        double double85 = roundVolume82.getVolume();
        roundVolume82.setLength((double) (-1L));
        boolean boolean88 = roundVolumeList48.add(roundVolume82);
        boolean boolean89 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList48);
        boolean boolean90 = roundVolumeList7.isEmpty();
        roundVolumeList7.clear();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(roundVolumeList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(roundVolumeList48);
        org.junit.Assert.assertNotNull(roundVolumeList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeList72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test551");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        double double44 = roundVolume41.getVolume();
        java.lang.String str45 = roundVolume41.toString();
        double double46 = roundVolume41.getLength();
        roundVolume41.setLength((double) 'a');
        roundVolume41.setLength((double) (short) 0);
        logic.RoundVolume roundVolume51 = null; // flaky: roundVolumeList23.set((int) (short) 1, roundVolume41);
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        logic.YourWood yourWood68 = new logic.YourWood();
// flaky:         yourWood68.addWood((double) 1L, (int) (byte) 100);
        yourWood68.lengthFirstSortWood();
        yourWood68.diameterFirstSortWood();
        yourWood68.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList75 = yourWood68.getWood();
        logic.YourWood yourWood76 = new logic.YourWood();
// flaky:         yourWood76.addWood((double) 1L, (int) (byte) 100);
        yourWood76.lengthFirstSortWood();
        boolean boolean81 = roundVolumeList75.contains((java.lang.Object) yourWood76);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor82 = roundVolumeList75.iterator();
        boolean boolean83 = roundVolumeList59.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList75);
        java.lang.Object[] objArray84 = roundVolumeList75.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream85 = roundVolumeList75.parallelStream();
        boolean boolean86 = roundVolumeList23.remove((java.lang.Object) roundVolumeList75);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator87 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList23.replaceAll(roundVolumeUnaryOperator87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str45, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
// flaky:         org.junit.Assert.assertNotNull(roundVolume51);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertNotNull(roundVolumeList75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor82);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test552");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        yourWood24.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList31 = yourWood24.getWood();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList39.isEmpty();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        yourWood48.diameterFirstSortWood();
        yourWood48.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList55 = yourWood48.getWood();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        boolean boolean61 = roundVolumeList55.contains((java.lang.Object) yourWood56);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor62 = roundVolumeList55.iterator();
        boolean boolean63 = roundVolumeList39.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList55);
        int int64 = roundVolumeList31.indexOf((java.lang.Object) roundVolumeList55);
        boolean boolean65 = roundVolumeList15.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList55);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList68 = roundVolumeList55.subList((int) (byte) 10, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeList31);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeList55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor62);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test553");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood16.getWood();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor25 = roundVolumeList24.iterator();
        boolean boolean26 = roundVolumeList7.addAll((int) (byte) 0, (java.util.Collection<logic.RoundVolume>) roundVolumeList24);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor27 = roundVolumeList24.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator28 = roundVolumeList24.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList31 = roundVolumeList24.subList((int) (short) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: fromIndex = -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertNotNull(roundVolumeItor25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor27);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator28);
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test554");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, (int) (byte) 0, 35.0d);
        int int4 = roundVolume3.getDiameter();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test555");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        roundVolume32.setLength((double) 10L);
        logic.RoundVolume roundVolume38 = new logic.RoundVolume();
        roundVolume38.setVolume((double) 0);
        double double41 = roundVolume38.getVolume();
        java.lang.String str42 = roundVolume38.toString();
        boolean boolean43 = roundVolume32.equals((java.lang.Object) str42);
        double double44 = roundVolume32.getVolume();
        boolean boolean45 = roundVolumeList7.add(roundVolume32);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getLength();
        roundVolume46.setVolume(100.0d);
        java.lang.String str52 = roundVolume46.toString();
        logic.YourWood yourWood53 = new logic.YourWood();
        yourWood53.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList55 = yourWood53.getWood();
        yourWood53.lengthFirstSortWood();
        yourWood53.lengthFirstSortWood();
        boolean boolean58 = roundVolume46.equals((java.lang.Object) yourWood53);
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood53.getWood();
        boolean boolean60 = roundVolumeList59.isEmpty();
        logic.RoundVolume roundVolume61 = new logic.RoundVolume();
        roundVolume61.setVolume((double) 0);
        double double64 = roundVolume61.getLength();
        double double65 = roundVolume61.getVolume();
        boolean boolean66 = roundVolumeList59.add(roundVolume61);
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        java.lang.String str71 = roundVolume67.toString();
        double double72 = roundVolume67.getLength();
        roundVolume67.setVolume((double) (-1L));
        boolean boolean75 = roundVolumeList59.equals((java.lang.Object) (-1L));
        boolean boolean76 = roundVolumeList7.remove((java.lang.Object) (-1L));
        java.lang.Class<?> wildcardClass77 = roundVolumeList7.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str42, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str52, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
        org.junit.Assert.assertNotNull(roundVolumeList55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str71, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test556");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        boolean boolean34 = roundVolumeList23.isEmpty();
        Main main35 = new Main();
        main35.init();
        javafx.application.Application.Parameters parameters37 = main35.getParameters();
        int int38 = roundVolumeList23.lastIndexOf((java.lang.Object) parameters37);
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList47 = yourWood39.getWood();
        boolean boolean48 = roundVolumeList23.contains((java.lang.Object) roundVolumeList47);
        boolean boolean49 = roundVolumeList23.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(parameters37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertNotNull(roundVolumeList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test557");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        java.lang.String str8 = roundVolume0.toString();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.lengthFirstSortWood();
        boolean boolean17 = roundVolume0.equals((java.lang.Object) yourWood9);
        yourWood9.diameterFirstSortWood();
        yourWood9.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList20 = yourWood9.getWood();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str8, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(roundVolumeList20);
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test558");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setVolume(10.0d);
        java.lang.String str10 = roundVolume0.toString();
        roundVolume0.setLength((double) 10L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=35.0, diameter=0, volume=10.0)" + "'", str10, "RoundVolume(length=35.0, diameter=0, volume=10.0)");
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test559");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream34 = roundVolumeList23.stream();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        int int49 = roundVolumeList42.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream50 = roundVolumeList42.stream();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList56 = yourWood51.getWood();
        int int57 = roundVolumeList42.lastIndexOf((java.lang.Object) roundVolumeList56);
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        yourWood58.diameterFirstSortWood();
        yourWood58.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList65 = yourWood58.getWood();
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        boolean boolean71 = roundVolumeList65.contains((java.lang.Object) yourWood66);
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.RoundVolume roundVolume75 = new logic.RoundVolume();
        roundVolume75.setVolume((double) 0);
        double double78 = roundVolume75.getVolume();
        roundVolume75.setLength((double) 10L);
        logic.RoundVolume roundVolume81 = new logic.RoundVolume();
        roundVolume81.setVolume((double) 0);
        double double84 = roundVolume81.getVolume();
        java.lang.String str85 = roundVolume81.toString();
        boolean boolean86 = roundVolume75.equals((java.lang.Object) str85);
        roundVolume75.setLength((double) 10L);
        boolean boolean90 = roundVolume75.equals((java.lang.Object) "CASPIAN");
        roundVolumeList73.add(0, roundVolume75);
        logic.RoundVolume roundVolume95 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean96 = roundVolumeList73.remove((java.lang.Object) (byte) 1);
        boolean boolean97 = roundVolumeList56.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        boolean boolean98 = roundVolumeList23.contains((java.lang.Object) roundVolumeList73);
        java.lang.Class<?> wildcardClass99 = roundVolumeList73.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream34);
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream50);
        org.junit.Assert.assertNotNull(roundVolumeList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str85, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test560");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        boolean boolean17 = roundVolumeList7.contains((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        boolean boolean32 = roundVolumeList25.isEmpty();
        int int33 = roundVolumeList25.size();
        boolean boolean34 = roundVolumeList7.remove((java.lang.Object) int33);
        logic.YourWood yourWood35 = new logic.YourWood();
        yourWood35.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList37 = yourWood35.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList38 = yourWood35.getWood();
        java.lang.Object obj39 = new java.lang.Object();
        boolean boolean40 = roundVolumeList38.remove(obj39);
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        double double44 = roundVolume41.getVolume();
        roundVolume41.setLength((double) 10L);
        logic.RoundVolume roundVolume47 = new logic.RoundVolume();
        roundVolume47.setVolume((double) 0);
        double double50 = roundVolume47.getVolume();
        java.lang.String str51 = roundVolume47.toString();
        boolean boolean52 = roundVolume41.equals((java.lang.Object) str51);
        roundVolume41.setLength((double) 10L);
        boolean boolean55 = roundVolumeList38.remove((java.lang.Object) roundVolume41);
        boolean boolean56 = roundVolumeList7.add(roundVolume41);
        int int57 = roundVolumeList7.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator58 = roundVolumeList7.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeList37);
        org.junit.Assert.assertNotNull(roundVolumeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str51, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator58);
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test561");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        yourWood78.diameterFirstSortWood();
        yourWood78.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood78.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList86 = yourWood78.getWood();
        int int87 = roundVolumeList69.lastIndexOf((java.lang.Object) roundVolumeList86);
        java.lang.Object[] objArray88 = roundVolumeList86.toArray();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor89 = roundVolumeList86.listIterator();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertNotNull(roundVolumeList86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(objArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeItor89);
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test562");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        roundVolumeList23.clear();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        boolean boolean36 = roundVolumeList23.equals((java.lang.Object) roundVolume35);
        boolean boolean38 = roundVolume35.equals((java.lang.Object) "RoundVolume(length=-1.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test563");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        int int6 = roundVolume3.getDiameter();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test564");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume(0.0d, 5, (double) 10.0f);
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test565");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        roundVolume32.setLength((double) 10L);
        logic.RoundVolume roundVolume38 = new logic.RoundVolume();
        roundVolume38.setVolume((double) 0);
        double double41 = roundVolume38.getVolume();
        java.lang.String str42 = roundVolume38.toString();
        boolean boolean43 = roundVolume32.equals((java.lang.Object) str42);
        double double44 = roundVolume32.getVolume();
        boolean boolean45 = roundVolumeList7.add(roundVolume32);
        double double46 = roundVolume32.getVolume();
        double double47 = roundVolume32.getVolume();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str42, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test566");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setDiameter((int) 'a');
        roundVolume0.setLength((double) (byte) 1);
        roundVolume0.setDiameter((int) '4');
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test567");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (-1), (int) (byte) 1, 97.0d);
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test568");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood16.getWood();
        int int22 = roundVolumeList7.lastIndexOf((java.lang.Object) roundVolumeList21);
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        yourWood23.diameterFirstSortWood();
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList30 = yourWood23.getWood();
        logic.YourWood yourWood31 = new logic.YourWood();
// flaky:         yourWood31.addWood((double) 1L, (int) (byte) 100);
        yourWood31.lengthFirstSortWood();
        boolean boolean36 = roundVolumeList30.contains((java.lang.Object) yourWood31);
        yourWood31.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList38 = yourWood31.getWood();
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        roundVolume40.setLength((double) 10L);
        boolean boolean55 = roundVolume40.equals((java.lang.Object) "CASPIAN");
        roundVolumeList38.add(0, roundVolume40);
        logic.RoundVolume roundVolume60 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean61 = roundVolumeList38.remove((java.lang.Object) (byte) 1);
        boolean boolean62 = roundVolumeList21.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList38);
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        yourWood63.diameterFirstSortWood();
        yourWood63.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList70 = yourWood63.getWood();
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        boolean boolean76 = roundVolumeList70.contains((java.lang.Object) yourWood71);
        boolean boolean77 = roundVolumeList70.isEmpty();
        boolean boolean78 = roundVolumeList38.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList70);
        java.util.Spliterator[] spliteratorArray80 = new java.util.Spliterator[0];
        @SuppressWarnings("unchecked")
        java.util.Spliterator<logic.RoundVolume>[] roundVolumeSpliteratorArray81 = (java.util.Spliterator<logic.RoundVolume>[]) spliteratorArray80;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<logic.RoundVolume>[] roundVolumeSpliteratorArray82 = roundVolumeList70.toArray((java.util.Spliterator<logic.RoundVolume>[]) spliteratorArray80);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(roundVolumeList38);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(roundVolumeList70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(spliteratorArray80);
        org.junit.Assert.assertNotNull(roundVolumeSpliteratorArray81);
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test569");
        Main main0 = new Main();
        main0.init();
        javafx.application.HostServices hostServices2 = main0.getHostServices();
        main0.stop();
        main0.init();
        javafx.application.Application.Parameters parameters5 = main0.getParameters();
        org.junit.Assert.assertNotNull(hostServices2);
        org.junit.Assert.assertNull(parameters5);
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test570");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        yourWood78.diameterFirstSortWood();
        yourWood78.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood78.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList86 = yourWood78.getWood();
        int int87 = roundVolumeList69.lastIndexOf((java.lang.Object) roundVolumeList86);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor88 = roundVolumeList86.iterator();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertNotNull(roundVolumeList86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeItor88);
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test571");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        int int29 = roundVolumeList22.size();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double34 = roundVolume33.getLength();
        int int35 = roundVolume33.getDiameter();
        double double36 = roundVolume33.getLength();
        int int37 = roundVolume33.getDiameter();
        boolean boolean38 = roundVolumeList22.contains((java.lang.Object) int37);
        int int39 = roundVolumeList7.indexOf((java.lang.Object) boolean38);
        boolean boolean40 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood41 = new logic.YourWood();
        int int42 = roundVolumeList7.indexOf((java.lang.Object) yourWood41);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test572");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList57.listIterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        roundVolume67.setLength((double) (-1L));
        boolean boolean73 = roundVolumeList57.add(roundVolume67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor74 = roundVolumeList57.iterator();
        boolean boolean75 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream76 = roundVolumeList57.stream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor77 = roundVolumeList57.iterator();
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        yourWood78.diameterFirstSortWood();
        yourWood78.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood78.getWood();
        logic.YourWood yourWood86 = new logic.YourWood();
// flaky:         yourWood86.addWood((double) 1L, (int) (byte) 100);
        yourWood86.lengthFirstSortWood();
        boolean boolean91 = roundVolumeList85.contains((java.lang.Object) yourWood86);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor92 = roundVolumeList85.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream93 = roundVolumeList85.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor95 = roundVolumeList85.listIterator((int) (short) 0);
        boolean boolean96 = roundVolumeList57.equals((java.lang.Object) roundVolumeList85);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor98 = roundVolumeList57.listIterator((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream76);
        org.junit.Assert.assertNotNull(roundVolumeItor77);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor92);
        org.junit.Assert.assertNotNull(roundVolumeStream93);
        org.junit.Assert.assertNotNull(roundVolumeItor95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test573");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setVolume((double) (-1L));
        java.lang.String str8 = roundVolume0.toString();
        roundVolume0.setVolume(0.0d);
        double double11 = roundVolume0.getVolume();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=-1.0)" + "'", str8, "RoundVolume(length=0.0, diameter=0, volume=-1.0)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test574");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        boolean boolean66 = roundVolumeList42.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        int int68 = roundVolumeList58.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray69 = roundVolumeList58.toArray();
        logic.RoundVolume roundVolume70 = new logic.RoundVolume();
        roundVolume70.setVolume((double) 0);
        double double73 = roundVolume70.getVolume();
        java.lang.String str74 = roundVolume70.toString();
        int int75 = roundVolume70.getDiameter();
        roundVolume70.setLength((double) '#');
        roundVolume70.setVolume(10.0d);
        roundVolume70.setVolume(100.0d);
        boolean boolean82 = roundVolumeList58.add(roundVolume70);
        boolean boolean83 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        java.lang.Object[] objArray84 = roundVolumeList23.toArray();
        boolean boolean85 = roundVolumeList23.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(objArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str74, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=35.0, diameter=0, volume=100.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=35.0, diameter=0, volume=100.0)]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test575");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator32 = roundVolumeList7.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator32);
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test576");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood16.getWood();
        int int22 = roundVolumeList7.lastIndexOf((java.lang.Object) roundVolumeList21);
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        yourWood23.diameterFirstSortWood();
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList30 = yourWood23.getWood();
        logic.YourWood yourWood31 = new logic.YourWood();
// flaky:         yourWood31.addWood((double) 1L, (int) (byte) 100);
        yourWood31.lengthFirstSortWood();
        boolean boolean36 = roundVolumeList30.contains((java.lang.Object) yourWood31);
        yourWood31.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList38 = yourWood31.getWood();
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        roundVolume40.setLength((double) 10L);
        boolean boolean55 = roundVolume40.equals((java.lang.Object) "CASPIAN");
        roundVolumeList38.add(0, roundVolume40);
        logic.RoundVolume roundVolume60 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean61 = roundVolumeList38.remove((java.lang.Object) (byte) 1);
        boolean boolean62 = roundVolumeList21.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList38);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor63 = roundVolumeList38.iterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume(52.0d, 0, (double) 1L);
        roundVolume67.setLength((double) 100);
        boolean boolean70 = roundVolumeList38.add(roundVolume67);
        int int71 = roundVolumeList38.size();
        java.lang.Object[] objArray72 = roundVolumeList38.toArray();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(roundVolumeList38);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertNotNull(objArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[RoundVolume(length=10.0, diameter=0, volume=0.0), RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=100.0, diameter=0, volume=1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[RoundVolume(length=10.0, diameter=0, volume=0.0), RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=100.0, diameter=0, volume=1.0)]");
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test577");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        roundVolumeList23.clear();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        boolean boolean36 = roundVolumeList23.equals((java.lang.Object) roundVolume35);
        double double37 = roundVolume35.getVolume();
        int int38 = roundVolume35.getDiameter();
        java.lang.String str39 = roundVolume35.toString();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str39, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test578");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        roundVolume3.setLength(100.0d);
        java.lang.Object obj8 = null;
        boolean boolean9 = roundVolume3.equals(obj8);
        double double10 = roundVolume3.getVolume();
        double double11 = roundVolume3.getVolume();
        double double12 = roundVolume3.getVolume();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test579");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        logic.YourWood yourWood3 = new logic.YourWood();
// flaky:         yourWood3.addWood((double) 1L, (int) (byte) 100);
        yourWood3.lengthFirstSortWood();
        yourWood3.diameterFirstSortWood();
        yourWood3.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList10 = yourWood3.getWood();
        logic.YourWood yourWood11 = new logic.YourWood();
// flaky:         yourWood11.addWood((double) 1L, (int) (byte) 100);
        yourWood11.lengthFirstSortWood();
        boolean boolean16 = roundVolumeList10.contains((java.lang.Object) yourWood11);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList10.iterator();
        logic.YourWood yourWood19 = new logic.YourWood();
// flaky:         yourWood19.addWood((double) 1L, (int) (byte) 100);
        yourWood19.lengthFirstSortWood();
        yourWood19.diameterFirstSortWood();
        yourWood19.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList26 = yourWood19.getWood();
        logic.YourWood yourWood27 = new logic.YourWood();
// flaky:         yourWood27.addWood((double) 1L, (int) (byte) 100);
        yourWood27.lengthFirstSortWood();
        boolean boolean32 = roundVolumeList26.contains((java.lang.Object) yourWood27);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor33 = roundVolumeList26.iterator();
        boolean boolean34 = roundVolumeList10.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList26);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList26.listIterator();
        logic.RoundVolume roundVolume36 = new logic.RoundVolume();
        roundVolume36.setVolume((double) 0);
        double double39 = roundVolume36.getVolume();
        roundVolume36.setLength((double) (-1L));
        boolean boolean42 = roundVolumeList26.add(roundVolume36);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor43 = roundVolumeList26.iterator();
        boolean boolean44 = roundVolumeList2.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList26);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator45 = roundVolumeList26.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
        org.junit.Assert.assertNotNull(roundVolumeList26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator45);
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test580");
        Main main0 = new Main();
        main0.init();
        javafx.application.HostServices hostServices2 = main0.getHostServices();
        javafx.application.HostServices hostServices3 = main0.getHostServices();
        main0.stop();
        javafx.application.Application.Parameters parameters5 = main0.getParameters();
        org.junit.Assert.assertNotNull(hostServices2);
        org.junit.Assert.assertNotNull(hostServices3);
        org.junit.Assert.assertNull(parameters5);
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test581");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList39.isEmpty();
        java.lang.Object[] objArray49 = roundVolumeList39.toArray();
        boolean boolean50 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int51 = roundVolumeList39.size();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume53 = roundVolumeList39.remove(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test582");
        Main main0 = new Main();
        main0.init();
        main0.init();
        main0.init();
        javafx.application.HostServices hostServices4 = main0.getHostServices();
        javafx.application.HostServices hostServices5 = main0.getHostServices();
        javafx.application.Application.Parameters parameters6 = main0.getParameters();
        org.junit.Assert.assertNotNull(hostServices4);
        org.junit.Assert.assertNotNull(hostServices5);
        org.junit.Assert.assertNull(parameters6);
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test583");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getVolume();
        double double6 = roundVolume0.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test584");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        java.lang.String str6 = roundVolume0.toString();
        int int7 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) 0.0f);
        roundVolume0.setLength(0.0d);
        double double12 = roundVolume0.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str6, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test585");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        roundVolume35.setVolume((double) 0);
        double double38 = roundVolume35.getVolume();
        java.lang.String str39 = roundVolume35.toString();
        int int40 = roundVolume35.getDiameter();
        roundVolume35.setLength((double) '#');
        roundVolume35.setVolume(10.0d);
        roundVolume35.setVolume(100.0d);
        boolean boolean47 = roundVolumeList23.add(roundVolume35);
        logic.RoundVolume roundVolume51 = new logic.RoundVolume((double) ' ', (int) '#', 52.0d);
        boolean boolean52 = roundVolumeList23.equals((java.lang.Object) roundVolume51);
        java.lang.Class<?> wildcardClass53 = roundVolumeList23.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str39, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test586");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) (short) 0);
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList25.iterator();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        boolean boolean49 = roundVolumeList25.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList41.listIterator();
        java.lang.Object[] objArray51 = roundVolumeList41.toArray();
        roundVolumeList41.clear();
        boolean boolean53 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.lang.Class<?> wildcardClass54 = roundVolumeList41.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertNotNull(objArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test587");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        boolean boolean34 = roundVolumeList23.isEmpty();
        boolean boolean35 = roundVolumeList23.isEmpty();
        logic.YourWood yourWood36 = new logic.YourWood();
// flaky:         yourWood36.addWood((double) 1L, (int) (byte) 100);
        yourWood36.lengthFirstSortWood();
        yourWood36.diameterFirstSortWood();
        yourWood36.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList43 = yourWood36.getWood();
        logic.YourWood yourWood44 = new logic.YourWood();
// flaky:         yourWood44.addWood((double) 1L, (int) (byte) 100);
        yourWood44.lengthFirstSortWood();
        boolean boolean49 = roundVolumeList43.contains((java.lang.Object) yourWood44);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList43.iterator();
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        boolean boolean67 = roundVolumeList43.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList59);
        logic.RoundVolume roundVolume68 = new logic.RoundVolume();
        roundVolume68.setVolume((double) 0);
        double double71 = roundVolume68.getVolume();
        roundVolume68.setLength((double) 10L);
        logic.RoundVolume roundVolume74 = new logic.RoundVolume();
        roundVolume74.setVolume((double) 0);
        double double77 = roundVolume74.getVolume();
        java.lang.String str78 = roundVolume74.toString();
        boolean boolean79 = roundVolume68.equals((java.lang.Object) str78);
        double double80 = roundVolume68.getVolume();
        boolean boolean81 = roundVolumeList43.add(roundVolume68);
        boolean boolean82 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList43);
        java.lang.Object obj83 = null;
        int int84 = roundVolumeList43.lastIndexOf(obj83);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(roundVolumeList43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str78, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test588");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        boolean boolean38 = roundVolumeList23.remove((java.lang.Object) (-1));
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor53 = roundVolumeList46.iterator();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        yourWood55.diameterFirstSortWood();
        yourWood55.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList62 = yourWood55.getWood();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        boolean boolean68 = roundVolumeList62.contains((java.lang.Object) yourWood63);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList62.iterator();
        boolean boolean70 = roundVolumeList46.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor71 = roundVolumeList46.iterator();
        logic.RoundVolume roundVolume75 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double76 = roundVolume75.getLength();
        boolean boolean77 = roundVolumeList46.add(roundVolume75);
        boolean boolean78 = roundVolumeList23.contains((java.lang.Object) boolean77);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream79 = roundVolumeList23.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor53);
        org.junit.Assert.assertNotNull(roundVolumeList62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor71);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream79);
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test589");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        roundVolume0.setDiameter((int) (byte) 10);
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) '4');
        roundVolume0.setVolume((double) 0.0f);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test590");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator17 = roundVolumeList15.spliterator();
        Main main18 = new Main();
        main18.init();
        javafx.application.Application.Parameters parameters20 = main18.getParameters();
        javafx.application.HostServices hostServices21 = main18.getHostServices();
        javafx.application.HostServices hostServices22 = main18.getHostServices();
        int int23 = roundVolumeList15.lastIndexOf((java.lang.Object) main18);
        javafx.application.HostServices hostServices24 = main18.getHostServices();
        javafx.application.Application.Parameters parameters25 = main18.getParameters();
        main18.init();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator17);
        org.junit.Assert.assertNull(parameters20);
        org.junit.Assert.assertNotNull(hostServices21);
        org.junit.Assert.assertNotNull(hostServices22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(hostServices24);
        org.junit.Assert.assertNull(parameters25);
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test591");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        yourWood8.diameterFirstSortWood();
// flaky:         yourWood8.addWood((double) (byte) 1, (int) (short) 10);
        java.util.ArrayList<logic.RoundVolume> roundVolumeList19 = yourWood8.getWood();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList19);
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test592");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        yourWood78.diameterFirstSortWood();
        yourWood78.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood78.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList86 = yourWood78.getWood();
        int int87 = roundVolumeList69.lastIndexOf((java.lang.Object) roundVolumeList86);
        java.lang.Object[] objArray88 = roundVolumeList86.toArray();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume90 = roundVolumeList86.remove(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertNotNull(roundVolumeList86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(objArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test593");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
// flaky:         yourWood0.addWood((double) 1L, 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList10 = yourWood0.getWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood0.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor13 = roundVolumeList12.listIterator();
        org.junit.Assert.assertNotNull(roundVolumeList10);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertNotNull(roundVolumeItor13);
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test594");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        Main main6 = new Main();
        javafx.application.HostServices hostServices7 = main6.getHostServices();
        boolean boolean8 = roundVolume0.equals((java.lang.Object) hostServices7);
        java.lang.Class<?> wildcardClass9 = hostServices7.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(hostServices7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test595");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList40 = yourWood32.getWood();
        boolean boolean41 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList40);
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        yourWood42.diameterFirstSortWood();
        yourWood42.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList49 = yourWood42.getWood();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        boolean boolean55 = roundVolumeList49.contains((java.lang.Object) yourWood50);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator56 = roundVolumeList49.spliterator();
        java.lang.Object obj57 = null;
        boolean boolean58 = roundVolumeList49.remove(obj57);
        boolean boolean59 = roundVolumeList40.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList49);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor60 = roundVolumeList49.listIterator();
        logic.RoundVolume roundVolume62 = null; // flaky: roundVolumeList49.remove(0);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertNotNull(roundVolumeList40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(roundVolumeList49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor60);
// flaky:         org.junit.Assert.assertNotNull(roundVolume62);
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test596");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList39.isEmpty();
        java.lang.Object[] objArray49 = roundVolumeList39.toArray();
        boolean boolean50 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        logic.RoundVolume roundVolume51 = new logic.RoundVolume();
        roundVolume51.setVolume((double) 0);
        roundVolume51.setDiameter(100);
        java.lang.String str56 = roundVolume51.toString();
        roundVolume51.setVolume((double) (-1.0f));
        int int59 = roundVolumeList39.indexOf((java.lang.Object) roundVolume51);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str56, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test597");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList8 = yourWood0.getWood();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor9 = roundVolumeList8.iterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator10 = roundVolumeList8.spliterator();
        logic.YourWood yourWood12 = new logic.YourWood();
// flaky:         yourWood12.addWood((double) 1L, (int) (byte) 100);
        yourWood12.lengthFirstSortWood();
        yourWood12.diameterFirstSortWood();
        yourWood12.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList19 = yourWood12.getWood();
        logic.YourWood yourWood20 = new logic.YourWood();
// flaky:         yourWood20.addWood((double) 1L, (int) (byte) 100);
        yourWood20.lengthFirstSortWood();
        boolean boolean25 = roundVolumeList19.contains((java.lang.Object) yourWood20);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor26 = roundVolumeList19.iterator();
        logic.YourWood yourWood28 = new logic.YourWood();
// flaky:         yourWood28.addWood((double) 1L, (int) (byte) 100);
        yourWood28.lengthFirstSortWood();
        yourWood28.diameterFirstSortWood();
        yourWood28.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList35 = yourWood28.getWood();
        logic.YourWood yourWood36 = new logic.YourWood();
// flaky:         yourWood36.addWood((double) 1L, (int) (byte) 100);
        yourWood36.lengthFirstSortWood();
        boolean boolean41 = roundVolumeList35.contains((java.lang.Object) yourWood36);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor42 = roundVolumeList35.iterator();
        boolean boolean43 = roundVolumeList19.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList35);
        java.lang.Object obj44 = null;
        boolean boolean45 = roundVolumeList19.remove(obj44);
        logic.YourWood yourWood46 = new logic.YourWood();
// flaky:         yourWood46.addWood((double) 1L, (int) (byte) 100);
        yourWood46.lengthFirstSortWood();
        yourWood46.diameterFirstSortWood();
        yourWood46.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList53 = yourWood46.getWood();
        logic.YourWood yourWood54 = new logic.YourWood();
// flaky:         yourWood54.addWood((double) 1L, (int) (byte) 100);
        yourWood54.lengthFirstSortWood();
        boolean boolean59 = roundVolumeList53.contains((java.lang.Object) yourWood54);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor60 = roundVolumeList53.iterator();
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList53.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.lang.Object[] objArray78 = roundVolumeList69.toArray();
        java.lang.Object[] objArray79 = roundVolumeList69.toArray();
        boolean boolean80 = roundVolumeList19.equals((java.lang.Object) roundVolumeList69);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = roundVolumeList8.addAll((-1), (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertNotNull(roundVolumeList8);
        org.junit.Assert.assertNotNull(roundVolumeItor9);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator10);
        org.junit.Assert.assertNotNull(roundVolumeList19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor26);
        org.junit.Assert.assertNotNull(roundVolumeList35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor42);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeList53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor60);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test598");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator17 = roundVolumeList15.spliterator();
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        int int32 = roundVolumeList25.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream33 = roundVolumeList25.stream();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood34.getWood();
        int int40 = roundVolumeList25.lastIndexOf((java.lang.Object) roundVolumeList39);
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        yourWood41.diameterFirstSortWood();
        yourWood41.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList48 = yourWood41.getWood();
        logic.YourWood yourWood49 = new logic.YourWood();
// flaky:         yourWood49.addWood((double) 1L, (int) (byte) 100);
        yourWood49.lengthFirstSortWood();
        boolean boolean54 = roundVolumeList48.contains((java.lang.Object) yourWood49);
        yourWood49.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList56 = yourWood49.getWood();
        logic.RoundVolume roundVolume58 = new logic.RoundVolume();
        roundVolume58.setVolume((double) 0);
        double double61 = roundVolume58.getVolume();
        roundVolume58.setLength((double) 10L);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume();
        roundVolume64.setVolume((double) 0);
        double double67 = roundVolume64.getVolume();
        java.lang.String str68 = roundVolume64.toString();
        boolean boolean69 = roundVolume58.equals((java.lang.Object) str68);
        roundVolume58.setLength((double) 10L);
        boolean boolean73 = roundVolume58.equals((java.lang.Object) "CASPIAN");
        roundVolumeList56.add(0, roundVolume58);
        logic.RoundVolume roundVolume78 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean79 = roundVolumeList56.remove((java.lang.Object) (byte) 1);
        boolean boolean80 = roundVolumeList39.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList56);
        boolean boolean81 = roundVolumeList15.remove((java.lang.Object) boolean80);
        logic.YourWood yourWood82 = new logic.YourWood();
        yourWood82.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList84 = yourWood82.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood82.getWood();
        java.lang.Object obj86 = new java.lang.Object();
        boolean boolean87 = roundVolumeList85.remove(obj86);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor88 = roundVolumeList85.listIterator();
        boolean boolean89 = roundVolumeList15.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList85);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor90 = roundVolumeList85.iterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream33);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(roundVolumeList56);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str68, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(roundVolumeList84);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor90);
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test599");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        yourWood23.diameterFirstSortWood();
        boolean boolean30 = roundVolumeList7.remove((java.lang.Object) yourWood23);
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList32 = yourWood23.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream33 = roundVolumeList32.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeList32);
        org.junit.Assert.assertNotNull(roundVolumeStream33);
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test600");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean79 = roundVolumeList60.remove((java.lang.Object) false);
        logic.YourWood yourWood80 = new logic.YourWood();
// flaky:         yourWood80.addWood((double) 1L, (int) (byte) 100);
        yourWood80.lengthFirstSortWood();
        yourWood80.diameterFirstSortWood();
        yourWood80.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList87 = yourWood80.getWood();
        logic.YourWood yourWood88 = new logic.YourWood();
// flaky:         yourWood88.addWood((double) 1L, (int) (byte) 100);
        yourWood88.lengthFirstSortWood();
        boolean boolean93 = roundVolumeList87.contains((java.lang.Object) yourWood88);
        yourWood88.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList95 = yourWood88.getWood();
        int int96 = roundVolumeList60.lastIndexOf((java.lang.Object) yourWood88);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream97 = roundVolumeList60.stream();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeList87);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(roundVolumeList95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeStream97);
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test601");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        boolean boolean30 = roundVolumeList24.contains((java.lang.Object) yourWood25);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor31 = roundVolumeList24.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream32 = roundVolumeList24.stream();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream33 = roundVolumeList24.stream();
        int int34 = roundVolumeList7.indexOf((java.lang.Object) roundVolumeList24);
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        boolean boolean66 = roundVolumeList42.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor67 = roundVolumeList58.listIterator();
        java.lang.Object[] objArray68 = roundVolumeList58.toArray();
        roundVolumeList58.clear();
        logic.RoundVolume roundVolume70 = new logic.RoundVolume();
        boolean boolean71 = roundVolumeList58.equals((java.lang.Object) roundVolume70);
        boolean boolean72 = roundVolumeList24.contains((java.lang.Object) roundVolumeList58);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList75 = roundVolumeList24.subList(100, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor31);
        org.junit.Assert.assertNotNull(roundVolumeStream32);
        org.junit.Assert.assertNotNull(roundVolumeStream33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor67);
        org.junit.Assert.assertNotNull(objArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test602");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        logic.RoundVolume roundVolume41 = roundVolumeList23.get((int) (short) 0);
        logic.RoundVolume roundVolume42 = new logic.RoundVolume();
        roundVolume42.setVolume((double) 0);
        double double45 = roundVolume42.getLength();
        roundVolume42.setVolume(100.0d);
        int int48 = roundVolume42.getDiameter();
        java.lang.String str49 = roundVolume42.toString();
        java.lang.String str50 = roundVolume42.toString();
        boolean boolean51 = roundVolumeList23.add(roundVolume42);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(roundVolume41);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str49, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test603");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList8 = yourWood0.getWood();
        org.junit.Assert.assertNotNull(roundVolumeList8);
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test604");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolumeList3.remove(obj4);
        roundVolumeList3.clear();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator7 = roundVolumeList3.spliterator();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        yourWood8.diameterFirstSortWood();
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        boolean boolean21 = roundVolumeList15.contains((java.lang.Object) yourWood16);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor22 = roundVolumeList15.iterator();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        yourWood24.diameterFirstSortWood();
        yourWood24.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList31 = yourWood24.getWood();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        boolean boolean37 = roundVolumeList31.contains((java.lang.Object) yourWood32);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor38 = roundVolumeList31.iterator();
        boolean boolean39 = roundVolumeList15.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList31);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        double double52 = roundVolume40.getVolume();
        boolean boolean53 = roundVolumeList15.add(roundVolume40);
        logic.RoundVolume roundVolume54 = new logic.RoundVolume();
        roundVolume54.setVolume((double) 0);
        double double57 = roundVolume54.getLength();
        roundVolume54.setVolume(100.0d);
        java.lang.String str60 = roundVolume54.toString();
        logic.YourWood yourWood61 = new logic.YourWood();
        yourWood61.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList63 = yourWood61.getWood();
        yourWood61.lengthFirstSortWood();
        yourWood61.lengthFirstSortWood();
        boolean boolean66 = roundVolume54.equals((java.lang.Object) yourWood61);
        java.util.ArrayList<logic.RoundVolume> roundVolumeList67 = yourWood61.getWood();
        boolean boolean68 = roundVolumeList67.isEmpty();
        logic.RoundVolume roundVolume69 = new logic.RoundVolume();
        roundVolume69.setVolume((double) 0);
        double double72 = roundVolume69.getLength();
        double double73 = roundVolume69.getVolume();
        boolean boolean74 = roundVolumeList67.add(roundVolume69);
        logic.RoundVolume roundVolume75 = new logic.RoundVolume();
        roundVolume75.setVolume((double) 0);
        double double78 = roundVolume75.getVolume();
        java.lang.String str79 = roundVolume75.toString();
        double double80 = roundVolume75.getLength();
        roundVolume75.setVolume((double) (-1L));
        boolean boolean83 = roundVolumeList67.equals((java.lang.Object) (-1L));
        boolean boolean84 = roundVolumeList15.remove((java.lang.Object) (-1L));
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream85 = roundVolumeList15.stream();
        boolean boolean86 = roundVolumeList3.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator7);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor22);
        org.junit.Assert.assertNotNull(roundVolumeList31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor38);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str60, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
        org.junit.Assert.assertNotNull(roundVolumeList63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(roundVolumeList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str79, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test605");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        roundVolume0.setLength(0.0d);
        java.lang.Object obj7 = null;
        boolean boolean8 = roundVolume0.equals(obj7);
        int int9 = roundVolume0.getDiameter();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test606");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) (short) 0);
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList25.iterator();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        boolean boolean49 = roundVolumeList25.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.lang.Object[] objArray50 = roundVolumeList41.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream51 = roundVolumeList41.parallelStream();
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        boolean boolean66 = roundVolumeList41.remove((java.lang.Object) boolean65);
        boolean boolean67 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator68 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.replaceAll(roundVolumeUnaryOperator68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream51);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test607");
        Main main0 = new Main();
        main0.init();
        main0.init();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        main0.stop();
        main0.init();
        org.junit.Assert.assertNull(parameters3);
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test608");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator80 = roundVolumeList60.spliterator();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator81 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList60.replaceAll(roundVolumeUnaryOperator81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeSpliterator80);
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test609");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList40 = yourWood32.getWood();
        boolean boolean41 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList40);
        java.lang.Object[] objArray42 = roundVolumeList23.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList45 = roundVolumeList23.subList(100, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertNotNull(roundVolumeList40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=1.0, diameter=1, volume=0.85)]");
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test610");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean79 = roundVolumeList60.remove((java.lang.Object) false);
        logic.YourWood yourWood80 = new logic.YourWood();
// flaky:         yourWood80.addWood((double) 1L, (int) (byte) 100);
        yourWood80.lengthFirstSortWood();
        yourWood80.diameterFirstSortWood();
        yourWood80.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList87 = yourWood80.getWood();
        logic.YourWood yourWood88 = new logic.YourWood();
// flaky:         yourWood88.addWood((double) 1L, (int) (byte) 100);
        yourWood88.lengthFirstSortWood();
        boolean boolean93 = roundVolumeList87.contains((java.lang.Object) yourWood88);
        yourWood88.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList95 = yourWood88.getWood();
        int int96 = roundVolumeList60.lastIndexOf((java.lang.Object) yourWood88);
        logic.RoundVolume roundVolume97 = null;
        boolean boolean98 = roundVolumeList60.add(roundVolume97);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeList87);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(roundVolumeList95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test611");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        double double6 = roundVolume3.getLength();
        java.lang.String str7 = roundVolume3.toString();
        roundVolume3.setDiameter((int) (short) 0);
        roundVolume3.setVolume((double) (-1L));
        java.lang.String str12 = roundVolume3.toString();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=-1.0)" + "'", str7, "RoundVolume(length=0.0, diameter=0, volume=-1.0)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=-1.0)" + "'", str12, "RoundVolume(length=0.0, diameter=0, volume=-1.0)");
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test612");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood16.getWood();
        int int22 = roundVolumeList7.lastIndexOf((java.lang.Object) roundVolumeList21);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume24 = roundVolumeList21.get((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test613");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        java.lang.Object[] objArray79 = roundVolumeList69.toArray();
        roundVolumeList69.clear();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream81 = roundVolumeList69.parallelStream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor82 = roundVolumeList69.iterator();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume84 = roundVolumeList69.remove((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertNotNull(objArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream81);
        org.junit.Assert.assertNotNull(roundVolumeItor82);
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test614");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=3.0, diameter=-1, volume=100.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test615");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        java.lang.String str8 = roundVolume0.toString();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.lengthFirstSortWood();
        boolean boolean17 = roundVolume0.equals((java.lang.Object) yourWood9);
        yourWood9.lengthFirstSortWood();
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str8, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test616");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream31 = roundVolumeList23.stream();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        logic.RoundVolume roundVolume50 = null; // flaky: roundVolumeList15.remove(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream51 = roundVolumeList15.stream();
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        logic.YourWood yourWood67 = new logic.YourWood();
// flaky:         yourWood67.addWood((double) 1L, (int) (byte) 100);
        yourWood67.lengthFirstSortWood();
        yourWood67.diameterFirstSortWood();
        yourWood67.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList74 = yourWood67.getWood();
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        boolean boolean80 = roundVolumeList74.contains((java.lang.Object) yourWood75);
        yourWood75.diameterFirstSortWood();
        boolean boolean82 = roundVolumeList59.remove((java.lang.Object) yourWood75);
        logic.RoundVolume roundVolume86 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double87 = roundVolume86.getLength();
        int int88 = roundVolume86.getDiameter();
        roundVolume86.setLength(100.0d);
        boolean boolean91 = roundVolumeList59.add(roundVolume86);
        boolean boolean92 = roundVolumeList15.remove((java.lang.Object) roundVolume86);
        java.lang.Object obj93 = null;
        boolean boolean94 = roundVolume86.equals(obj93);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeStream31);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertNotNull(roundVolume50);
        org.junit.Assert.assertNotNull(roundVolumeStream51);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertNotNull(roundVolumeList74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test617");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        java.util.List<logic.RoundVolume> roundVolumeList82 = null; // flaky: roundVolumeList69.subList(0, (int) (short) 1);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream83 = roundVolumeList69.stream();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeList82);
        org.junit.Assert.assertNotNull(roundVolumeStream83);
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test618");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (short) 10, 0, (double) (-1));
        double double4 = roundVolume3.getVolume();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test619");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean79 = roundVolumeList60.remove((java.lang.Object) false);
        Main main80 = new Main();
        main80.init();
        javafx.application.Application.Parameters parameters82 = main80.getParameters();
        boolean boolean83 = roundVolumeList60.contains((java.lang.Object) parameters82);
        logic.YourWood yourWood84 = new logic.YourWood();
        yourWood84.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList86 = yourWood84.getWood();
        boolean boolean87 = roundVolumeList60.equals((java.lang.Object) yourWood84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor89 = roundVolumeList60.listIterator(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(parameters82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(roundVolumeList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test620");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        int int29 = roundVolumeList22.size();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double34 = roundVolume33.getLength();
        int int35 = roundVolume33.getDiameter();
        double double36 = roundVolume33.getLength();
        int int37 = roundVolume33.getDiameter();
        boolean boolean38 = roundVolumeList22.contains((java.lang.Object) int37);
        int int39 = roundVolumeList7.indexOf((java.lang.Object) boolean38);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList42 = null; // flaky: roundVolumeList7.subList(52, (int) (byte) 1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(52) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test621");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 1.0f, (int) (short) 100, (double) (-1L));
        logic.RoundVolume roundVolume4 = new logic.RoundVolume();
        roundVolume4.setVolume((double) 0);
        double double7 = roundVolume4.getVolume();
        roundVolume4.setLength((double) 10L);
        logic.RoundVolume roundVolume10 = new logic.RoundVolume();
        roundVolume10.setVolume((double) 0);
        double double13 = roundVolume10.getVolume();
        java.lang.String str14 = roundVolume10.toString();
        boolean boolean15 = roundVolume4.equals((java.lang.Object) str14);
        roundVolume4.setLength((double) 10L);
        boolean boolean19 = roundVolume4.equals((java.lang.Object) "CASPIAN");
        double double20 = roundVolume4.getVolume();
        boolean boolean21 = roundVolume3.equals((java.lang.Object) roundVolume4);
        roundVolume3.setVolume((double) (byte) 100);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str14, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test622");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        logic.RoundVolume roundVolume81 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double82 = roundVolume81.getLength();
        boolean boolean83 = roundVolumeList60.add(roundVolume81);
        int int84 = roundVolume81.getDiameter();
        int int85 = roundVolume81.getDiameter();
        roundVolume81.setLength((double) 100.0f);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test623");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume7.setVolume((double) 10);
        java.lang.String str10 = roundVolume7.toString();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume();
        roundVolume11.setVolume((double) 0);
        double double14 = roundVolume11.getVolume();
        java.lang.String str15 = roundVolume11.toString();
        double double16 = roundVolume11.getLength();
        roundVolume11.setLength((double) 'a');
        java.lang.String str19 = roundVolume11.toString();
        logic.RoundVolume roundVolume23 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        double double29 = roundVolume24.getLength();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume33.setVolume((double) 10);
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str40 = roundVolume39.toString();
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume59.setVolume((double) 10);
        java.lang.String str62 = roundVolume59.toString();
        logic.RoundVolume[] roundVolumeArray63 = new logic.RoundVolume[] { roundVolume7, roundVolume11, roundVolume23, roundVolume24, roundVolume33, roundVolume39, roundVolume41, roundVolume44, roundVolume59 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64, roundVolumeArray63);
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        yourWood66.diameterFirstSortWood();
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.YourWood yourWood74 = new logic.YourWood();
// flaky:         yourWood74.addWood((double) 1L, (int) (byte) 100);
        yourWood74.lengthFirstSortWood();
        boolean boolean79 = roundVolumeList73.contains((java.lang.Object) yourWood74);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList73.iterator();
        boolean boolean81 = roundVolumeList64.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        boolean boolean83 = roundVolumeList64.remove((java.lang.Object) false);
        boolean boolean84 = roundVolumeList3.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64);
        logic.YourWood yourWood85 = new logic.YourWood();
        yourWood85.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList87 = yourWood85.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList88 = yourWood85.getWood();
        java.lang.Object obj89 = new java.lang.Object();
        boolean boolean90 = roundVolumeList88.remove(obj89);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList88.listIterator();
        boolean boolean92 = roundVolumeList64.remove((java.lang.Object) roundVolumeList88);
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str10, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str40, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str62, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeList87);
        org.junit.Assert.assertNotNull(roundVolumeList88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test624");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) (short) 0);
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList25.iterator();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        boolean boolean49 = roundVolumeList25.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.lang.Object[] objArray50 = roundVolumeList41.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream51 = roundVolumeList41.parallelStream();
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        boolean boolean66 = roundVolumeList41.remove((java.lang.Object) boolean65);
        boolean boolean67 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        logic.RoundVolume roundVolume69 = null;
        roundVolumeList41.add((int) (short) 0, roundVolume69);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream51);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test625");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        logic.RoundVolume roundVolume41 = roundVolumeList23.get((int) (short) 0);
        logic.YourWood yourWood42 = new logic.YourWood();
        yourWood42.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList44 = yourWood42.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList45 = yourWood42.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream46 = roundVolumeList45.stream();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        yourWood47.diameterFirstSortWood();
        yourWood47.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList54 = yourWood47.getWood();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        boolean boolean60 = roundVolumeList54.contains((java.lang.Object) yourWood55);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor61 = roundVolumeList54.iterator();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        yourWood63.diameterFirstSortWood();
        yourWood63.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList70 = yourWood63.getWood();
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        boolean boolean76 = roundVolumeList70.contains((java.lang.Object) yourWood71);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor77 = roundVolumeList70.iterator();
        boolean boolean78 = roundVolumeList54.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList70);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor80 = null; // flaky: roundVolumeList70.listIterator((int) (short) 1);
        boolean boolean81 = roundVolumeList45.remove((java.lang.Object) roundVolumeList70);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream82 = roundVolumeList45.parallelStream();
        int int83 = roundVolumeList23.indexOf((java.lang.Object) roundVolumeStream82);
        boolean boolean84 = roundVolumeList23.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(roundVolume41);
        org.junit.Assert.assertNotNull(roundVolumeList44);
        org.junit.Assert.assertNotNull(roundVolumeList45);
        org.junit.Assert.assertNotNull(roundVolumeStream46);
        org.junit.Assert.assertNotNull(roundVolumeList54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor61);
        org.junit.Assert.assertNotNull(roundVolumeList70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor77);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test626");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList7.equals((java.lang.Object) roundVolumeList39);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        java.lang.String str53 = roundVolume49.toString();
        int int54 = roundVolume49.getDiameter();
        roundVolume49.setLength((double) '#');
        roundVolume49.setVolume(10.0d);
        double double59 = roundVolume49.getLength();
        boolean boolean60 = roundVolumeList39.add(roundVolume49);
        java.lang.Class<?> wildcardClass61 = roundVolume49.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str53, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 35.0d + "'", double59 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test627");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        int int29 = roundVolumeList22.size();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double34 = roundVolume33.getLength();
        int int35 = roundVolume33.getDiameter();
        double double36 = roundVolume33.getLength();
        int int37 = roundVolume33.getDiameter();
        boolean boolean38 = roundVolumeList22.contains((java.lang.Object) int37);
        int int39 = roundVolumeList7.indexOf((java.lang.Object) boolean38);
        logic.RoundVolume roundVolume43 = new logic.RoundVolume((double) 52, 2, 0.0d);
        boolean boolean44 = roundVolumeList7.equals((java.lang.Object) 52);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream45 = roundVolumeList7.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor47 = roundVolumeList7.listIterator((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream45);
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test628");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream3 = roundVolumeList2.parallelStream();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream4 = roundVolumeList2.stream();
        logic.RoundVolume roundVolume8 = new logic.RoundVolume((double) 1.0f, 52, (double) 10L);
        boolean boolean9 = roundVolumeList2.add(roundVolume8);
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeStream3);
        org.junit.Assert.assertNotNull(roundVolumeStream4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test629");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume93 = roundVolumeList69.remove(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test630");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        double double44 = roundVolume41.getVolume();
        java.lang.String str45 = roundVolume41.toString();
        double double46 = roundVolume41.getLength();
        roundVolume41.setLength((double) 'a');
        roundVolume41.setLength((double) (short) 0);
        logic.RoundVolume roundVolume51 = null; // flaky: roundVolumeList23.set((int) (short) 1, roundVolume41);
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        logic.YourWood yourWood68 = new logic.YourWood();
// flaky:         yourWood68.addWood((double) 1L, (int) (byte) 100);
        yourWood68.lengthFirstSortWood();
        yourWood68.diameterFirstSortWood();
        yourWood68.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList75 = yourWood68.getWood();
        logic.YourWood yourWood76 = new logic.YourWood();
// flaky:         yourWood76.addWood((double) 1L, (int) (byte) 100);
        yourWood76.lengthFirstSortWood();
        boolean boolean81 = roundVolumeList75.contains((java.lang.Object) yourWood76);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor82 = roundVolumeList75.iterator();
        boolean boolean83 = roundVolumeList59.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList75);
        java.lang.Object[] objArray84 = roundVolumeList75.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream85 = roundVolumeList75.parallelStream();
        boolean boolean86 = roundVolumeList23.remove((java.lang.Object) roundVolumeList75);
        int int87 = roundVolumeList75.size();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str45, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
// flaky:         org.junit.Assert.assertNotNull(roundVolume51);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertNotNull(roundVolumeList75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor82);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test631");
        logic.VolumeDB volumeDB0 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap1 = volumeDB0.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap2 = volumeDB0.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap3 = volumeDB0.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap4 = volumeDB0.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap5 = volumeDB0.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap6 = volumeDB0.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap7 = volumeDB0.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap8 = volumeDB0.getVolumes();
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test632");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) (short) 0);
        boolean boolean18 = roundVolumeList7.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test633");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator17 = roundVolumeList15.spliterator();
        java.lang.Object[] objArray18 = roundVolumeList15.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream19 = roundVolumeList15.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator17);
        org.junit.Assert.assertNotNull(objArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream19);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test634");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood16.getWood();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor25 = roundVolumeList24.iterator();
        boolean boolean26 = roundVolumeList7.addAll((int) (byte) 0, (java.util.Collection<logic.RoundVolume>) roundVolumeList24);
        logic.RoundVolume roundVolume28 = new logic.RoundVolume();
        roundVolume28.setVolume((double) 0);
        double double31 = roundVolume28.getVolume();
        java.lang.String str32 = roundVolume28.toString();
        double double33 = roundVolume28.getLength();
        java.lang.String str34 = roundVolume28.toString();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume35 = roundVolumeList7.set(52, roundVolume28);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertNotNull(roundVolumeItor25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str32, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str34, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test635");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        roundVolume0.setDiameter(100);
        java.lang.String str5 = roundVolume0.toString();
        roundVolume0.setVolume((double) (-1.0f));
        roundVolume0.setVolume((double) (short) -1);
        logic.YourWood yourWood10 = new logic.YourWood();
// flaky:         yourWood10.addWood((double) 1L, (int) (byte) 100);
        yourWood10.lengthFirstSortWood();
        yourWood10.diameterFirstSortWood();
        yourWood10.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList17 = yourWood10.getWood();
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        boolean boolean23 = roundVolumeList17.contains((java.lang.Object) yourWood18);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor24 = roundVolumeList17.iterator();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        yourWood26.diameterFirstSortWood();
        yourWood26.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList33 = yourWood26.getWood();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        boolean boolean39 = roundVolumeList33.contains((java.lang.Object) yourWood34);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor40 = roundVolumeList33.iterator();
        boolean boolean41 = roundVolumeList17.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList33);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor42 = roundVolumeList33.listIterator();
        java.lang.Object[] objArray43 = roundVolumeList33.toArray();
        roundVolumeList33.clear();
        logic.RoundVolume roundVolume45 = new logic.RoundVolume();
        boolean boolean46 = roundVolumeList33.equals((java.lang.Object) roundVolume45);
        boolean boolean47 = roundVolume0.equals((java.lang.Object) roundVolume45);
        roundVolume0.setLength((double) (-1.0f));
        java.lang.String str50 = roundVolume0.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str5, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertNotNull(roundVolumeList17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor24);
        org.junit.Assert.assertNotNull(roundVolumeList33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor42);
        org.junit.Assert.assertNotNull(objArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=-1.0, diameter=100, volume=-1.0)" + "'", str50, "RoundVolume(length=-1.0, diameter=100, volume=-1.0)");
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test636");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator80 = roundVolumeList60.spliterator();
        boolean boolean82 = roundVolumeList60.remove((java.lang.Object) (short) 10);
        java.lang.Object obj83 = null;
        int int84 = roundVolumeList60.indexOf(obj83);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeSpliterator80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test637");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume17 = new logic.RoundVolume();
        roundVolume17.setVolume((double) 0);
        double double20 = roundVolume17.getVolume();
        roundVolume17.setLength((double) 10L);
        logic.RoundVolume roundVolume23 = new logic.RoundVolume();
        roundVolume23.setVolume((double) 0);
        double double26 = roundVolume23.getVolume();
        java.lang.String str27 = roundVolume23.toString();
        boolean boolean28 = roundVolume17.equals((java.lang.Object) str27);
        roundVolume17.setLength((double) 10L);
        boolean boolean32 = roundVolume17.equals((java.lang.Object) "CASPIAN");
        roundVolumeList15.add(0, roundVolume17);
        boolean boolean34 = roundVolumeList15.isEmpty();
        java.lang.Object[] objArray35 = roundVolumeList15.toArray();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor36 = roundVolumeList15.iterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str27, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[RoundVolume(length=10.0, diameter=0, volume=0.0), RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[RoundVolume(length=10.0, diameter=0, volume=0.0), RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeItor36);
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test638");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.RoundVolume roundVolume17 = null; // flaky: roundVolumeList7.remove(0);
        int int18 = 0; // flaky: roundVolume17.getDiameter();
// flaky:         roundVolume17.setVolume((double) (byte) -1);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
// flaky:         org.junit.Assert.assertNotNull(roundVolume17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test639");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        roundVolume0.setDiameter(100);
        java.lang.String str5 = roundVolume0.toString();
        roundVolume0.setVolume((double) (-1.0f));
        roundVolume0.setVolume((double) (short) -1);
        logic.YourWood yourWood10 = new logic.YourWood();
// flaky:         yourWood10.addWood((double) 1L, (int) (byte) 100);
        yourWood10.lengthFirstSortWood();
        yourWood10.diameterFirstSortWood();
        yourWood10.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList17 = yourWood10.getWood();
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        boolean boolean23 = roundVolumeList17.contains((java.lang.Object) yourWood18);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor24 = roundVolumeList17.iterator();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        yourWood26.diameterFirstSortWood();
        yourWood26.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList33 = yourWood26.getWood();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        boolean boolean39 = roundVolumeList33.contains((java.lang.Object) yourWood34);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor40 = roundVolumeList33.iterator();
        boolean boolean41 = roundVolumeList17.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList33);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor42 = roundVolumeList33.listIterator();
        java.lang.Object[] objArray43 = roundVolumeList33.toArray();
        roundVolumeList33.clear();
        logic.RoundVolume roundVolume45 = new logic.RoundVolume();
        boolean boolean46 = roundVolumeList33.equals((java.lang.Object) roundVolume45);
        boolean boolean47 = roundVolume0.equals((java.lang.Object) roundVolume45);
        roundVolume0.setLength((double) (-1.0f));
        double double50 = roundVolume0.getLength();
        roundVolume0.setDiameter(5);
        double double53 = roundVolume0.getVolume();
        roundVolume0.setLength((double) (-1));
        roundVolume0.setLength((double) (short) -1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str5, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertNotNull(roundVolumeList17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor24);
        org.junit.Assert.assertNotNull(roundVolumeList33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor42);
        org.junit.Assert.assertNotNull(objArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test640");
        Main main0 = new Main();
        main0.init();
        main0.init();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        main0.stop();
        javafx.application.Application.Parameters parameters5 = main0.getParameters();
        main0.stop();
        javafx.application.HostServices hostServices7 = main0.getHostServices();
        org.junit.Assert.assertNull(parameters3);
        org.junit.Assert.assertNull(parameters5);
        org.junit.Assert.assertNotNull(hostServices7);
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test641");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 3, (int) (byte) 100, 97.0d);
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test642");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList9 = yourWood0.getWood();
        yourWood0.diameterFirstSortWood();
        org.junit.Assert.assertNotNull(roundVolumeList9);
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test643");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList8 = yourWood0.getWood();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor9 = roundVolumeList8.iterator();
        logic.RoundVolume roundVolume10 = new logic.RoundVolume();
        roundVolume10.setVolume((double) 0);
        double double13 = roundVolume10.getLength();
        roundVolume10.setVolume(100.0d);
        boolean boolean16 = roundVolumeList8.add(roundVolume10);
        logic.YourWood yourWood17 = new logic.YourWood();
        yourWood17.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList19 = yourWood17.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList20 = yourWood17.getWood();
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = roundVolumeList20.remove(obj21);
        java.lang.Object[] objArray23 = roundVolumeList20.toArray();
        boolean boolean24 = roundVolumeList8.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList20);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator25 = roundVolumeList8.spliterator();
        java.lang.Object[] objArray26 = roundVolumeList8.toArray();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertNotNull(roundVolumeList8);
        org.junit.Assert.assertNotNull(roundVolumeItor9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(roundVolumeList19);
        org.junit.Assert.assertNotNull(roundVolumeList20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator25);
        org.junit.Assert.assertNotNull(objArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[RoundVolume(length=1.0, diameter=1, volume=-1.0), RoundVolume(length=0.0, diameter=0, volume=100.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[RoundVolume(length=1.0, diameter=1, volume=-1.0), RoundVolume(length=0.0, diameter=0, volume=100.0)]");
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test644");
        java.lang.String[] strArray4 = new java.lang.String[] { "CASPIAN", "RoundVolume(length=32.0, diameter=35, volume=52.0)", "RoundVolume(length=0.0, diameter=0, volume=0.0)", "RoundVolume(length=-1.0, diameter=100, volume=-1.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor70");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test645");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean14 = roundVolumeList7.isEmpty();
        java.util.Iterator<javafx.stage.Window> windowItor15 = javafx.stage.Window.impl_getWindows();
        java.util.Iterator<javafx.stage.Window> windowItor16 = javafx.stage.Window.impl_getWindows();
        java.util.Iterator<javafx.stage.Window> windowItor17 = javafx.stage.Window.impl_getWindows();
        java.util.Iterator<javafx.stage.Window> windowItor18 = javafx.stage.Window.impl_getWindows();
        java.util.Iterator<javafx.stage.Window> windowItor19 = javafx.stage.Window.impl_getWindows();
        java.util.Iterator<javafx.stage.Window> windowItor20 = javafx.stage.Window.impl_getWindows();
        java.util.Iterator[] iteratorArray22 = new java.util.Iterator[6];
        @SuppressWarnings("unchecked")
        java.util.Iterator<javafx.stage.Window>[] windowItorArray23 = (java.util.Iterator<javafx.stage.Window>[]) iteratorArray22;
        windowItorArray23[0] = windowItor15;
        windowItorArray23[1] = windowItor16;
        windowItorArray23[2] = windowItor17;
        windowItorArray23[3] = windowItor18;
        windowItorArray23[4] = windowItor19;
        windowItorArray23[5] = windowItor20;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<javafx.stage.Window>[] windowItorArray36 = roundVolumeList7.toArray(windowItorArray23);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(windowItor15);
        org.junit.Assert.assertNotNull(windowItor16);
        org.junit.Assert.assertNotNull(windowItor17);
        org.junit.Assert.assertNotNull(windowItor18);
        org.junit.Assert.assertNotNull(windowItor19);
        org.junit.Assert.assertNotNull(windowItor20);
        org.junit.Assert.assertNotNull(iteratorArray22);
        org.junit.Assert.assertNotNull(windowItorArray23);
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test646");
        Main main0 = new Main();
        main0.init();
        main0.init();
        java.lang.Class<?> wildcardClass3 = main0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test647");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume17 = new logic.RoundVolume();
        roundVolume17.setVolume((double) 0);
        double double20 = roundVolume17.getVolume();
        roundVolume17.setLength((double) 10L);
        logic.RoundVolume roundVolume23 = new logic.RoundVolume();
        roundVolume23.setVolume((double) 0);
        double double26 = roundVolume23.getVolume();
        java.lang.String str27 = roundVolume23.toString();
        boolean boolean28 = roundVolume17.equals((java.lang.Object) str27);
        roundVolume17.setLength((double) 10L);
        boolean boolean32 = roundVolume17.equals((java.lang.Object) "CASPIAN");
        roundVolumeList15.add(0, roundVolume17);
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean38 = roundVolumeList15.remove((java.lang.Object) (byte) 1);
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        yourWood47.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList54 = yourWood47.getWood();
        logic.RoundVolume roundVolume56 = new logic.RoundVolume();
        roundVolume56.setVolume((double) 0);
        double double59 = roundVolume56.getVolume();
        roundVolume56.setLength((double) 10L);
        logic.RoundVolume roundVolume62 = new logic.RoundVolume();
        roundVolume62.setVolume((double) 0);
        double double65 = roundVolume62.getVolume();
        java.lang.String str66 = roundVolume62.toString();
        boolean boolean67 = roundVolume56.equals((java.lang.Object) str66);
        roundVolume56.setLength((double) 10L);
        boolean boolean71 = roundVolume56.equals((java.lang.Object) "CASPIAN");
        roundVolumeList54.add(0, roundVolume56);
        boolean boolean73 = roundVolumeList54.isEmpty();
        boolean boolean74 = roundVolumeList15.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList54);
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        yourWood75.diameterFirstSortWood();
        yourWood75.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList82 = yourWood75.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList83 = yourWood75.getWood();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator84 = roundVolumeList83.spliterator();
        boolean boolean85 = roundVolumeList15.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList83);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str27, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeList54);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str66, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(roundVolumeList82);
        org.junit.Assert.assertNotNull(roundVolumeList83);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test648");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.lang.Object[] objArray92 = roundVolumeList69.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream93 = roundVolumeList69.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
        org.junit.Assert.assertNotNull(roundVolumeStream93);
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test649");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        roundVolume0.setLength((double) 10L);
        logic.RoundVolume roundVolume6 = new logic.RoundVolume();
        roundVolume6.setVolume((double) 0);
        double double9 = roundVolume6.getVolume();
        java.lang.String str10 = roundVolume6.toString();
        boolean boolean11 = roundVolume0.equals((java.lang.Object) str10);
        roundVolume0.setLength((double) 10L);
        double double14 = roundVolume0.getVolume();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str10, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test650");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean14 = roundVolumeList7.isEmpty();
        int int15 = roundVolumeList7.size();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        yourWood24.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList31 = yourWood24.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList31.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator33 = roundVolumeList31.spliterator();
        java.lang.Object[] objArray34 = roundVolumeList31.toArray();
        boolean boolean35 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList31);
        logic.YourWood yourWood36 = new logic.YourWood();
// flaky:         yourWood36.addWood((double) 1L, (int) (byte) 100);
        yourWood36.lengthFirstSortWood();
        yourWood36.diameterFirstSortWood();
        yourWood36.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList43 = yourWood36.getWood();
        logic.YourWood yourWood44 = new logic.YourWood();
// flaky:         yourWood44.addWood((double) 1L, (int) (byte) 100);
        yourWood44.lengthFirstSortWood();
        boolean boolean49 = roundVolumeList43.contains((java.lang.Object) yourWood44);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList43.iterator();
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        boolean boolean67 = roundVolumeList43.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList59);
        boolean boolean68 = roundVolumeList59.isEmpty();
        java.lang.Object[] objArray69 = roundVolumeList59.toArray();
        boolean boolean70 = roundVolumeList59.isEmpty();
        int int71 = roundVolumeList31.lastIndexOf((java.lang.Object) roundVolumeList59);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeList31);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator33);
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(roundVolumeList43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test651");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        boolean boolean30 = roundVolumeList24.contains((java.lang.Object) yourWood25);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor31 = roundVolumeList24.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream32 = roundVolumeList24.stream();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream33 = roundVolumeList24.stream();
        int int34 = roundVolumeList7.indexOf((java.lang.Object) roundVolumeList24);
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        boolean boolean66 = roundVolumeList42.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor67 = roundVolumeList58.listIterator();
        java.lang.Object[] objArray68 = roundVolumeList58.toArray();
        roundVolumeList58.clear();
        logic.RoundVolume roundVolume70 = new logic.RoundVolume();
        boolean boolean71 = roundVolumeList58.equals((java.lang.Object) roundVolume70);
        boolean boolean72 = roundVolumeList24.contains((java.lang.Object) roundVolumeList58);
        logic.RoundVolume roundVolume76 = new logic.RoundVolume((double) (byte) 1, (int) '4', (double) (byte) -1);
        roundVolume76.setDiameter((int) (short) 0);
        boolean boolean79 = roundVolumeList24.add(roundVolume76);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor31);
        org.junit.Assert.assertNotNull(roundVolumeStream32);
        org.junit.Assert.assertNotNull(roundVolumeStream33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor67);
        org.junit.Assert.assertNotNull(objArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test652");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (byte) -1, (int) (byte) 10, (double) (short) 0);
        roundVolume3.setDiameter((int) ' ');
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test653");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean79 = roundVolumeList60.remove((java.lang.Object) false);
        Main main80 = new Main();
        main80.init();
        javafx.application.Application.Parameters parameters82 = main80.getParameters();
        boolean boolean83 = roundVolumeList60.contains((java.lang.Object) parameters82);
        logic.YourWood yourWood84 = new logic.YourWood();
        yourWood84.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList86 = yourWood84.getWood();
        boolean boolean87 = roundVolumeList60.equals((java.lang.Object) yourWood84);
        java.util.ArrayList<logic.RoundVolume> roundVolumeList88 = yourWood84.getWood();
        yourWood84.diameterFirstSortWood();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(parameters82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(roundVolumeList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(roundVolumeList88);
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test654");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList57.listIterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        roundVolume67.setLength((double) (-1L));
        boolean boolean73 = roundVolumeList57.add(roundVolume67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor74 = roundVolumeList57.iterator();
        boolean boolean75 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream76 = roundVolumeList57.stream();
        boolean boolean77 = roundVolumeList57.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test655");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume17 = new logic.RoundVolume();
        roundVolume17.setVolume((double) 0);
        double double20 = roundVolume17.getVolume();
        roundVolume17.setLength((double) 10L);
        logic.RoundVolume roundVolume23 = new logic.RoundVolume();
        roundVolume23.setVolume((double) 0);
        double double26 = roundVolume23.getVolume();
        java.lang.String str27 = roundVolume23.toString();
        boolean boolean28 = roundVolume17.equals((java.lang.Object) str27);
        roundVolume17.setLength((double) 10L);
        boolean boolean32 = roundVolume17.equals((java.lang.Object) "CASPIAN");
        roundVolumeList15.add(0, roundVolume17);
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean38 = roundVolumeList15.remove((java.lang.Object) (byte) 1);
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        yourWood47.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList54 = yourWood47.getWood();
        logic.RoundVolume roundVolume56 = new logic.RoundVolume();
        roundVolume56.setVolume((double) 0);
        double double59 = roundVolume56.getVolume();
        roundVolume56.setLength((double) 10L);
        logic.RoundVolume roundVolume62 = new logic.RoundVolume();
        roundVolume62.setVolume((double) 0);
        double double65 = roundVolume62.getVolume();
        java.lang.String str66 = roundVolume62.toString();
        boolean boolean67 = roundVolume56.equals((java.lang.Object) str66);
        roundVolume56.setLength((double) 10L);
        boolean boolean71 = roundVolume56.equals((java.lang.Object) "CASPIAN");
        roundVolumeList54.add(0, roundVolume56);
        boolean boolean73 = roundVolumeList54.isEmpty();
        boolean boolean74 = roundVolumeList15.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList54);
        int int75 = roundVolumeList15.size();
        logic.RoundVolume roundVolume77 = new logic.RoundVolume();
        roundVolume77.setVolume((double) 0);
        double double80 = roundVolume77.getVolume();
        java.lang.String str81 = roundVolume77.toString();
        double double82 = roundVolume77.getLength();
        java.lang.String str83 = roundVolume77.toString();
        int int84 = roundVolume77.getDiameter();
        roundVolume77.setVolume(35.0d);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume87 = roundVolumeList15.set((int) (byte) -1, roundVolume77);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str27, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeList54);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str66, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str81, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str83, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test656");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (short) 10, (int) (byte) 100, (-1.0d));
        double double4 = roundVolume3.getVolume();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test657");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=0.0, diameter=0, volume=35.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test658");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator14 = roundVolumeList7.spliterator();
        java.lang.Object obj15 = null;
        boolean boolean16 = roundVolumeList7.remove(obj15);
        int int17 = roundVolumeList7.size();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test659");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream4 = roundVolumeList3.stream();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        boolean boolean18 = roundVolumeList12.contains((java.lang.Object) yourWood13);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList12.iterator();
        logic.YourWood yourWood21 = new logic.YourWood();
// flaky:         yourWood21.addWood((double) 1L, (int) (byte) 100);
        yourWood21.lengthFirstSortWood();
        yourWood21.diameterFirstSortWood();
        yourWood21.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList28 = yourWood21.getWood();
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        boolean boolean34 = roundVolumeList28.contains((java.lang.Object) yourWood29);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList28.iterator();
        boolean boolean36 = roundVolumeList12.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList28);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor38 = null; // flaky: roundVolumeList28.listIterator((int) (short) 1);
        boolean boolean39 = roundVolumeList3.remove((java.lang.Object) roundVolumeList28);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream40 = roundVolumeList3.parallelStream();
        roundVolumeList3.clear();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertNotNull(roundVolumeStream4);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor19);
        org.junit.Assert.assertNotNull(roundVolumeList28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream40);
    }

    @Test
    public void test660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test660");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream3 = roundVolumeList2.parallelStream();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume7.setVolume((double) 10);
        java.lang.String str10 = roundVolume7.toString();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume();
        roundVolume11.setVolume((double) 0);
        double double14 = roundVolume11.getVolume();
        java.lang.String str15 = roundVolume11.toString();
        double double16 = roundVolume11.getLength();
        roundVolume11.setLength((double) 'a');
        java.lang.String str19 = roundVolume11.toString();
        logic.RoundVolume roundVolume23 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        double double29 = roundVolume24.getLength();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume33.setVolume((double) 10);
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str40 = roundVolume39.toString();
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume59.setVolume((double) 10);
        java.lang.String str62 = roundVolume59.toString();
        logic.RoundVolume[] roundVolumeArray63 = new logic.RoundVolume[] { roundVolume7, roundVolume11, roundVolume23, roundVolume24, roundVolume33, roundVolume39, roundVolume41, roundVolume44, roundVolume59 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64, roundVolumeArray63);
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        yourWood66.diameterFirstSortWood();
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.YourWood yourWood74 = new logic.YourWood();
// flaky:         yourWood74.addWood((double) 1L, (int) (byte) 100);
        yourWood74.lengthFirstSortWood();
        boolean boolean79 = roundVolumeList73.contains((java.lang.Object) yourWood74);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList73.iterator();
        boolean boolean81 = roundVolumeList64.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        int int82 = roundVolumeList73.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator83 = roundVolumeList73.spliterator();
        int int84 = roundVolumeList2.lastIndexOf((java.lang.Object) roundVolumeList73);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList2.iterator();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeStream3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str10, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str40, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str62, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeItor85);
    }

    @Test
    public void test661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test661");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setVolume((double) (-1L));
        boolean boolean40 = roundVolumeList23.contains((java.lang.Object) (-1L));
        int int41 = roundVolumeList23.size();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test662");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        roundVolume0.setDiameter(100);
        java.lang.String str5 = roundVolume0.toString();
        roundVolume0.setVolume((double) (-1.0f));
        roundVolume0.setVolume((double) (short) -1);
        roundVolume0.setLength((double) (short) 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str5, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
    }

    @Test
    public void test663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test663");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        boolean boolean79 = roundVolumeList69.isEmpty();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test664");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.lang.Object[] objArray66 = roundVolumeList57.toArray();
        java.lang.Object[] objArray67 = roundVolumeList57.toArray();
        boolean boolean68 = roundVolumeList7.equals((java.lang.Object) roundVolumeList57);
        boolean boolean69 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        yourWood70.diameterFirstSortWood();
        yourWood70.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList77 = yourWood70.getWood();
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        boolean boolean83 = roundVolumeList77.contains((java.lang.Object) yourWood78);
        boolean boolean85 = roundVolumeList77.equals((java.lang.Object) (short) 100);
        boolean boolean87 = roundVolumeList77.contains((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean88 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList77);
        logic.RoundVolume roundVolume90 = new logic.RoundVolume();
        roundVolume90.setVolume((double) 0);
        double double93 = roundVolume90.getVolume();
        roundVolume90.setLength((double) (-1L));
        double double96 = roundVolume90.getVolume();
        logic.RoundVolume roundVolume97 = null; // flaky: roundVolumeList7.set((int) (short) 0, roundVolume90);
        logic.RoundVolume roundVolume99 = null; // flaky: roundVolumeList7.get((int) (byte) 0);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(objArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(roundVolumeList77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
// flaky:         org.junit.Assert.assertNotNull(roundVolume97);
// flaky:         org.junit.Assert.assertNotNull(roundVolume99);
    }

    @Test
    public void test665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test665");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood15.getWood();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor24 = roundVolumeList23.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = roundVolumeList7.addAll((int) ' ', (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertNotNull(roundVolumeItor24);
    }

    @Test
    public void test666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test666");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        roundVolume0.setLength((double) (-1L));
        double double6 = roundVolume0.getLength();
        roundVolume0.setDiameter((int) (short) 1);
        java.lang.String str9 = roundVolume0.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "RoundVolume(length=-1.0, diameter=1, volume=0.0)" + "'", str9, "RoundVolume(length=-1.0, diameter=1, volume=0.0)");
    }

    @Test
    public void test667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test667");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume36 = new logic.RoundVolume(35.0d, (int) (short) 100, 10.0d);
// flaky:         roundVolumeList23.add(1, roundVolume36);
        java.lang.Object obj38 = null;
        boolean boolean39 = roundVolumeList23.equals(obj38);
        boolean boolean40 = roundVolumeList23.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test668");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        logic.RoundVolume roundVolume82 = new logic.RoundVolume(1.0d, (int) (short) 10, (double) 10L);
        boolean boolean83 = roundVolumeList69.add(roundVolume82);
        Main main84 = new Main();
        main84.init();
        main84.init();
        javafx.application.Application.Parameters parameters87 = main84.getParameters();
        javafx.application.Application.Parameters parameters88 = main84.getParameters();
        boolean boolean89 = roundVolume82.equals((java.lang.Object) parameters88);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNull(parameters87);
        org.junit.Assert.assertNull(parameters88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test669");
        java.lang.String[] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor70");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test670");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        yourWood78.diameterFirstSortWood();
        yourWood78.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood78.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList86 = yourWood78.getWood();
        int int87 = roundVolumeList69.lastIndexOf((java.lang.Object) roundVolumeList86);
        java.lang.Object[] objArray88 = roundVolumeList86.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream89 = roundVolumeList86.stream();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertNotNull(roundVolumeList86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(objArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(roundVolumeStream89);
    }

    @Test
    public void test671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test671");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 1L, (int) (byte) 10, 100.0d);
    }

    @Test
    public void test672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test672");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        roundVolume35.setVolume((double) 0);
        double double38 = roundVolume35.getVolume();
        java.lang.String str39 = roundVolume35.toString();
        int int40 = roundVolume35.getDiameter();
        roundVolume35.setLength((double) '#');
        roundVolume35.setVolume(10.0d);
        roundVolume35.setVolume(100.0d);
        boolean boolean47 = roundVolumeList23.add(roundVolume35);
        logic.RoundVolume roundVolume48 = new logic.RoundVolume();
        roundVolume48.setVolume((double) 0);
        double double51 = roundVolume48.getVolume();
        java.lang.String str52 = roundVolume48.toString();
        int int53 = roundVolume48.getDiameter();
        boolean boolean54 = roundVolume35.equals((java.lang.Object) int53);
        roundVolume35.setVolume((double) 10.0f);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str39, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str52, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test673");
        Main main0 = new Main();
        main0.init();
        javafx.application.HostServices hostServices2 = main0.getHostServices();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        javafx.application.HostServices hostServices4 = main0.getHostServices();
        org.junit.Assert.assertNotNull(hostServices2);
        org.junit.Assert.assertNull(parameters3);
        org.junit.Assert.assertNotNull(hostServices4);
    }

    @Test
    public void test674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test674");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList39.isEmpty();
        java.lang.Object[] objArray49 = roundVolumeList39.toArray();
        boolean boolean50 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        logic.VolumeDB volumeDB51 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap52 = volumeDB51.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap53 = volumeDB51.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap54 = volumeDB51.getVolumes();
        logic.VolumeDB volumeDB55 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap56 = volumeDB55.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap57 = volumeDB55.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap58 = volumeDB55.getVolumes();
        logic.VolumeDB volumeDB59 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap60 = volumeDB59.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap61 = volumeDB59.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap62 = volumeDB59.getVolumes();
        logic.VolumeDB volumeDB63 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap64 = volumeDB63.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap65 = volumeDB63.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap66 = volumeDB63.getVolumes();
        logic.VolumeDB volumeDB67 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap68 = volumeDB67.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap69 = volumeDB67.getVolumes();
        java.util.HashMap[] hashMapArray71 = new java.util.HashMap[5];
        @SuppressWarnings("unchecked")
        java.util.HashMap<java.lang.String, logic.RoundVolume>[] strMapArray72 = (java.util.HashMap<java.lang.String, logic.RoundVolume>[]) hashMapArray71;
        strMapArray72[0] = strMap54;
        strMapArray72[1] = strMap58;
        strMapArray72[2] = strMap62;
        strMapArray72[3] = strMap66;
        strMapArray72[4] = strMap69;
        java.util.HashMap<java.lang.String, logic.RoundVolume>[] strMapArray83 = roundVolumeList7.toArray(strMapArray72);
        logic.RoundVolume roundVolume84 = new logic.RoundVolume();
        roundVolume84.setVolume((double) 0);
        roundVolume84.setDiameter(100);
        java.lang.String str89 = roundVolume84.toString();
        roundVolume84.setVolume((double) (-1.0f));
        roundVolume84.setVolume((double) (short) -1);
        java.lang.String str94 = roundVolume84.toString();
        boolean boolean95 = roundVolumeList7.contains((java.lang.Object) roundVolume84);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume97 = roundVolumeList7.remove(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(hashMapArray71);
        org.junit.Assert.assertNotNull(strMapArray72);
        org.junit.Assert.assertNotNull(strMapArray83);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str89, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=-1.0)" + "'", str94, "RoundVolume(length=0.0, diameter=100, volume=-1.0)");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test675");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.YourWood yourWood33 = new logic.YourWood();
// flaky:         yourWood33.addWood((double) 1L, (int) (byte) 100);
        yourWood33.lengthFirstSortWood();
        yourWood33.diameterFirstSortWood();
        yourWood33.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList40 = yourWood33.getWood();
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        boolean boolean46 = roundVolumeList40.contains((java.lang.Object) yourWood41);
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        yourWood47.diameterFirstSortWood();
        yourWood47.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList54 = yourWood47.getWood();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        boolean boolean60 = roundVolumeList54.contains((java.lang.Object) yourWood55);
        boolean boolean61 = roundVolumeList40.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList54);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        logic.YourWood yourWood77 = new logic.YourWood();
// flaky:         yourWood77.addWood((double) 1L, (int) (byte) 100);
        yourWood77.lengthFirstSortWood();
        yourWood77.diameterFirstSortWood();
        yourWood77.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList84 = yourWood77.getWood();
        logic.YourWood yourWood85 = new logic.YourWood();
// flaky:         yourWood85.addWood((double) 1L, (int) (byte) 100);
        yourWood85.lengthFirstSortWood();
        boolean boolean90 = roundVolumeList84.contains((java.lang.Object) yourWood85);
        yourWood85.diameterFirstSortWood();
        boolean boolean92 = roundVolumeList69.remove((java.lang.Object) yourWood85);
        roundVolumeList69.clear();
        boolean boolean94 = roundVolumeList40.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean95 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(roundVolumeList54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertNotNull(roundVolumeList84);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test676");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str4 = roundVolume3.toString();
        java.lang.String str5 = roundVolume3.toString();
        logic.YourWood yourWood6 = new logic.YourWood();
// flaky:         yourWood6.addWood((double) 1L, (int) (byte) 100);
        yourWood6.lengthFirstSortWood();
        yourWood6.diameterFirstSortWood();
        yourWood6.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList13 = yourWood6.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList14 = yourWood6.getWood();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator15 = roundVolumeList14.spliterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        boolean boolean31 = roundVolumeList23.equals((java.lang.Object) (short) 100);
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        yourWood48.diameterFirstSortWood();
        yourWood48.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList55 = yourWood48.getWood();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        boolean boolean61 = roundVolumeList55.contains((java.lang.Object) yourWood56);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor62 = roundVolumeList55.iterator();
        boolean boolean63 = roundVolumeList39.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList55);
        boolean boolean64 = roundVolumeList23.equals((java.lang.Object) roundVolumeList55);
        logic.RoundVolume roundVolume65 = new logic.RoundVolume();
        roundVolume65.setVolume((double) 0);
        double double68 = roundVolume65.getVolume();
        java.lang.String str69 = roundVolume65.toString();
        int int70 = roundVolume65.getDiameter();
        roundVolume65.setLength((double) '#');
        roundVolume65.setVolume(10.0d);
        double double75 = roundVolume65.getLength();
        boolean boolean76 = roundVolumeList55.add(roundVolume65);
        boolean boolean77 = roundVolumeList14.equals((java.lang.Object) roundVolume65);
        boolean boolean78 = roundVolume3.equals((java.lang.Object) roundVolumeList14);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream79 = roundVolumeList14.parallelStream();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str4, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str5, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertNotNull(roundVolumeList13);
        org.junit.Assert.assertNotNull(roundVolumeList14);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
        org.junit.Assert.assertNotNull(roundVolumeList55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor62);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str69, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 35.0d + "'", double75 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream79);
    }

    @Test
    public void test677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test677");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setVolume(10.0d);
        java.lang.String str10 = roundVolume0.toString();
        double double11 = roundVolume0.getLength();
        java.lang.Class<?> wildcardClass12 = roundVolume0.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=35.0, diameter=0, volume=10.0)" + "'", str10, "RoundVolume(length=35.0, diameter=0, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test678");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        logic.RoundVolume roundVolume41 = roundVolumeList23.get((int) (short) 0);
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        yourWood42.diameterFirstSortWood();
        yourWood42.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList49 = yourWood42.getWood();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        boolean boolean55 = roundVolumeList49.contains((java.lang.Object) yourWood50);
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.RoundVolume roundVolume59 = new logic.RoundVolume();
        roundVolume59.setVolume((double) 0);
        double double62 = roundVolume59.getVolume();
        roundVolume59.setLength((double) 10L);
        logic.RoundVolume roundVolume65 = new logic.RoundVolume();
        roundVolume65.setVolume((double) 0);
        double double68 = roundVolume65.getVolume();
        java.lang.String str69 = roundVolume65.toString();
        boolean boolean70 = roundVolume59.equals((java.lang.Object) str69);
        roundVolume59.setLength((double) 10L);
        boolean boolean74 = roundVolume59.equals((java.lang.Object) "CASPIAN");
        roundVolumeList57.add(0, roundVolume59);
        logic.RoundVolume roundVolume79 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean80 = roundVolumeList57.remove((java.lang.Object) (byte) 1);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor81 = roundVolumeList57.listIterator();
        int int82 = roundVolumeList23.lastIndexOf((java.lang.Object) roundVolumeItor81);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(roundVolume41);
        org.junit.Assert.assertNotNull(roundVolumeList49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str69, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test679");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double36 = roundVolume35.getLength();
        int int37 = roundVolume35.getDiameter();
        boolean boolean38 = roundVolumeList23.add(roundVolume35);
        logic.RoundVolume roundVolume39 = new logic.RoundVolume();
        roundVolume39.setVolume((double) 0);
        double double42 = roundVolume39.getVolume();
        java.lang.String str43 = roundVolume39.toString();
        double double44 = roundVolume39.getLength();
        roundVolume39.setLength((double) 'a');
        double double47 = roundVolume39.getLength();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        yourWood48.diameterFirstSortWood();
        yourWood48.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList55 = yourWood48.getWood();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        boolean boolean61 = roundVolumeList55.contains((java.lang.Object) yourWood56);
        yourWood56.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList63 = yourWood56.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList63.listIterator();
        boolean boolean65 = roundVolume39.equals((java.lang.Object) roundVolumeList63);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList63.iterator();
        boolean boolean67 = roundVolumeList23.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList63);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator68 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList63.replaceAll(roundVolumeUnaryOperator68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str43, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 97.0d + "'", double47 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(roundVolumeList63);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test680");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean80 = roundVolumeList60.isEmpty();
        logic.RoundVolume roundVolume84 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        logic.RoundVolume roundVolume85 = new logic.RoundVolume();
        roundVolume85.setVolume((double) 0);
        roundVolume85.setDiameter(100);
        java.lang.String str90 = roundVolume85.toString();
        java.lang.String str91 = roundVolume85.toString();
        boolean boolean92 = roundVolume84.equals((java.lang.Object) str91);
        boolean boolean93 = roundVolumeList60.add(roundVolume84);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str90, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str91, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test681");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList7.iterator();
        logic.RoundVolume roundVolume36 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double37 = roundVolume36.getLength();
        boolean boolean38 = roundVolumeList7.add(roundVolume36);
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor53 = roundVolumeList46.iterator();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        yourWood55.diameterFirstSortWood();
        yourWood55.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList62 = yourWood55.getWood();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        boolean boolean68 = roundVolumeList62.contains((java.lang.Object) yourWood63);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList62.iterator();
        boolean boolean70 = roundVolumeList46.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        logic.RoundVolume roundVolume75 = new logic.RoundVolume(35.0d, (int) (short) 100, 10.0d);
// flaky:         roundVolumeList62.add(1, roundVolume75);
        boolean boolean77 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator78 = roundVolumeList62.spliterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList62.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor53);
        org.junit.Assert.assertNotNull(roundVolumeList62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator78);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
    }

    @Test
    public void test682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test682");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean78 = roundVolumeList69.isEmpty();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        boolean boolean80 = roundVolumeList69.isEmpty();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream81 = roundVolumeList69.stream();
        Main main82 = new Main();
        main82.init();
        main82.init();
        javafx.application.Application.Parameters parameters85 = main82.getParameters();
        main82.stop();
        javafx.application.Application.Parameters parameters87 = main82.getParameters();
        main82.stop();
        boolean boolean89 = roundVolumeList69.remove((java.lang.Object) main82);
        logic.RoundVolume roundVolume91 = new logic.RoundVolume();
        roundVolume91.setVolume((double) 0);
        double double94 = roundVolume91.getLength();
        roundVolume91.setVolume(100.0d);
        int int97 = roundVolume91.getDiameter();
        java.lang.String str98 = roundVolume91.toString();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume99 = roundVolumeList69.set(100, roundVolume91);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream81);
        org.junit.Assert.assertNull(parameters85);
        org.junit.Assert.assertNull(parameters87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str98, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
    }

    @Test
    public void test683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test683");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        int int1 = roundVolume0.getDiameter();
        roundVolume0.setVolume((double) 0.0f);
        double double4 = roundVolume0.getLength();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test684");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean78 = roundVolumeList69.isEmpty();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        boolean boolean80 = roundVolumeList69.isEmpty();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream81 = roundVolumeList69.stream();
        Main main82 = new Main();
        main82.init();
        main82.init();
        javafx.application.Application.Parameters parameters85 = main82.getParameters();
        main82.stop();
        javafx.application.Application.Parameters parameters87 = main82.getParameters();
        main82.stop();
        boolean boolean89 = roundVolumeList69.remove((java.lang.Object) main82);
        main82.init();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream81);
        org.junit.Assert.assertNull(parameters85);
        org.junit.Assert.assertNull(parameters87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test685");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator17 = roundVolumeList15.spliterator();
        java.lang.Object[] objArray18 = roundVolumeList15.toArray();
        logic.YourWood yourWood20 = new logic.YourWood();
// flaky:         yourWood20.addWood((double) 1L, (int) (byte) 100);
        yourWood20.lengthFirstSortWood();
        yourWood20.diameterFirstSortWood();
        yourWood20.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList27 = yourWood20.getWood();
        logic.YourWood yourWood28 = new logic.YourWood();
// flaky:         yourWood28.addWood((double) 1L, (int) (byte) 100);
        yourWood28.lengthFirstSortWood();
        boolean boolean33 = roundVolumeList27.contains((java.lang.Object) yourWood28);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor34 = roundVolumeList27.iterator();
        boolean boolean35 = roundVolumeList27.isEmpty();
        logic.YourWood yourWood36 = new logic.YourWood();
// flaky:         yourWood36.addWood((double) 1L, (int) (byte) 100);
        yourWood36.lengthFirstSortWood();
        yourWood36.diameterFirstSortWood();
        yourWood36.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList43 = yourWood36.getWood();
        logic.YourWood yourWood44 = new logic.YourWood();
// flaky:         yourWood44.addWood((double) 1L, (int) (byte) 100);
        yourWood44.lengthFirstSortWood();
        boolean boolean49 = roundVolumeList43.contains((java.lang.Object) yourWood44);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList43.iterator();
        boolean boolean51 = roundVolumeList27.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList43);
        logic.RoundVolume roundVolume52 = new logic.RoundVolume();
        roundVolume52.setVolume((double) 0);
        double double55 = roundVolume52.getVolume();
        java.lang.String str56 = roundVolume52.toString();
        double double57 = roundVolume52.getLength();
        roundVolume52.setLength((double) 'a');
        boolean boolean60 = roundVolumeList27.add(roundVolume52);
        double double61 = roundVolume52.getLength();
        roundVolume52.setLength((double) '4');
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume64 = roundVolumeList15.set((int) (short) 10, roundVolume52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator17);
        org.junit.Assert.assertNotNull(objArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(roundVolumeList27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(roundVolumeList43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str56, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 97.0d + "'", double61 == 97.0d);
    }

    @Test
    public void test686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test686");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        java.lang.String str6 = roundVolume0.toString();
        double double7 = roundVolume0.getLength();
        roundVolume0.setDiameter((int) (short) 1);
        int int10 = roundVolume0.getDiameter();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str6, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test687");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList57.listIterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        roundVolume67.setLength((double) (-1L));
        boolean boolean73 = roundVolumeList57.add(roundVolume67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor74 = roundVolumeList57.iterator();
        boolean boolean75 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream76 = roundVolumeList57.stream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor77 = roundVolumeList57.iterator();
        logic.RoundVolume roundVolume82 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double83 = roundVolume82.getLength();
        int int84 = roundVolume82.getDiameter();
        double double85 = roundVolume82.getLength();
        int int86 = roundVolume82.getDiameter();
        roundVolume82.setDiameter((int) '4');
        logic.RoundVolume roundVolume89 = roundVolumeList57.set((int) (byte) 0, roundVolume82);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream76);
        org.junit.Assert.assertNotNull(roundVolumeItor77);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(roundVolume89);
    }

    @Test
    public void test688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test688");
        Main main0 = new Main();
        main0.init();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.HostServices hostServices3 = main0.getHostServices();
        main0.init();
        javafx.application.Application.Parameters parameters5 = main0.getParameters();
        main0.init();
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNotNull(hostServices3);
        org.junit.Assert.assertNull(parameters5);
    }

    @Test
    public void test689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test689");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream4 = roundVolumeList3.stream();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        boolean boolean18 = roundVolumeList12.contains((java.lang.Object) yourWood13);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList12.iterator();
        logic.YourWood yourWood21 = new logic.YourWood();
// flaky:         yourWood21.addWood((double) 1L, (int) (byte) 100);
        yourWood21.lengthFirstSortWood();
        yourWood21.diameterFirstSortWood();
        yourWood21.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList28 = yourWood21.getWood();
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        boolean boolean34 = roundVolumeList28.contains((java.lang.Object) yourWood29);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList28.iterator();
        boolean boolean36 = roundVolumeList12.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList28);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor38 = null; // flaky: roundVolumeList28.listIterator((int) (short) 1);
        boolean boolean39 = roundVolumeList3.remove((java.lang.Object) roundVolumeList28);
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        yourWood40.diameterFirstSortWood();
        yourWood40.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList47 = yourWood40.getWood();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        boolean boolean53 = roundVolumeList47.contains((java.lang.Object) yourWood48);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor54 = roundVolumeList47.iterator();
        boolean boolean55 = roundVolumeList47.isEmpty();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        yourWood56.diameterFirstSortWood();
        yourWood56.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList63 = yourWood56.getWood();
        logic.YourWood yourWood64 = new logic.YourWood();
// flaky:         yourWood64.addWood((double) 1L, (int) (byte) 100);
        yourWood64.lengthFirstSortWood();
        boolean boolean69 = roundVolumeList63.contains((java.lang.Object) yourWood64);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor70 = roundVolumeList63.iterator();
        logic.YourWood yourWood72 = new logic.YourWood();
// flaky:         yourWood72.addWood((double) 1L, (int) (byte) 100);
        yourWood72.lengthFirstSortWood();
        yourWood72.diameterFirstSortWood();
        yourWood72.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList79 = yourWood72.getWood();
        logic.YourWood yourWood80 = new logic.YourWood();
// flaky:         yourWood80.addWood((double) 1L, (int) (byte) 100);
        yourWood80.lengthFirstSortWood();
        boolean boolean85 = roundVolumeList79.contains((java.lang.Object) yourWood80);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor86 = roundVolumeList79.iterator();
        boolean boolean87 = roundVolumeList63.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList79);
        boolean boolean88 = roundVolumeList79.isEmpty();
        java.lang.Object[] objArray89 = roundVolumeList79.toArray();
        boolean boolean90 = roundVolumeList47.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList79);
        boolean boolean91 = roundVolumeList3.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList47);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream92 = roundVolumeList3.stream();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume94 = roundVolumeList3.remove((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertNotNull(roundVolumeStream4);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor19);
        org.junit.Assert.assertNotNull(roundVolumeList28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeList47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(roundVolumeList63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor70);
        org.junit.Assert.assertNotNull(roundVolumeList79);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor86);
// flaky:         org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream92);
    }

    @Test
    public void test690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test690");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood16.getWood();
        int int22 = roundVolumeList7.lastIndexOf((java.lang.Object) roundVolumeList21);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream23 = roundVolumeList21.stream();
        int int24 = roundVolumeList21.size();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeStream23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test691");
        Main main0 = new Main();
        main0.init();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        main0.init();
        main0.stop();
        org.junit.Assert.assertNull(parameters2);
    }

    @Test
    public void test692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test692");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.lang.Object[] objArray66 = roundVolumeList57.toArray();
        java.lang.Object[] objArray67 = roundVolumeList57.toArray();
        boolean boolean68 = roundVolumeList7.equals((java.lang.Object) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList7.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList72 = roundVolumeList7.subList((int) (short) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(objArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
    }

    @Test
    public void test693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test693");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        roundVolumeList23.clear();
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
    }

    @Test
    public void test694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test694");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        java.lang.String str8 = roundVolume0.toString();
        roundVolume0.setVolume((double) 'a');
        Main main11 = new Main();
        main11.stop();
        javafx.application.Application.Parameters parameters13 = main11.getParameters();
        javafx.application.Application.Parameters parameters14 = main11.getParameters();
        main11.init();
        javafx.application.HostServices hostServices16 = main11.getHostServices();
        boolean boolean17 = roundVolume0.equals((java.lang.Object) hostServices16);
        roundVolume0.setVolume((double) 2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str8, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertNull(parameters13);
        org.junit.Assert.assertNull(parameters14);
        org.junit.Assert.assertNotNull(hostServices16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test695");
        java.lang.String[] strArray3 = new java.lang.String[] { "RoundVolume(length=100.0, diameter=1, volume=1.0)", "RoundVolume(length=0.0, diameter=0, volume=35.0)", "RoundVolume(length=10.0, diameter=100, volume=0.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor70");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test696");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean79 = roundVolumeList60.remove((java.lang.Object) false);
        logic.YourWood yourWood80 = new logic.YourWood();
// flaky:         yourWood80.addWood((double) 1L, (int) (byte) 100);
        yourWood80.lengthFirstSortWood();
        yourWood80.diameterFirstSortWood();
        yourWood80.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList87 = yourWood80.getWood();
        logic.YourWood yourWood88 = new logic.YourWood();
// flaky:         yourWood88.addWood((double) 1L, (int) (byte) 100);
        yourWood88.lengthFirstSortWood();
        boolean boolean93 = roundVolumeList87.contains((java.lang.Object) yourWood88);
        yourWood88.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList95 = yourWood88.getWood();
        int int96 = roundVolumeList60.lastIndexOf((java.lang.Object) yourWood88);
        yourWood88.diameterFirstSortWood();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeList87);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(roundVolumeList95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test697");
        logic.YourWood yourWood0 = new logic.YourWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList1 = yourWood0.getWood();
        yourWood0.lengthFirstSortWood();
        org.junit.Assert.assertNotNull(roundVolumeList1);
    }

    @Test
    public void test698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test698");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        boolean boolean18 = roundVolumeList12.contains((java.lang.Object) yourWood13);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList12.iterator();
        logic.YourWood yourWood21 = new logic.YourWood();
// flaky:         yourWood21.addWood((double) 1L, (int) (byte) 100);
        yourWood21.lengthFirstSortWood();
        yourWood21.diameterFirstSortWood();
        yourWood21.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList28 = yourWood21.getWood();
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        boolean boolean34 = roundVolumeList28.contains((java.lang.Object) yourWood29);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList28.iterator();
        boolean boolean36 = roundVolumeList12.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList28);
        boolean boolean37 = roundVolume3.equals((java.lang.Object) roundVolumeList28);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator38 = roundVolumeList28.spliterator();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor19);
        org.junit.Assert.assertNotNull(roundVolumeList28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator38);
    }

    @Test
    public void test699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test699");
        Main main0 = new Main();
        main0.init();
        javafx.application.HostServices hostServices2 = main0.getHostServices();
        main0.init();
        main0.init();
        javafx.application.Application.Parameters parameters5 = main0.getParameters();
        javafx.application.Application.Parameters parameters6 = main0.getParameters();
        org.junit.Assert.assertNotNull(hostServices2);
        org.junit.Assert.assertNull(parameters5);
        org.junit.Assert.assertNull(parameters6);
    }

    @Test
    public void test700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test700");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator14 = roundVolumeList7.spliterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        boolean boolean30 = roundVolumeList22.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray31 = roundVolumeList22.toArray();
        boolean boolean32 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList22);
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double38 = roundVolume37.getLength();
        int int39 = roundVolume37.getDiameter();
        double double40 = roundVolume37.getLength();
        logic.RoundVolume roundVolume41 = null; // flaky: roundVolumeList7.set(0, roundVolume37);
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        yourWood42.diameterFirstSortWood();
        yourWood42.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList49 = yourWood42.getWood();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        boolean boolean55 = roundVolumeList49.contains((java.lang.Object) yourWood50);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor56 = roundVolumeList49.iterator();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        yourWood58.diameterFirstSortWood();
        yourWood58.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList65 = yourWood58.getWood();
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        boolean boolean71 = roundVolumeList65.contains((java.lang.Object) yourWood66);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor72 = roundVolumeList65.iterator();
        boolean boolean73 = roundVolumeList49.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList65);
        java.lang.Object[] objArray74 = roundVolumeList65.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream75 = roundVolumeList65.parallelStream();
        logic.YourWood yourWood76 = new logic.YourWood();
// flaky:         yourWood76.addWood((double) 1L, (int) (byte) 100);
        yourWood76.lengthFirstSortWood();
        yourWood76.diameterFirstSortWood();
        yourWood76.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList83 = yourWood76.getWood();
        logic.YourWood yourWood84 = new logic.YourWood();
// flaky:         yourWood84.addWood((double) 1L, (int) (byte) 100);
        yourWood84.lengthFirstSortWood();
        boolean boolean89 = roundVolumeList83.contains((java.lang.Object) yourWood84);
        yourWood84.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList91 = yourWood84.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor92 = roundVolumeList91.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator93 = roundVolumeList91.spliterator();
        java.lang.Object[] objArray94 = roundVolumeList91.toArray();
        boolean boolean95 = roundVolumeList65.contains((java.lang.Object) roundVolumeList91);
        boolean boolean96 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList65);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
// flaky:         org.junit.Assert.assertNotNull(roundVolume41);
        org.junit.Assert.assertNotNull(roundVolumeList49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor56);
        org.junit.Assert.assertNotNull(roundVolumeList65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor72);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(roundVolumeStream75);
        org.junit.Assert.assertNotNull(roundVolumeList83);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeList91);
        org.junit.Assert.assertNotNull(roundVolumeItor92);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator93);
        org.junit.Assert.assertNotNull(objArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test701");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        roundVolume0.setLength((double) 10L);
        logic.RoundVolume roundVolume6 = new logic.RoundVolume();
        roundVolume6.setVolume((double) 0);
        double double9 = roundVolume6.getVolume();
        java.lang.String str10 = roundVolume6.toString();
        boolean boolean11 = roundVolume0.equals((java.lang.Object) str10);
        roundVolume0.setLength((double) 10L);
        boolean boolean15 = roundVolume0.equals((java.lang.Object) "CASPIAN");
        double double16 = roundVolume0.getVolume();
        roundVolume0.setDiameter((int) (short) 1);
        roundVolume0.setLength((double) (byte) 10);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str10, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test702");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        double double44 = roundVolume41.getVolume();
        java.lang.String str45 = roundVolume41.toString();
        double double46 = roundVolume41.getLength();
        roundVolume41.setLength((double) 'a');
        roundVolume41.setLength((double) (short) 0);
        logic.RoundVolume roundVolume51 = null; // flaky: roundVolumeList23.set((int) (short) 1, roundVolume41);
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        logic.YourWood yourWood68 = new logic.YourWood();
// flaky:         yourWood68.addWood((double) 1L, (int) (byte) 100);
        yourWood68.lengthFirstSortWood();
        yourWood68.diameterFirstSortWood();
        yourWood68.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList75 = yourWood68.getWood();
        logic.YourWood yourWood76 = new logic.YourWood();
// flaky:         yourWood76.addWood((double) 1L, (int) (byte) 100);
        yourWood76.lengthFirstSortWood();
        boolean boolean81 = roundVolumeList75.contains((java.lang.Object) yourWood76);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor82 = roundVolumeList75.iterator();
        boolean boolean83 = roundVolumeList59.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList75);
        java.lang.Object[] objArray84 = roundVolumeList75.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream85 = roundVolumeList75.parallelStream();
        boolean boolean86 = roundVolumeList23.remove((java.lang.Object) roundVolumeList75);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator87 = roundVolumeList23.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str45, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
// flaky:         org.junit.Assert.assertNotNull(roundVolume51);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertNotNull(roundVolumeList75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor82);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(roundVolumeStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator87);
    }

    @Test
    public void test703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test703");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        roundVolumeList2.clear();
        logic.RoundVolume roundVolume4 = new logic.RoundVolume();
        roundVolume4.setVolume((double) 0);
        double double7 = roundVolume4.getVolume();
        roundVolume4.setLength((double) (-1L));
        java.lang.Class<?> wildcardClass10 = roundVolume4.getClass();
        boolean boolean11 = roundVolumeList2.remove((java.lang.Object) wildcardClass10);
        logic.YourWood yourWood13 = new logic.YourWood();
        yourWood13.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood13.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList16 = yourWood13.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream17 = roundVolumeList16.stream();
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList25.iterator();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        boolean boolean49 = roundVolumeList25.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor51 = null; // flaky: roundVolumeList41.listIterator((int) (short) 1);
        boolean boolean52 = roundVolumeList16.remove((java.lang.Object) roundVolumeList41);
        logic.YourWood yourWood53 = new logic.YourWood();
// flaky:         yourWood53.addWood((double) 1L, (int) (byte) 100);
        yourWood53.lengthFirstSortWood();
        yourWood53.diameterFirstSortWood();
        yourWood53.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = yourWood53.getWood();
        logic.YourWood yourWood61 = new logic.YourWood();
// flaky:         yourWood61.addWood((double) 1L, (int) (byte) 100);
        yourWood61.lengthFirstSortWood();
        boolean boolean66 = roundVolumeList60.contains((java.lang.Object) yourWood61);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor67 = roundVolumeList60.iterator();
        logic.YourWood yourWood69 = new logic.YourWood();
// flaky:         yourWood69.addWood((double) 1L, (int) (byte) 100);
        yourWood69.lengthFirstSortWood();
        yourWood69.diameterFirstSortWood();
        yourWood69.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList76 = yourWood69.getWood();
        logic.YourWood yourWood77 = new logic.YourWood();
// flaky:         yourWood77.addWood((double) 1L, (int) (byte) 100);
        yourWood77.lengthFirstSortWood();
        boolean boolean82 = roundVolumeList76.contains((java.lang.Object) yourWood77);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor83 = roundVolumeList76.iterator();
        boolean boolean84 = roundVolumeList60.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList76);
        boolean boolean85 = roundVolumeList76.isEmpty();
        java.lang.Object[] objArray86 = roundVolumeList76.toArray();
        int int87 = roundVolumeList16.indexOf((java.lang.Object) roundVolumeList76);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = roundVolumeList2.addAll((int) (short) 100, (java.util.Collection<logic.RoundVolume>) roundVolumeList76);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList16);
        org.junit.Assert.assertNotNull(roundVolumeStream17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeList60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor67);
        org.junit.Assert.assertNotNull(roundVolumeList76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor83);
// flaky:         org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test704");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList23.isEmpty();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        int int49 = roundVolumeList39.size();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList39.listIterator();
        java.lang.Object obj51 = null;
        boolean boolean52 = roundVolumeList39.remove(obj51);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test705");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume(0.0d, (int) ' ', 35.0d);
    }

    @Test
    public void test706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test706");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream31 = roundVolumeList23.stream();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        boolean boolean49 = roundVolumeList15.isEmpty();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator64 = roundVolumeList57.spliterator();
        java.lang.Object obj65 = null;
        boolean boolean66 = roundVolumeList57.remove(obj65);
        Main main67 = new Main();
        main67.init();
        javafx.application.Application.Parameters parameters69 = main67.getParameters();
        javafx.application.HostServices hostServices70 = main67.getHostServices();
        javafx.application.Application.Parameters parameters71 = main67.getParameters();
        javafx.application.HostServices hostServices72 = main67.getHostServices();
        boolean boolean73 = roundVolumeList57.contains((java.lang.Object) main67);
        boolean boolean74 = roundVolumeList15.remove((java.lang.Object) boolean73);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeStream31);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(parameters69);
        org.junit.Assert.assertNotNull(hostServices70);
        org.junit.Assert.assertNull(parameters71);
        org.junit.Assert.assertNotNull(hostServices72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test707");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
// flaky:         yourWood0.addWood((double) 1L, 100);
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList9 = yourWood0.getWood();
        boolean boolean10 = roundVolumeList9.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test708");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        roundVolume3.setLength((double) 100.0f);
    }

    @Test
    public void test709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test709");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        logic.YourWood yourWood3 = new logic.YourWood();
// flaky:         yourWood3.addWood((double) 1L, (int) (byte) 100);
        yourWood3.lengthFirstSortWood();
        yourWood3.diameterFirstSortWood();
        yourWood3.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList10 = yourWood3.getWood();
        logic.YourWood yourWood11 = new logic.YourWood();
// flaky:         yourWood11.addWood((double) 1L, (int) (byte) 100);
        yourWood11.lengthFirstSortWood();
        boolean boolean16 = roundVolumeList10.contains((java.lang.Object) yourWood11);
        yourWood11.diameterFirstSortWood();
        boolean boolean18 = roundVolume0.equals((java.lang.Object) yourWood11);
        logic.YourWood yourWood19 = new logic.YourWood();
// flaky:         yourWood19.addWood((double) 1L, (int) (byte) 100);
        yourWood19.lengthFirstSortWood();
        yourWood19.diameterFirstSortWood();
        yourWood19.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList26 = yourWood19.getWood();
        logic.YourWood yourWood27 = new logic.YourWood();
// flaky:         yourWood27.addWood((double) 1L, (int) (byte) 100);
        yourWood27.lengthFirstSortWood();
        boolean boolean32 = roundVolumeList26.contains((java.lang.Object) yourWood27);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor33 = roundVolumeList26.iterator();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        boolean boolean50 = roundVolumeList26.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList42);
        java.lang.Object obj51 = null;
        boolean boolean52 = roundVolumeList26.remove(obj51);
        boolean boolean53 = roundVolume0.equals(obj51);
        double double54 = roundVolume0.getVolume();
        org.junit.Assert.assertNotNull(roundVolumeList10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeList26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor33);
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test710");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream92 = roundVolumeList69.parallelStream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor93 = roundVolumeList69.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream94 = roundVolumeList69.parallelStream();
        int int96 = roundVolumeList69.lastIndexOf((java.lang.Object) "hi!");
        java.util.Iterator<logic.RoundVolume> roundVolumeItor97 = roundVolumeList69.iterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(roundVolumeStream92);
        org.junit.Assert.assertNotNull(roundVolumeItor93);
        org.junit.Assert.assertNotNull(roundVolumeStream94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeItor97);
    }

    @Test
    public void test711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test711");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean80 = roundVolumeList60.isEmpty();
        logic.YourWood yourWood81 = new logic.YourWood();
// flaky:         yourWood81.addWood((double) 1L, (int) (byte) 100);
        yourWood81.lengthFirstSortWood();
        yourWood81.diameterFirstSortWood();
        yourWood81.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList88 = yourWood81.getWood();
        logic.YourWood yourWood89 = new logic.YourWood();
// flaky:         yourWood89.addWood((double) 1L, (int) (byte) 100);
        yourWood89.lengthFirstSortWood();
        boolean boolean94 = roundVolumeList88.contains((java.lang.Object) yourWood89);
        yourWood89.diameterFirstSortWood();
        yourWood89.lengthFirstSortWood();
        boolean boolean97 = roundVolumeList60.equals((java.lang.Object) yourWood89);
        boolean boolean98 = roundVolumeList60.isEmpty();
        java.lang.Object[] objArray99 = roundVolumeList60.toArray();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(roundVolumeList88);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(objArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray99), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray99), "[]");
    }

    @Test
    public void test712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test712");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.lang.Object[] objArray66 = roundVolumeList57.toArray();
        java.lang.Object[] objArray67 = roundVolumeList57.toArray();
        boolean boolean68 = roundVolumeList7.equals((java.lang.Object) roundVolumeList57);
        boolean boolean69 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        yourWood70.diameterFirstSortWood();
        yourWood70.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList77 = yourWood70.getWood();
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        boolean boolean83 = roundVolumeList77.contains((java.lang.Object) yourWood78);
        boolean boolean85 = roundVolumeList77.equals((java.lang.Object) (short) 100);
        boolean boolean87 = roundVolumeList77.contains((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean88 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList77);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor89 = roundVolumeList7.listIterator();
        roundVolumeList7.clear();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(objArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(roundVolumeList77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor89);
    }

    @Test
    public void test713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test713");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        logic.YourWood yourWood14 = new logic.YourWood();
// flaky:         yourWood14.addWood((double) 1L, (int) (byte) 100);
        yourWood14.lengthFirstSortWood();
        yourWood14.diameterFirstSortWood();
        yourWood14.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood14.getWood();
        logic.YourWood yourWood22 = new logic.YourWood();
// flaky:         yourWood22.addWood((double) 1L, (int) (byte) 100);
        yourWood22.lengthFirstSortWood();
        boolean boolean27 = roundVolumeList21.contains((java.lang.Object) yourWood22);
        boolean boolean28 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList21);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream29 = roundVolumeList7.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream29);
    }

    @Test
    public void test714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test714");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList16 = yourWood8.getWood();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume18 = roundVolumeList16.get(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList16);
    }

    @Test
    public void test715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test715");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        boolean boolean30 = roundVolumeList24.contains((java.lang.Object) yourWood25);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor31 = roundVolumeList24.iterator();
        logic.YourWood yourWood33 = new logic.YourWood();
// flaky:         yourWood33.addWood((double) 1L, (int) (byte) 100);
        yourWood33.lengthFirstSortWood();
        yourWood33.diameterFirstSortWood();
        yourWood33.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList40 = yourWood33.getWood();
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        boolean boolean46 = roundVolumeList40.contains((java.lang.Object) yourWood41);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor47 = roundVolumeList40.iterator();
        boolean boolean48 = roundVolumeList24.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList40);
        java.lang.Object obj49 = null;
        boolean boolean50 = roundVolumeList24.remove(obj49);
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        logic.YourWood yourWood67 = new logic.YourWood();
// flaky:         yourWood67.addWood((double) 1L, (int) (byte) 100);
        yourWood67.lengthFirstSortWood();
        yourWood67.diameterFirstSortWood();
        yourWood67.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList74 = yourWood67.getWood();
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        boolean boolean80 = roundVolumeList74.contains((java.lang.Object) yourWood75);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor81 = roundVolumeList74.iterator();
        boolean boolean82 = roundVolumeList58.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        java.lang.Object[] objArray83 = roundVolumeList74.toArray();
        java.lang.Object[] objArray84 = roundVolumeList74.toArray();
        boolean boolean85 = roundVolumeList24.equals((java.lang.Object) roundVolumeList74);
        java.lang.Object obj86 = null;
        boolean boolean87 = roundVolumeList74.contains(obj86);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor88 = roundVolumeList74.iterator();
        boolean boolean89 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator90 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.replaceAll(roundVolumeUnaryOperator90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor31);
        org.junit.Assert.assertNotNull(roundVolumeList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
        org.junit.Assert.assertNotNull(roundVolumeList74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor81);
// flaky:         org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor88);
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test716");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        boolean boolean66 = roundVolumeList42.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        int int68 = roundVolumeList58.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray69 = roundVolumeList58.toArray();
        logic.RoundVolume roundVolume70 = new logic.RoundVolume();
        roundVolume70.setVolume((double) 0);
        double double73 = roundVolume70.getVolume();
        java.lang.String str74 = roundVolume70.toString();
        int int75 = roundVolume70.getDiameter();
        roundVolume70.setLength((double) '#');
        roundVolume70.setVolume(10.0d);
        roundVolume70.setVolume(100.0d);
        boolean boolean82 = roundVolumeList58.add(roundVolume70);
        boolean boolean83 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator84 = roundVolumeList23.spliterator();
        java.lang.Object[] objArray85 = roundVolumeList23.toArray();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(objArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str74, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator84);
        org.junit.Assert.assertNotNull(objArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[RoundVolume(length=1.0, diameter=1, volume=-1.0), RoundVolume(length=1.0, diameter=1, volume=-1.0), RoundVolume(length=35.0, diameter=0, volume=100.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[RoundVolume(length=1.0, diameter=1, volume=-1.0), RoundVolume(length=1.0, diameter=1, volume=-1.0), RoundVolume(length=35.0, diameter=0, volume=100.0)]");
    }

    @Test
    public void test717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test717");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        double double8 = roundVolume0.getLength();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList16 = yourWood9.getWood();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        boolean boolean22 = roundVolumeList16.contains((java.lang.Object) yourWood17);
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor25 = roundVolumeList24.listIterator();
        boolean boolean26 = roundVolume0.equals((java.lang.Object) roundVolumeList24);
        logic.YourWood yourWood27 = new logic.YourWood();
// flaky:         yourWood27.addWood((double) 1L, (int) (byte) 100);
        yourWood27.lengthFirstSortWood();
        yourWood27.diameterFirstSortWood();
        yourWood27.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList34 = yourWood27.getWood();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        boolean boolean40 = roundVolumeList34.contains((java.lang.Object) yourWood35);
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        roundVolume44.setLength((double) 10L);
        boolean boolean59 = roundVolume44.equals((java.lang.Object) "CASPIAN");
        roundVolumeList42.add(0, roundVolume44);
        boolean boolean61 = roundVolumeList42.isEmpty();
        boolean boolean62 = roundVolumeList24.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList42);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream63 = roundVolumeList24.parallelStream();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 97.0d + "'", double8 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertNotNull(roundVolumeItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(roundVolumeList34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream63);
    }

    @Test
    public void test718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test718");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList4 = yourWood0.getWood();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.RoundVolume roundVolume17 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume17.setVolume((double) 10);
        java.lang.String str20 = roundVolume17.toString();
        logic.RoundVolume roundVolume21 = new logic.RoundVolume();
        roundVolume21.setVolume((double) 0);
        double double24 = roundVolume21.getVolume();
        java.lang.String str25 = roundVolume21.toString();
        double double26 = roundVolume21.getLength();
        roundVolume21.setLength((double) 'a');
        java.lang.String str29 = roundVolume21.toString();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume34 = new logic.RoundVolume();
        roundVolume34.setVolume((double) 0);
        double double37 = roundVolume34.getVolume();
        java.lang.String str38 = roundVolume34.toString();
        double double39 = roundVolume34.getLength();
        logic.RoundVolume roundVolume43 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume43.setVolume((double) 10);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str50 = roundVolume49.toString();
        logic.RoundVolume roundVolume51 = new logic.RoundVolume();
        roundVolume51.setVolume((double) 0);
        logic.RoundVolume roundVolume54 = new logic.RoundVolume();
        roundVolume54.setVolume((double) 0);
        double double57 = roundVolume54.getVolume();
        roundVolume54.setLength((double) 10L);
        logic.RoundVolume roundVolume60 = new logic.RoundVolume();
        roundVolume60.setVolume((double) 0);
        double double63 = roundVolume60.getVolume();
        java.lang.String str64 = roundVolume60.toString();
        boolean boolean65 = roundVolume54.equals((java.lang.Object) str64);
        logic.RoundVolume roundVolume69 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume69.setVolume((double) 10);
        java.lang.String str72 = roundVolume69.toString();
        logic.RoundVolume[] roundVolumeArray73 = new logic.RoundVolume[] { roundVolume17, roundVolume21, roundVolume33, roundVolume34, roundVolume43, roundVolume49, roundVolume51, roundVolume54, roundVolume69 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList74 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList74, roundVolumeArray73);
        logic.YourWood yourWood76 = new logic.YourWood();
// flaky:         yourWood76.addWood((double) 1L, (int) (byte) 100);
        yourWood76.lengthFirstSortWood();
        yourWood76.diameterFirstSortWood();
        yourWood76.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList83 = yourWood76.getWood();
        logic.YourWood yourWood84 = new logic.YourWood();
// flaky:         yourWood84.addWood((double) 1L, (int) (byte) 100);
        yourWood84.lengthFirstSortWood();
        boolean boolean89 = roundVolumeList83.contains((java.lang.Object) yourWood84);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor90 = roundVolumeList83.iterator();
        boolean boolean91 = roundVolumeList74.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList83);
        int int93 = roundVolumeList74.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean94 = roundVolumeList12.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream95 = roundVolumeList12.parallelStream();
        boolean boolean96 = roundVolumeList4.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList12);
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList4);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str20, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str25, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str29, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str38, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str50, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str64, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str72, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(roundVolumeList83);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test719");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.lang.Object[] objArray66 = roundVolumeList57.toArray();
        java.lang.Object[] objArray67 = roundVolumeList57.toArray();
        boolean boolean68 = roundVolumeList7.equals((java.lang.Object) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList7.listIterator();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator70 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.replaceAll(roundVolumeUnaryOperator70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(objArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
    }

    @Test
    public void test720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test720");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        boolean boolean30 = roundVolumeList24.contains((java.lang.Object) yourWood25);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor31 = roundVolumeList24.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream32 = roundVolumeList24.stream();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream33 = roundVolumeList24.stream();
        int int34 = roundVolumeList7.indexOf((java.lang.Object) roundVolumeList24);
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        boolean boolean66 = roundVolumeList42.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor67 = roundVolumeList58.listIterator();
        java.lang.Object[] objArray68 = roundVolumeList58.toArray();
        roundVolumeList58.clear();
        logic.RoundVolume roundVolume70 = new logic.RoundVolume();
        boolean boolean71 = roundVolumeList58.equals((java.lang.Object) roundVolume70);
        boolean boolean72 = roundVolumeList24.contains((java.lang.Object) roundVolumeList58);
        Main main73 = new Main();
        main73.init();
        main73.init();
        main73.init();
        javafx.application.HostServices hostServices77 = main73.getHostServices();
        main73.stop();
        int int79 = roundVolumeList58.lastIndexOf((java.lang.Object) main73);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor31);
        org.junit.Assert.assertNotNull(roundVolumeStream32);
        org.junit.Assert.assertNotNull(roundVolumeStream33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor67);
        org.junit.Assert.assertNotNull(objArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(hostServices77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
    }

    @Test
    public void test721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test721");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        double double44 = roundVolume41.getVolume();
        java.lang.String str45 = roundVolume41.toString();
        double double46 = roundVolume41.getLength();
        roundVolume41.setLength((double) 'a');
        roundVolume41.setLength((double) (short) 0);
        logic.RoundVolume roundVolume51 = null; // flaky: roundVolumeList23.set((int) (short) 1, roundVolume41);
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        logic.YourWood yourWood68 = new logic.YourWood();
// flaky:         yourWood68.addWood((double) 1L, (int) (byte) 100);
        yourWood68.lengthFirstSortWood();
        yourWood68.diameterFirstSortWood();
        yourWood68.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList75 = yourWood68.getWood();
        logic.YourWood yourWood76 = new logic.YourWood();
// flaky:         yourWood76.addWood((double) 1L, (int) (byte) 100);
        yourWood76.lengthFirstSortWood();
        boolean boolean81 = roundVolumeList75.contains((java.lang.Object) yourWood76);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor82 = roundVolumeList75.iterator();
        boolean boolean83 = roundVolumeList59.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList75);
        java.lang.Object[] objArray84 = roundVolumeList75.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream85 = roundVolumeList75.parallelStream();
        boolean boolean86 = roundVolumeList23.remove((java.lang.Object) roundVolumeList75);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream87 = roundVolumeList23.stream();
        logic.RoundVolume roundVolume88 = new logic.RoundVolume();
        roundVolume88.setVolume((double) 0);
        double double91 = roundVolume88.getVolume();
        java.lang.String str92 = roundVolume88.toString();
        double double93 = roundVolume88.getLength();
        boolean boolean94 = roundVolumeList23.remove((java.lang.Object) double93);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str45, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
// flaky:         org.junit.Assert.assertNotNull(roundVolume51);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertNotNull(roundVolumeList75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor82);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(roundVolumeStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream87);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str92, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test722");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        double double6 = roundVolume3.getLength();
        java.lang.String str7 = roundVolume3.toString();
        roundVolume3.setDiameter((int) (short) 0);
        roundVolume3.setVolume((double) (-1L));
        int int12 = roundVolume3.getDiameter();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=-1.0)" + "'", str7, "RoundVolume(length=0.0, diameter=0, volume=-1.0)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test723");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setVolume(10.0d);
        roundVolume0.setVolume(100.0d);
        double double12 = roundVolume0.getVolume();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test724");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume(35.0d, (int) (short) 100, 10.0d);
        double double4 = roundVolume3.getLength();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
    }

    @Test
    public void test725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test725");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        logic.RoundVolume roundVolume6 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume6.setVolume((double) 10);
        java.lang.String str9 = roundVolume6.toString();
        logic.RoundVolume roundVolume10 = new logic.RoundVolume();
        roundVolume10.setVolume((double) 0);
        double double13 = roundVolume10.getVolume();
        java.lang.String str14 = roundVolume10.toString();
        double double15 = roundVolume10.getLength();
        roundVolume10.setLength((double) 'a');
        java.lang.String str18 = roundVolume10.toString();
        logic.RoundVolume roundVolume22 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume23 = new logic.RoundVolume();
        roundVolume23.setVolume((double) 0);
        double double26 = roundVolume23.getVolume();
        java.lang.String str27 = roundVolume23.toString();
        double double28 = roundVolume23.getLength();
        logic.RoundVolume roundVolume32 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume32.setVolume((double) 10);
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str39 = roundVolume38.toString();
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        logic.RoundVolume roundVolume43 = new logic.RoundVolume();
        roundVolume43.setVolume((double) 0);
        double double46 = roundVolume43.getVolume();
        roundVolume43.setLength((double) 10L);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        java.lang.String str53 = roundVolume49.toString();
        boolean boolean54 = roundVolume43.equals((java.lang.Object) str53);
        logic.RoundVolume roundVolume58 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume58.setVolume((double) 10);
        java.lang.String str61 = roundVolume58.toString();
        logic.RoundVolume[] roundVolumeArray62 = new logic.RoundVolume[] { roundVolume6, roundVolume10, roundVolume22, roundVolume23, roundVolume32, roundVolume38, roundVolume40, roundVolume43, roundVolume58 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList63 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList63, roundVolumeArray62);
        logic.YourWood yourWood65 = new logic.YourWood();
// flaky:         yourWood65.addWood((double) 1L, (int) (byte) 100);
        yourWood65.lengthFirstSortWood();
        yourWood65.diameterFirstSortWood();
        yourWood65.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList72 = yourWood65.getWood();
        logic.YourWood yourWood73 = new logic.YourWood();
// flaky:         yourWood73.addWood((double) 1L, (int) (byte) 100);
        yourWood73.lengthFirstSortWood();
        boolean boolean78 = roundVolumeList72.contains((java.lang.Object) yourWood73);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor79 = roundVolumeList72.iterator();
        boolean boolean80 = roundVolumeList63.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList72);
        boolean boolean81 = roundVolume0.equals((java.lang.Object) roundVolumeList63);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume83 = roundVolumeList63.remove((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str9, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str14, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str18, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str27, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str39, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str53, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str61, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(roundVolumeList72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test726");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator14 = roundVolumeList7.spliterator();
        java.lang.Object obj15 = null;
        boolean boolean16 = roundVolumeList7.remove(obj15);
        Main main17 = new Main();
        main17.init();
        javafx.application.Application.Parameters parameters19 = main17.getParameters();
        javafx.application.HostServices hostServices20 = main17.getHostServices();
        javafx.application.Application.Parameters parameters21 = main17.getParameters();
        javafx.application.HostServices hostServices22 = main17.getHostServices();
        boolean boolean23 = roundVolumeList7.contains((java.lang.Object) main17);
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        yourWood24.diameterFirstSortWood();
        yourWood24.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList31 = yourWood24.getWood();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        boolean boolean37 = roundVolumeList31.contains((java.lang.Object) yourWood32);
        int int38 = roundVolumeList31.size();
        logic.RoundVolume roundVolume42 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double43 = roundVolume42.getLength();
        int int44 = roundVolume42.getDiameter();
        double double45 = roundVolume42.getLength();
        int int46 = roundVolume42.getDiameter();
        boolean boolean47 = roundVolumeList31.contains((java.lang.Object) int46);
        boolean boolean48 = roundVolumeList7.equals((java.lang.Object) boolean47);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(parameters19);
        org.junit.Assert.assertNotNull(hostServices20);
        org.junit.Assert.assertNull(parameters21);
        org.junit.Assert.assertNotNull(hostServices22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(roundVolumeList31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test727");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream14 = roundVolumeList7.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream14);
    }

    @Test
    public void test728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test728");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolumeList3.remove(obj4);
        java.lang.Object[] objArray6 = roundVolumeList3.toArray();
        logic.YourWood yourWood7 = new logic.YourWood();
// flaky:         yourWood7.addWood((double) 1L, (int) (byte) 100);
        yourWood7.lengthFirstSortWood();
        yourWood7.diameterFirstSortWood();
        yourWood7.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList14 = yourWood7.getWood();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        boolean boolean20 = roundVolumeList14.contains((java.lang.Object) yourWood15);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor21 = roundVolumeList14.iterator();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        yourWood23.diameterFirstSortWood();
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList30 = yourWood23.getWood();
        logic.YourWood yourWood31 = new logic.YourWood();
// flaky:         yourWood31.addWood((double) 1L, (int) (byte) 100);
        yourWood31.lengthFirstSortWood();
        boolean boolean36 = roundVolumeList30.contains((java.lang.Object) yourWood31);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor37 = roundVolumeList30.iterator();
        boolean boolean38 = roundVolumeList14.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList30);
        java.lang.Object[] objArray39 = roundVolumeList30.toArray();
        int int40 = roundVolumeList30.size();
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        yourWood41.diameterFirstSortWood();
        yourWood41.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList48 = yourWood41.getWood();
        logic.YourWood yourWood49 = new logic.YourWood();
// flaky:         yourWood49.addWood((double) 1L, (int) (byte) 100);
        yourWood49.lengthFirstSortWood();
        boolean boolean54 = roundVolumeList48.contains((java.lang.Object) yourWood49);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor55 = roundVolumeList48.iterator();
        logic.YourWood yourWood57 = new logic.YourWood();
// flaky:         yourWood57.addWood((double) 1L, (int) (byte) 100);
        yourWood57.lengthFirstSortWood();
        yourWood57.diameterFirstSortWood();
        yourWood57.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = yourWood57.getWood();
        logic.YourWood yourWood65 = new logic.YourWood();
// flaky:         yourWood65.addWood((double) 1L, (int) (byte) 100);
        yourWood65.lengthFirstSortWood();
        boolean boolean70 = roundVolumeList64.contains((java.lang.Object) yourWood65);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor71 = roundVolumeList64.iterator();
        boolean boolean72 = roundVolumeList48.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList64);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor73 = roundVolumeList64.listIterator();
        logic.RoundVolume roundVolume74 = new logic.RoundVolume();
        roundVolume74.setVolume((double) 0);
        double double77 = roundVolume74.getVolume();
        roundVolume74.setLength((double) (-1L));
        boolean boolean80 = roundVolumeList64.add(roundVolume74);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor81 = roundVolumeList64.iterator();
        boolean boolean82 = roundVolumeList30.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream83 = roundVolumeList64.stream();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream84 = roundVolumeList64.stream();
        boolean boolean85 = roundVolumeList3.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64);
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(roundVolumeList14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor21);
        org.junit.Assert.assertNotNull(roundVolumeList30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor37);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor55);
        org.junit.Assert.assertNotNull(roundVolumeList64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor71);
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor73);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream83);
        org.junit.Assert.assertNotNull(roundVolumeStream84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test729");
        Main main0 = new Main();
        main0.init();
        main0.stop();
        main0.init();
    }

    @Test
    public void test730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test730");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream4 = roundVolumeList3.stream();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        boolean boolean18 = roundVolumeList12.contains((java.lang.Object) yourWood13);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList12.iterator();
        logic.YourWood yourWood21 = new logic.YourWood();
// flaky:         yourWood21.addWood((double) 1L, (int) (byte) 100);
        yourWood21.lengthFirstSortWood();
        yourWood21.diameterFirstSortWood();
        yourWood21.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList28 = yourWood21.getWood();
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        boolean boolean34 = roundVolumeList28.contains((java.lang.Object) yourWood29);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList28.iterator();
        boolean boolean36 = roundVolumeList12.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList28);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor38 = null; // flaky: roundVolumeList28.listIterator((int) (short) 1);
        boolean boolean39 = roundVolumeList3.remove((java.lang.Object) roundVolumeList28);
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        yourWood40.diameterFirstSortWood();
        yourWood40.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList47 = yourWood40.getWood();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        boolean boolean53 = roundVolumeList47.contains((java.lang.Object) yourWood48);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor54 = roundVolumeList47.iterator();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        yourWood56.diameterFirstSortWood();
        yourWood56.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList63 = yourWood56.getWood();
        logic.YourWood yourWood64 = new logic.YourWood();
// flaky:         yourWood64.addWood((double) 1L, (int) (byte) 100);
        yourWood64.lengthFirstSortWood();
        boolean boolean69 = roundVolumeList63.contains((java.lang.Object) yourWood64);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor70 = roundVolumeList63.iterator();
        boolean boolean71 = roundVolumeList47.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList63);
        boolean boolean72 = roundVolumeList63.isEmpty();
        java.lang.Object[] objArray73 = roundVolumeList63.toArray();
        int int74 = roundVolumeList3.indexOf((java.lang.Object) roundVolumeList63);
        boolean boolean75 = roundVolumeList3.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertNotNull(roundVolumeStream4);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor19);
        org.junit.Assert.assertNotNull(roundVolumeList28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeList47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor54);
        org.junit.Assert.assertNotNull(roundVolumeList63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor70);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test731");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream3 = roundVolumeList2.parallelStream();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume7.setVolume((double) 10);
        java.lang.String str10 = roundVolume7.toString();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume();
        roundVolume11.setVolume((double) 0);
        double double14 = roundVolume11.getVolume();
        java.lang.String str15 = roundVolume11.toString();
        double double16 = roundVolume11.getLength();
        roundVolume11.setLength((double) 'a');
        java.lang.String str19 = roundVolume11.toString();
        logic.RoundVolume roundVolume23 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        double double29 = roundVolume24.getLength();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume33.setVolume((double) 10);
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str40 = roundVolume39.toString();
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume59.setVolume((double) 10);
        java.lang.String str62 = roundVolume59.toString();
        logic.RoundVolume[] roundVolumeArray63 = new logic.RoundVolume[] { roundVolume7, roundVolume11, roundVolume23, roundVolume24, roundVolume33, roundVolume39, roundVolume41, roundVolume44, roundVolume59 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64, roundVolumeArray63);
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        yourWood66.diameterFirstSortWood();
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.YourWood yourWood74 = new logic.YourWood();
// flaky:         yourWood74.addWood((double) 1L, (int) (byte) 100);
        yourWood74.lengthFirstSortWood();
        boolean boolean79 = roundVolumeList73.contains((java.lang.Object) yourWood74);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList73.iterator();
        boolean boolean81 = roundVolumeList64.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        int int82 = roundVolumeList73.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator83 = roundVolumeList73.spliterator();
        int int84 = roundVolumeList2.lastIndexOf((java.lang.Object) roundVolumeList73);
        Main main85 = new Main();
        main85.init();
        javafx.application.HostServices hostServices87 = main85.getHostServices();
        boolean boolean88 = roundVolumeList73.remove((java.lang.Object) hostServices87);
        logic.RoundVolume roundVolume90 = null; // flaky: roundVolumeList73.get(0);
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeStream3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str10, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str40, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str62, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(hostServices87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertNotNull(roundVolume90);
    }

    @Test
    public void test732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test732");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList7.iterator();
        logic.RoundVolume roundVolume36 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double37 = roundVolume36.getLength();
        boolean boolean38 = roundVolumeList7.add(roundVolume36);
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor53 = roundVolumeList46.iterator();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        yourWood55.diameterFirstSortWood();
        yourWood55.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList62 = yourWood55.getWood();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        boolean boolean68 = roundVolumeList62.contains((java.lang.Object) yourWood63);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList62.iterator();
        boolean boolean70 = roundVolumeList46.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        logic.RoundVolume roundVolume75 = new logic.RoundVolume(35.0d, (int) (short) 100, 10.0d);
// flaky:         roundVolumeList62.add(1, roundVolume75);
        boolean boolean77 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator78 = roundVolumeList62.spliterator();
        logic.RoundVolume roundVolume79 = new logic.RoundVolume();
        roundVolume79.setVolume((double) 0);
        double double82 = roundVolume79.getVolume();
        java.lang.String str83 = roundVolume79.toString();
        double double84 = roundVolume79.getLength();
        java.lang.String str85 = roundVolume79.toString();
        int int86 = roundVolume79.getDiameter();
        roundVolume79.setLength((double) 0.0f);
        int int89 = roundVolumeList62.indexOf((java.lang.Object) 0.0f);
        logic.RoundVolume roundVolume91 = null; // flaky: roundVolumeList62.get(0);
        boolean boolean92 = roundVolumeList62.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor53);
        org.junit.Assert.assertNotNull(roundVolumeList62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator78);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str83, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str85, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
// flaky:         org.junit.Assert.assertNotNull(roundVolume91);
// flaky:         org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test733");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        java.util.List<logic.RoundVolume> roundVolumeList10 = null; // flaky: roundVolumeList7.subList(1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList13 = null; // flaky: roundVolumeList10.subList(1, (int) (byte) 10);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeList10);
    }

    @Test
    public void test734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test734");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList7.equals((java.lang.Object) roundVolumeList39);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        java.lang.String str53 = roundVolume49.toString();
        int int54 = roundVolume49.getDiameter();
        roundVolume49.setLength((double) '#');
        roundVolume49.setVolume(10.0d);
        double double59 = roundVolume49.getLength();
        boolean boolean60 = roundVolumeList39.add(roundVolume49);
        roundVolumeList39.clear();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str53, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 35.0d + "'", double59 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test735");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        roundVolume0.setDiameter(100);
        roundVolume0.setLength((double) (-1));
        java.lang.String str7 = roundVolume0.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "RoundVolume(length=-1.0, diameter=100, volume=0.0)" + "'", str7, "RoundVolume(length=-1.0, diameter=100, volume=0.0)");
    }

    @Test
    public void test736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test736");
        Main main0 = new Main();
        main0.init();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.HostServices hostServices3 = main0.getHostServices();
        main0.init();
        java.lang.Class<?> wildcardClass5 = main0.getClass();
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNotNull(hostServices3);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test737");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList7.equals((java.lang.Object) roundVolumeList39);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        java.lang.String str53 = roundVolume49.toString();
        int int54 = roundVolume49.getDiameter();
        roundVolume49.setLength((double) '#');
        roundVolume49.setVolume(10.0d);
        double double59 = roundVolume49.getLength();
        boolean boolean60 = roundVolumeList39.add(roundVolume49);
        logic.RoundVolume roundVolume61 = new logic.RoundVolume();
        roundVolume61.setVolume((double) 0);
        double double64 = roundVolume61.getVolume();
        java.lang.String str65 = roundVolume61.toString();
        double double66 = roundVolume61.getLength();
        roundVolume61.setLength((double) 'a');
        double double69 = roundVolume61.getLength();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        yourWood70.diameterFirstSortWood();
        yourWood70.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList77 = yourWood70.getWood();
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        boolean boolean83 = roundVolumeList77.contains((java.lang.Object) yourWood78);
        yourWood78.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood78.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor86 = roundVolumeList85.listIterator();
        boolean boolean87 = roundVolume61.equals((java.lang.Object) roundVolumeList85);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor88 = roundVolumeList85.iterator();
        boolean boolean89 = roundVolume49.equals((java.lang.Object) roundVolumeList85);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList92 = null; // flaky: roundVolumeList85.subList(10, (int) (short) 1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str53, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 35.0d + "'", double59 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str65, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 97.0d + "'", double69 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertNotNull(roundVolumeItor86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test738");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolumeList3.remove(obj4);
        java.lang.Object[] objArray6 = roundVolumeList3.toArray();
        logic.RoundVolume roundVolume10 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume10.setVolume((double) 10);
        java.lang.String str13 = roundVolume10.toString();
        logic.RoundVolume roundVolume14 = new logic.RoundVolume();
        roundVolume14.setVolume((double) 0);
        double double17 = roundVolume14.getVolume();
        java.lang.String str18 = roundVolume14.toString();
        double double19 = roundVolume14.getLength();
        roundVolume14.setLength((double) 'a');
        java.lang.String str22 = roundVolume14.toString();
        logic.RoundVolume roundVolume26 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume27 = new logic.RoundVolume();
        roundVolume27.setVolume((double) 0);
        double double30 = roundVolume27.getVolume();
        java.lang.String str31 = roundVolume27.toString();
        double double32 = roundVolume27.getLength();
        logic.RoundVolume roundVolume36 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume36.setVolume((double) 10);
        logic.RoundVolume roundVolume42 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str43 = roundVolume42.toString();
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        logic.RoundVolume roundVolume47 = new logic.RoundVolume();
        roundVolume47.setVolume((double) 0);
        double double50 = roundVolume47.getVolume();
        roundVolume47.setLength((double) 10L);
        logic.RoundVolume roundVolume53 = new logic.RoundVolume();
        roundVolume53.setVolume((double) 0);
        double double56 = roundVolume53.getVolume();
        java.lang.String str57 = roundVolume53.toString();
        boolean boolean58 = roundVolume47.equals((java.lang.Object) str57);
        logic.RoundVolume roundVolume62 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume62.setVolume((double) 10);
        java.lang.String str65 = roundVolume62.toString();
        logic.RoundVolume[] roundVolumeArray66 = new logic.RoundVolume[] { roundVolume10, roundVolume14, roundVolume26, roundVolume27, roundVolume36, roundVolume42, roundVolume44, roundVolume47, roundVolume62 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList67 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList67, roundVolumeArray66);
        logic.YourWood yourWood69 = new logic.YourWood();
// flaky:         yourWood69.addWood((double) 1L, (int) (byte) 100);
        yourWood69.lengthFirstSortWood();
        yourWood69.diameterFirstSortWood();
        yourWood69.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList76 = yourWood69.getWood();
        logic.YourWood yourWood77 = new logic.YourWood();
// flaky:         yourWood77.addWood((double) 1L, (int) (byte) 100);
        yourWood77.lengthFirstSortWood();
        boolean boolean82 = roundVolumeList76.contains((java.lang.Object) yourWood77);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor83 = roundVolumeList76.iterator();
        boolean boolean84 = roundVolumeList67.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList76);
        int int86 = roundVolumeList67.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator87 = roundVolumeList67.spliterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream88 = roundVolumeList67.stream();
        boolean boolean89 = roundVolumeList3.contains((java.lang.Object) roundVolumeList67);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator90 = roundVolumeList67.spliterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream91 = roundVolumeList67.parallelStream();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str13, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str18, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str22, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str31, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str43, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str57, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str65, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(roundVolumeList76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeSpliterator87);
        org.junit.Assert.assertNotNull(roundVolumeStream88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator90);
        org.junit.Assert.assertNotNull(roundVolumeStream91);
    }

    @Test
    public void test739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test739");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.lengthFirstSortWood();
        yourWood0.lengthFirstSortWood();
        org.junit.Assert.assertNotNull(roundVolumeList7);
    }

    @Test
    public void test740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test740");
        Main main0 = new Main();
        main0.init();
        main0.stop();
        javafx.application.HostServices hostServices3 = main0.getHostServices();
        javafx.application.HostServices hostServices4 = main0.getHostServices();
        java.lang.Class<?> wildcardClass5 = hostServices4.getClass();
        org.junit.Assert.assertNotNull(hostServices3);
        org.junit.Assert.assertNotNull(hostServices4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test741");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream79 = roundVolumeList69.parallelStream();
        logic.RoundVolume roundVolume80 = new logic.RoundVolume();
        roundVolume80.setVolume((double) 0);
        double double83 = roundVolume80.getVolume();
        java.lang.String str84 = roundVolume80.toString();
        double double85 = roundVolume80.getLength();
        java.lang.String str86 = roundVolume80.toString();
        double double87 = roundVolume80.getLength();
        roundVolume80.setDiameter((int) (short) 1);
        boolean boolean90 = roundVolumeList69.equals((java.lang.Object) (short) 1);
        boolean boolean91 = roundVolumeList69.isEmpty();
        java.util.Collection<logic.RoundVolume> roundVolumeCollection92 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = roundVolumeList69.removeAll(roundVolumeCollection92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertNotNull(roundVolumeStream79);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str84, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str86, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test742");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList7.iterator();
        logic.RoundVolume roundVolume36 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double37 = roundVolume36.getLength();
        boolean boolean38 = roundVolumeList7.add(roundVolume36);
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor53 = roundVolumeList46.iterator();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        yourWood55.diameterFirstSortWood();
        yourWood55.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList62 = yourWood55.getWood();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        boolean boolean68 = roundVolumeList62.contains((java.lang.Object) yourWood63);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList62.iterator();
        boolean boolean70 = roundVolumeList46.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        logic.RoundVolume roundVolume75 = new logic.RoundVolume(35.0d, (int) (short) 100, 10.0d);
// flaky:         roundVolumeList62.add(1, roundVolume75);
        boolean boolean77 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream78 = roundVolumeList7.parallelStream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor53);
        org.junit.Assert.assertNotNull(roundVolumeList62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream78);
    }

    @Test
    public void test743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test743");
        Main main0 = new Main();
        javafx.application.Application.Parameters parameters1 = main0.getParameters();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.HostServices hostServices3 = main0.getHostServices();
        org.junit.Assert.assertNull(parameters1);
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNotNull(hostServices3);
    }

    @Test
    public void test744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test744");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList17 = yourWood8.getWood();
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        int int32 = roundVolumeList25.size();
        logic.YourWood yourWood33 = new logic.YourWood();
// flaky:         yourWood33.addWood((double) 1L, (int) (byte) 100);
        yourWood33.lengthFirstSortWood();
        yourWood33.diameterFirstSortWood();
        yourWood33.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList40 = yourWood33.getWood();
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        boolean boolean46 = roundVolumeList40.contains((java.lang.Object) yourWood41);
        int int47 = roundVolumeList40.size();
        logic.RoundVolume roundVolume51 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double52 = roundVolume51.getLength();
        int int53 = roundVolume51.getDiameter();
        double double54 = roundVolume51.getLength();
        int int55 = roundVolume51.getDiameter();
        boolean boolean56 = roundVolumeList40.contains((java.lang.Object) int55);
        int int57 = roundVolumeList25.indexOf((java.lang.Object) boolean56);
        logic.RoundVolume roundVolume61 = new logic.RoundVolume((double) 52, 2, 0.0d);
        boolean boolean62 = roundVolumeList25.equals((java.lang.Object) 52);
        boolean boolean63 = roundVolumeList17.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList25);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test745");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        Main main15 = new Main();
        main15.init();
        main15.init();
        javafx.application.Application.Parameters parameters18 = main15.getParameters();
        main15.stop();
        boolean boolean20 = roundVolumeList7.contains((java.lang.Object) main15);
        main15.stop();
        main15.init();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(parameters18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test746");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream4 = roundVolumeList3.stream();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        boolean boolean18 = roundVolumeList12.contains((java.lang.Object) yourWood13);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList12.iterator();
        logic.YourWood yourWood21 = new logic.YourWood();
// flaky:         yourWood21.addWood((double) 1L, (int) (byte) 100);
        yourWood21.lengthFirstSortWood();
        yourWood21.diameterFirstSortWood();
        yourWood21.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList28 = yourWood21.getWood();
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        boolean boolean34 = roundVolumeList28.contains((java.lang.Object) yourWood29);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList28.iterator();
        boolean boolean36 = roundVolumeList12.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList28);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor38 = null; // flaky: roundVolumeList28.listIterator((int) (short) 1);
        boolean boolean39 = roundVolumeList3.remove((java.lang.Object) roundVolumeList28);
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        yourWood40.diameterFirstSortWood();
        yourWood40.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList47 = yourWood40.getWood();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        boolean boolean53 = roundVolumeList47.contains((java.lang.Object) yourWood48);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor54 = roundVolumeList47.iterator();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        yourWood56.diameterFirstSortWood();
        yourWood56.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList63 = yourWood56.getWood();
        logic.YourWood yourWood64 = new logic.YourWood();
// flaky:         yourWood64.addWood((double) 1L, (int) (byte) 100);
        yourWood64.lengthFirstSortWood();
        boolean boolean69 = roundVolumeList63.contains((java.lang.Object) yourWood64);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor70 = roundVolumeList63.iterator();
        boolean boolean71 = roundVolumeList47.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList63);
        boolean boolean72 = roundVolumeList63.isEmpty();
        java.lang.Object[] objArray73 = roundVolumeList63.toArray();
        int int74 = roundVolumeList3.indexOf((java.lang.Object) roundVolumeList63);
        logic.RoundVolume roundVolume78 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str79 = roundVolume78.toString();
        double double80 = roundVolume78.getLength();
        int int81 = roundVolume78.getDiameter();
        boolean boolean82 = roundVolumeList63.contains((java.lang.Object) roundVolume78);
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertNotNull(roundVolumeStream4);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor19);
        org.junit.Assert.assertNotNull(roundVolumeList28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeList47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor54);
        org.junit.Assert.assertNotNull(roundVolumeList63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor70);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str79, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 10.0d + "'", double80 == 10.0d);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test747");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood16.getWood();
        int int22 = roundVolumeList7.lastIndexOf((java.lang.Object) roundVolumeList21);
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        yourWood23.diameterFirstSortWood();
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList30 = yourWood23.getWood();
        logic.YourWood yourWood31 = new logic.YourWood();
// flaky:         yourWood31.addWood((double) 1L, (int) (byte) 100);
        yourWood31.lengthFirstSortWood();
        boolean boolean36 = roundVolumeList30.contains((java.lang.Object) yourWood31);
        yourWood31.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList38 = yourWood31.getWood();
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        roundVolume40.setLength((double) 10L);
        boolean boolean55 = roundVolume40.equals((java.lang.Object) "CASPIAN");
        roundVolumeList38.add(0, roundVolume40);
        logic.RoundVolume roundVolume60 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean61 = roundVolumeList38.remove((java.lang.Object) (byte) 1);
        boolean boolean62 = roundVolumeList21.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList38);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator63 = roundVolumeList38.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(roundVolumeList38);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator63);
    }

    @Test
    public void test748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test748");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
// flaky:         yourWood0.addWood((double) 1L, 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.lengthFirstSortWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood0.getWood();
        org.junit.Assert.assertNotNull(roundVolumeList12);
    }

    @Test
    public void test749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test749");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList39.isEmpty();
        boolean boolean49 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        int int64 = roundVolumeList57.size();
        boolean boolean65 = roundVolumeList39.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator66 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList39.replaceAll(roundVolumeUnaryOperator66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test750");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        boolean boolean30 = roundVolumeList24.contains((java.lang.Object) yourWood25);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor31 = roundVolumeList24.iterator();
        logic.YourWood yourWood33 = new logic.YourWood();
// flaky:         yourWood33.addWood((double) 1L, (int) (byte) 100);
        yourWood33.lengthFirstSortWood();
        yourWood33.diameterFirstSortWood();
        yourWood33.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList40 = yourWood33.getWood();
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        boolean boolean46 = roundVolumeList40.contains((java.lang.Object) yourWood41);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor47 = roundVolumeList40.iterator();
        boolean boolean48 = roundVolumeList24.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList40);
        java.lang.Object obj49 = null;
        boolean boolean50 = roundVolumeList24.remove(obj49);
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        logic.YourWood yourWood67 = new logic.YourWood();
// flaky:         yourWood67.addWood((double) 1L, (int) (byte) 100);
        yourWood67.lengthFirstSortWood();
        yourWood67.diameterFirstSortWood();
        yourWood67.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList74 = yourWood67.getWood();
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        boolean boolean80 = roundVolumeList74.contains((java.lang.Object) yourWood75);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor81 = roundVolumeList74.iterator();
        boolean boolean82 = roundVolumeList58.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        java.lang.Object[] objArray83 = roundVolumeList74.toArray();
        java.lang.Object[] objArray84 = roundVolumeList74.toArray();
        boolean boolean85 = roundVolumeList24.equals((java.lang.Object) roundVolumeList74);
        java.lang.Object obj86 = null;
        boolean boolean87 = roundVolumeList74.contains(obj86);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor88 = roundVolumeList74.iterator();
        boolean boolean89 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        java.lang.Object[] objArray90 = roundVolumeList7.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor92 = roundVolumeList7.listIterator(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor31);
        org.junit.Assert.assertNotNull(roundVolumeList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
        org.junit.Assert.assertNotNull(roundVolumeList74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor81);
// flaky:         org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor88);
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
    }

    @Test
    public void test751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test751");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        roundVolume3.setLength((double) 100L);
        int int6 = roundVolume3.getDiameter();
        roundVolume3.setLength(0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test752");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.RoundVolume roundVolume17 = null; // flaky: roundVolumeList7.remove(0);
        roundVolumeList7.clear();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
// flaky:         org.junit.Assert.assertNotNull(roundVolume17);
    }

    @Test
    public void test753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test753");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume7.setVolume((double) 10);
        java.lang.String str10 = roundVolume7.toString();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume();
        roundVolume11.setVolume((double) 0);
        double double14 = roundVolume11.getVolume();
        java.lang.String str15 = roundVolume11.toString();
        double double16 = roundVolume11.getLength();
        roundVolume11.setLength((double) 'a');
        java.lang.String str19 = roundVolume11.toString();
        logic.RoundVolume roundVolume23 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        double double29 = roundVolume24.getLength();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume33.setVolume((double) 10);
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str40 = roundVolume39.toString();
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume59.setVolume((double) 10);
        java.lang.String str62 = roundVolume59.toString();
        logic.RoundVolume[] roundVolumeArray63 = new logic.RoundVolume[] { roundVolume7, roundVolume11, roundVolume23, roundVolume24, roundVolume33, roundVolume39, roundVolume41, roundVolume44, roundVolume59 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64, roundVolumeArray63);
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        yourWood66.diameterFirstSortWood();
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.YourWood yourWood74 = new logic.YourWood();
// flaky:         yourWood74.addWood((double) 1L, (int) (byte) 100);
        yourWood74.lengthFirstSortWood();
        boolean boolean79 = roundVolumeList73.contains((java.lang.Object) yourWood74);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList73.iterator();
        boolean boolean81 = roundVolumeList64.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        int int82 = roundVolumeList73.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator83 = roundVolumeList73.spliterator();
        roundVolumeList73.clear();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream85 = roundVolumeList73.parallelStream();
        boolean boolean86 = roundVolumeList3.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator87 = roundVolumeList73.spliterator();
        logic.RoundVolume roundVolume88 = new logic.RoundVolume();
        roundVolume88.setVolume((double) 0);
        double double91 = roundVolume88.getVolume();
        java.lang.String str92 = roundVolume88.toString();
        roundVolume88.setVolume(35.0d);
        boolean boolean95 = roundVolumeList73.add(roundVolume88);
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str10, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str40, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str62, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator83);
        org.junit.Assert.assertNotNull(roundVolumeStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator87);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str92, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test754");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume15 = roundVolumeList7.remove((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test755");
        Main main0 = new Main();
        main0.init();
        main0.init();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        javafx.application.Application.Parameters parameters4 = main0.getParameters();
        javafx.application.HostServices hostServices5 = main0.getHostServices();
        main0.stop();
        org.junit.Assert.assertNull(parameters3);
        org.junit.Assert.assertNull(parameters4);
        org.junit.Assert.assertNotNull(hostServices5);
    }

    @Test
    public void test756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test756");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) (byte) 1, (int) '4', (double) (byte) -1);
        boolean boolean38 = roundVolumeList7.add(roundVolume37);
        int int39 = roundVolume37.getDiameter();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
    }

    @Test
    public void test757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test757");
        Main main0 = new Main();
        main0.stop();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.HostServices hostServices3 = main0.getHostServices();
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNotNull(hostServices3);
    }

    @Test
    public void test758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test758");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        boolean boolean80 = roundVolumeList69.contains((java.lang.Object) "");
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream81 = roundVolumeList69.stream();
        int int82 = roundVolumeList69.size();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor83 = roundVolumeList69.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream84 = roundVolumeList69.stream();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(roundVolumeItor83);
        org.junit.Assert.assertNotNull(roundVolumeStream84);
    }

    @Test
    public void test759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test759");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        roundVolume0.setLength((double) 10);
        int int7 = roundVolume0.getDiameter();
        logic.RoundVolume roundVolume8 = new logic.RoundVolume();
        roundVolume8.setVolume((double) 0);
        double double11 = roundVolume8.getVolume();
        java.lang.String str12 = roundVolume8.toString();
        double double13 = roundVolume8.getLength();
        roundVolume8.setLength((double) 'a');
        double double16 = roundVolume8.getLength();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        boolean boolean30 = roundVolumeList24.contains((java.lang.Object) yourWood25);
        yourWood25.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList32 = yourWood25.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor33 = roundVolumeList32.listIterator();
        boolean boolean34 = roundVolume8.equals((java.lang.Object) roundVolumeList32);
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        yourWood43.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList50 = yourWood43.getWood();
        logic.RoundVolume roundVolume52 = new logic.RoundVolume();
        roundVolume52.setVolume((double) 0);
        double double55 = roundVolume52.getVolume();
        roundVolume52.setLength((double) 10L);
        logic.RoundVolume roundVolume58 = new logic.RoundVolume();
        roundVolume58.setVolume((double) 0);
        double double61 = roundVolume58.getVolume();
        java.lang.String str62 = roundVolume58.toString();
        boolean boolean63 = roundVolume52.equals((java.lang.Object) str62);
        roundVolume52.setLength((double) 10L);
        boolean boolean67 = roundVolume52.equals((java.lang.Object) "CASPIAN");
        roundVolumeList50.add(0, roundVolume52);
        boolean boolean69 = roundVolumeList50.isEmpty();
        boolean boolean70 = roundVolumeList32.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList50);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor71 = roundVolumeList32.iterator();
        boolean boolean72 = roundVolume0.equals((java.lang.Object) roundVolumeItor71);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str12, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 97.0d + "'", double16 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeList32);
        org.junit.Assert.assertNotNull(roundVolumeItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeList50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str62, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test760");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
// flaky:         yourWood34.addWood((double) 1L, 100);
        int int42 = roundVolumeList23.lastIndexOf((java.lang.Object) 1L);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream43 = roundVolumeList23.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeStream43);
    }

    @Test
    public void test761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test761");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        roundVolumeList69.clear();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream81 = roundVolumeList69.parallelStream();
        roundVolumeList69.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList85 = roundVolumeList69.subList((int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
        org.junit.Assert.assertNotNull(roundVolumeStream81);
    }

    @Test
    public void test762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test762");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList6 = yourWood0.getWood();
        logic.YourWood yourWood7 = new logic.YourWood();
// flaky:         yourWood7.addWood((double) 1L, (int) (byte) 100);
        yourWood7.lengthFirstSortWood();
        yourWood7.diameterFirstSortWood();
        yourWood7.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList14 = yourWood7.getWood();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        boolean boolean20 = roundVolumeList14.contains((java.lang.Object) yourWood15);
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        yourWood23.diameterFirstSortWood();
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList30 = yourWood23.getWood();
        logic.YourWood yourWood31 = new logic.YourWood();
// flaky:         yourWood31.addWood((double) 1L, (int) (byte) 100);
        yourWood31.lengthFirstSortWood();
        boolean boolean36 = roundVolumeList30.contains((java.lang.Object) yourWood31);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor37 = roundVolumeList30.iterator();
        boolean boolean38 = roundVolumeList30.isEmpty();
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor53 = roundVolumeList46.iterator();
        boolean boolean54 = roundVolumeList30.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList46);
        int int55 = roundVolumeList22.indexOf((java.lang.Object) roundVolumeList46);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream56 = roundVolumeList22.stream();
        boolean boolean57 = roundVolumeList6.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList22);
        org.junit.Assert.assertNotNull(roundVolumeList6);
        org.junit.Assert.assertNotNull(roundVolumeList14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertNotNull(roundVolumeList30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor37);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor53);
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeStream56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test763");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        int int34 = roundVolumeList23.lastIndexOf((java.lang.Object) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList37 = roundVolumeList23.subList((int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test764");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume11.setVolume((double) 10);
        java.lang.String str14 = roundVolume11.toString();
        logic.RoundVolume roundVolume15 = new logic.RoundVolume();
        roundVolume15.setVolume((double) 0);
        double double18 = roundVolume15.getVolume();
        java.lang.String str19 = roundVolume15.toString();
        double double20 = roundVolume15.getLength();
        roundVolume15.setLength((double) 'a');
        java.lang.String str23 = roundVolume15.toString();
        logic.RoundVolume roundVolume27 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume28 = new logic.RoundVolume();
        roundVolume28.setVolume((double) 0);
        double double31 = roundVolume28.getVolume();
        java.lang.String str32 = roundVolume28.toString();
        double double33 = roundVolume28.getLength();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume37.setVolume((double) 10);
        logic.RoundVolume roundVolume43 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str44 = roundVolume43.toString();
        logic.RoundVolume roundVolume45 = new logic.RoundVolume();
        roundVolume45.setVolume((double) 0);
        logic.RoundVolume roundVolume48 = new logic.RoundVolume();
        roundVolume48.setVolume((double) 0);
        double double51 = roundVolume48.getVolume();
        roundVolume48.setLength((double) 10L);
        logic.RoundVolume roundVolume54 = new logic.RoundVolume();
        roundVolume54.setVolume((double) 0);
        double double57 = roundVolume54.getVolume();
        java.lang.String str58 = roundVolume54.toString();
        boolean boolean59 = roundVolume48.equals((java.lang.Object) str58);
        logic.RoundVolume roundVolume63 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume63.setVolume((double) 10);
        java.lang.String str66 = roundVolume63.toString();
        logic.RoundVolume[] roundVolumeArray67 = new logic.RoundVolume[] { roundVolume11, roundVolume15, roundVolume27, roundVolume28, roundVolume37, roundVolume43, roundVolume45, roundVolume48, roundVolume63 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList68 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList68, roundVolumeArray67);
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        yourWood70.diameterFirstSortWood();
        yourWood70.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList77 = yourWood70.getWood();
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        boolean boolean83 = roundVolumeList77.contains((java.lang.Object) yourWood78);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor84 = roundVolumeList77.iterator();
        boolean boolean85 = roundVolumeList68.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList77);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream86 = roundVolumeList68.parallelStream();
        boolean boolean87 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList68);
        roundVolumeList68.clear();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream89 = roundVolumeList68.parallelStream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str14, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str23, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str32, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str44, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str58, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str66, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(roundVolumeList77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream89);
    }

    @Test
    public void test765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test765");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean78 = roundVolumeList69.isEmpty();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        boolean boolean80 = roundVolumeList69.isEmpty();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream81 = roundVolumeList69.stream();
        Main main82 = new Main();
        main82.init();
        main82.init();
        javafx.application.Application.Parameters parameters85 = main82.getParameters();
        main82.stop();
        javafx.application.Application.Parameters parameters87 = main82.getParameters();
        main82.stop();
        boolean boolean89 = roundVolumeList69.remove((java.lang.Object) main82);
        roundVolumeList69.clear();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream81);
        org.junit.Assert.assertNull(parameters85);
        org.junit.Assert.assertNull(parameters87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test766");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolumeList3.remove(obj4);
        logic.RoundVolume roundVolume6 = new logic.RoundVolume();
        roundVolume6.setVolume((double) 0);
        double double9 = roundVolume6.getVolume();
        roundVolume6.setLength((double) 10L);
        logic.RoundVolume roundVolume12 = new logic.RoundVolume();
        roundVolume12.setVolume((double) 0);
        double double15 = roundVolume12.getVolume();
        java.lang.String str16 = roundVolume12.toString();
        boolean boolean17 = roundVolume6.equals((java.lang.Object) str16);
        roundVolume6.setLength((double) 10L);
        boolean boolean20 = roundVolumeList3.remove((java.lang.Object) roundVolume6);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor21 = roundVolumeList3.listIterator();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor22 = roundVolumeList3.listIterator();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList3.replaceAll(roundVolumeUnaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str16, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor21);
        org.junit.Assert.assertNotNull(roundVolumeItor22);
    }

    @Test
    public void test767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test767");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolume3.equals(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test768");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        logic.YourWood yourWood14 = new logic.YourWood();
// flaky:         yourWood14.addWood((double) 1L, (int) (byte) 100);
        yourWood14.lengthFirstSortWood();
        yourWood14.diameterFirstSortWood();
        yourWood14.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood14.getWood();
        logic.YourWood yourWood22 = new logic.YourWood();
// flaky:         yourWood22.addWood((double) 1L, (int) (byte) 100);
        yourWood22.lengthFirstSortWood();
        boolean boolean27 = roundVolumeList21.contains((java.lang.Object) yourWood22);
        boolean boolean28 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList21);
        logic.YourWood yourWood30 = new logic.YourWood();
// flaky:         yourWood30.addWood((double) 1L, (int) (byte) 100);
        yourWood30.lengthFirstSortWood();
        yourWood30.diameterFirstSortWood();
        yourWood30.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList37 = yourWood30.getWood();
        logic.YourWood yourWood38 = new logic.YourWood();
// flaky:         yourWood38.addWood((double) 1L, (int) (byte) 100);
        yourWood38.lengthFirstSortWood();
        boolean boolean43 = roundVolumeList37.contains((java.lang.Object) yourWood38);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor44 = roundVolumeList37.iterator();
        logic.YourWood yourWood46 = new logic.YourWood();
// flaky:         yourWood46.addWood((double) 1L, (int) (byte) 100);
        yourWood46.lengthFirstSortWood();
        yourWood46.diameterFirstSortWood();
        yourWood46.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList53 = yourWood46.getWood();
        logic.YourWood yourWood54 = new logic.YourWood();
// flaky:         yourWood54.addWood((double) 1L, (int) (byte) 100);
        yourWood54.lengthFirstSortWood();
        boolean boolean59 = roundVolumeList53.contains((java.lang.Object) yourWood54);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor60 = roundVolumeList53.iterator();
        boolean boolean61 = roundVolumeList37.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList53);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor62 = roundVolumeList53.listIterator();
        java.lang.Object[] objArray63 = roundVolumeList53.toArray();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        boolean boolean68 = roundVolumeList53.remove((java.lang.Object) (-1));
        java.util.Iterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList53.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = roundVolumeList21.addAll(52, (java.util.Collection<logic.RoundVolume>) roundVolumeList53);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(roundVolumeList37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor44);
        org.junit.Assert.assertNotNull(roundVolumeList53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor62);
        org.junit.Assert.assertNotNull(objArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
    }

    @Test
    public void test769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test769");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume(0.0d, (int) '4', 0.0d);
    }

    @Test
    public void test770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test770");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList39.isEmpty();
        java.lang.Object[] objArray49 = roundVolumeList39.toArray();
        boolean boolean50 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator51 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.replaceAll(roundVolumeUnaryOperator51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test771");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.lang.Object obj78 = null;
        boolean boolean79 = roundVolumeList69.remove(obj78);
        roundVolumeList69.clear();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test772");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        logic.YourWood yourWood14 = new logic.YourWood();
// flaky:         yourWood14.addWood((double) 1L, (int) (byte) 100);
        yourWood14.lengthFirstSortWood();
        yourWood14.diameterFirstSortWood();
        yourWood14.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood14.getWood();
        logic.YourWood yourWood22 = new logic.YourWood();
// flaky:         yourWood22.addWood((double) 1L, (int) (byte) 100);
        yourWood22.lengthFirstSortWood();
        boolean boolean27 = roundVolumeList21.contains((java.lang.Object) yourWood22);
        boolean boolean28 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList21);
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        yourWood29.diameterFirstSortWood();
        yourWood29.diameterFirstSortWood();
        yourWood29.lengthFirstSortWood();
        yourWood29.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList38 = yourWood29.getWood();
        int int39 = roundVolumeList21.lastIndexOf((java.lang.Object) yourWood29);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(roundVolumeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test773");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        roundVolume35.setVolume((double) 0);
        double double38 = roundVolume35.getVolume();
        java.lang.String str39 = roundVolume35.toString();
        int int40 = roundVolume35.getDiameter();
        roundVolume35.setLength((double) '#');
        roundVolume35.setVolume(10.0d);
        roundVolume35.setVolume(100.0d);
        boolean boolean47 = roundVolumeList23.add(roundVolume35);
        logic.RoundVolume roundVolume48 = new logic.RoundVolume();
        roundVolume48.setVolume((double) 0);
        double double51 = roundVolume48.getVolume();
        java.lang.String str52 = roundVolume48.toString();
        int int53 = roundVolume48.getDiameter();
        boolean boolean54 = roundVolume35.equals((java.lang.Object) int53);
        int int55 = roundVolume35.getDiameter();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str39, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str52, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test774");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList8 = yourWood0.getWood();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor9 = roundVolumeList8.iterator();
        logic.RoundVolume roundVolume10 = new logic.RoundVolume();
        roundVolume10.setVolume((double) 0);
        double double13 = roundVolume10.getLength();
        roundVolume10.setVolume(100.0d);
        boolean boolean16 = roundVolumeList8.add(roundVolume10);
        logic.YourWood yourWood17 = new logic.YourWood();
        yourWood17.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList19 = yourWood17.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList20 = yourWood17.getWood();
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = roundVolumeList20.remove(obj21);
        java.lang.Object[] objArray23 = roundVolumeList20.toArray();
        boolean boolean24 = roundVolumeList8.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList20);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator25 = roundVolumeList8.spliterator();
        logic.RoundVolume roundVolume27 = roundVolumeList8.get(0);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertNotNull(roundVolumeList8);
        org.junit.Assert.assertNotNull(roundVolumeItor9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(roundVolumeList19);
        org.junit.Assert.assertNotNull(roundVolumeList20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator25);
        org.junit.Assert.assertNotNull(roundVolume27);
    }

    @Test
    public void test775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test775");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream78 = roundVolumeList60.parallelStream();
        roundVolumeList60.clear();
        logic.RoundVolume[] roundVolumeArray80 = new logic.RoundVolume[] {};
        logic.RoundVolume[] roundVolumeArray81 = roundVolumeList60.toArray(roundVolumeArray80);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream78);
        org.junit.Assert.assertNotNull(roundVolumeArray80);
        org.junit.Assert.assertNotNull(roundVolumeArray81);
    }

    @Test
    public void test776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test776");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        int int29 = roundVolumeList22.size();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double34 = roundVolume33.getLength();
        int int35 = roundVolume33.getDiameter();
        double double36 = roundVolume33.getLength();
        int int37 = roundVolume33.getDiameter();
        boolean boolean38 = roundVolumeList22.contains((java.lang.Object) int37);
        int int39 = roundVolumeList7.indexOf((java.lang.Object) boolean38);
        boolean boolean40 = roundVolumeList7.isEmpty();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor41 = roundVolumeList7.listIterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream42 = roundVolumeList7.parallelStream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor41);
        org.junit.Assert.assertNotNull(roundVolumeStream42);
    }

    @Test
    public void test777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test777");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        yourWood24.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList31 = yourWood24.getWood();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList39.isEmpty();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        yourWood48.diameterFirstSortWood();
        yourWood48.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList55 = yourWood48.getWood();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        boolean boolean61 = roundVolumeList55.contains((java.lang.Object) yourWood56);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor62 = roundVolumeList55.iterator();
        boolean boolean63 = roundVolumeList39.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList55);
        int int64 = roundVolumeList31.indexOf((java.lang.Object) roundVolumeList55);
        boolean boolean65 = roundVolumeList15.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList55);
        roundVolumeList15.clear();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeList31);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeList55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor62);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test778");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getLength();
        roundVolume0.setVolume(100.0d);
        java.lang.String str6 = roundVolume0.toString();
        logic.YourWood yourWood7 = new logic.YourWood();
        yourWood7.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList9 = yourWood7.getWood();
        yourWood7.lengthFirstSortWood();
        yourWood7.lengthFirstSortWood();
        boolean boolean12 = roundVolume0.equals((java.lang.Object) yourWood7);
        java.util.ArrayList<logic.RoundVolume> roundVolumeList13 = yourWood7.getWood();
        boolean boolean14 = roundVolumeList13.isEmpty();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor29 = roundVolumeList22.iterator();
        logic.YourWood yourWood31 = new logic.YourWood();
// flaky:         yourWood31.addWood((double) 1L, (int) (byte) 100);
        yourWood31.lengthFirstSortWood();
        yourWood31.diameterFirstSortWood();
        yourWood31.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList38 = yourWood31.getWood();
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        boolean boolean44 = roundVolumeList38.contains((java.lang.Object) yourWood39);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor45 = roundVolumeList38.iterator();
        boolean boolean46 = roundVolumeList22.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList38);
        boolean boolean47 = roundVolumeList38.isEmpty();
        java.lang.Object[] objArray48 = roundVolumeList38.toArray();
        boolean boolean49 = roundVolumeList38.isEmpty();
        Main main50 = new Main();
        main50.init();
        javafx.application.Application.Parameters parameters52 = main50.getParameters();
        int int53 = roundVolumeList38.lastIndexOf((java.lang.Object) parameters52);
        int int54 = roundVolumeList13.indexOf((java.lang.Object) int53);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor55 = roundVolumeList13.listIterator();
        int int56 = roundVolumeList13.size();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str6, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
        org.junit.Assert.assertNotNull(roundVolumeList9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(roundVolumeList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor29);
        org.junit.Assert.assertNotNull(roundVolumeList38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor45);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(parameters52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeItor55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test779");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        double double44 = roundVolume41.getVolume();
        java.lang.String str45 = roundVolume41.toString();
        double double46 = roundVolume41.getLength();
        roundVolume41.setLength((double) 'a');
        roundVolume41.setLength((double) (short) 0);
        logic.RoundVolume roundVolume51 = null; // flaky: roundVolumeList23.set((int) (short) 1, roundVolume41);
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        logic.YourWood yourWood68 = new logic.YourWood();
// flaky:         yourWood68.addWood((double) 1L, (int) (byte) 100);
        yourWood68.lengthFirstSortWood();
        yourWood68.diameterFirstSortWood();
        yourWood68.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList75 = yourWood68.getWood();
        logic.YourWood yourWood76 = new logic.YourWood();
// flaky:         yourWood76.addWood((double) 1L, (int) (byte) 100);
        yourWood76.lengthFirstSortWood();
        boolean boolean81 = roundVolumeList75.contains((java.lang.Object) yourWood76);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor82 = roundVolumeList75.iterator();
        boolean boolean83 = roundVolumeList59.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList75);
        java.lang.Object[] objArray84 = roundVolumeList75.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream85 = roundVolumeList75.parallelStream();
        boolean boolean86 = roundVolumeList23.remove((java.lang.Object) roundVolumeList75);
        java.lang.Object[] objArray87 = roundVolumeList75.toArray();
        roundVolumeList75.clear();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str45, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
// flaky:         org.junit.Assert.assertNotNull(roundVolume51);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertNotNull(roundVolumeList75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor82);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(roundVolumeStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
    }

    @Test
    public void test780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test780");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        boolean boolean34 = roundVolumeList23.isEmpty();
        Main main35 = new Main();
        main35.init();
        javafx.application.Application.Parameters parameters37 = main35.getParameters();
        int int38 = roundVolumeList23.lastIndexOf((java.lang.Object) parameters37);
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList47 = yourWood39.getWood();
        boolean boolean48 = roundVolumeList23.contains((java.lang.Object) roundVolumeList47);
        logic.RoundVolume roundVolume53 = new logic.RoundVolume(100.0d, (int) (byte) -1, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList47.add((int) (short) 100, roundVolume53);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(parameters37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertNotNull(roundVolumeList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test781");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getLength();
        roundVolume0.setVolume(100.0d);
        java.lang.String str6 = roundVolume0.toString();
        logic.YourWood yourWood7 = new logic.YourWood();
        yourWood7.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList9 = yourWood7.getWood();
        yourWood7.lengthFirstSortWood();
        yourWood7.lengthFirstSortWood();
        boolean boolean12 = roundVolume0.equals((java.lang.Object) yourWood7);
        java.util.ArrayList<logic.RoundVolume> roundVolumeList13 = yourWood7.getWood();
        boolean boolean14 = roundVolumeList13.isEmpty();
        logic.RoundVolume roundVolume15 = new logic.RoundVolume();
        roundVolume15.setVolume((double) 0);
        double double18 = roundVolume15.getLength();
        double double19 = roundVolume15.getVolume();
        boolean boolean20 = roundVolumeList13.add(roundVolume15);
        double double21 = roundVolume15.getVolume();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str6, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
        org.junit.Assert.assertNotNull(roundVolumeList9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(roundVolumeList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test782");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (short) 0, 0, (double) (short) 10);
        logic.YourWood yourWood4 = new logic.YourWood();
// flaky:         yourWood4.addWood((double) 1L, (int) (byte) 100);
        yourWood4.lengthFirstSortWood();
        yourWood4.diameterFirstSortWood();
        yourWood4.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList11 = yourWood4.getWood();
        logic.YourWood yourWood12 = new logic.YourWood();
// flaky:         yourWood12.addWood((double) 1L, (int) (byte) 100);
        yourWood12.lengthFirstSortWood();
        boolean boolean17 = roundVolumeList11.contains((java.lang.Object) yourWood12);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor18 = roundVolumeList11.iterator();
        logic.YourWood yourWood20 = new logic.YourWood();
// flaky:         yourWood20.addWood((double) 1L, (int) (byte) 100);
        yourWood20.lengthFirstSortWood();
        yourWood20.diameterFirstSortWood();
        yourWood20.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList27 = yourWood20.getWood();
        logic.YourWood yourWood28 = new logic.YourWood();
// flaky:         yourWood28.addWood((double) 1L, (int) (byte) 100);
        yourWood28.lengthFirstSortWood();
        boolean boolean33 = roundVolumeList27.contains((java.lang.Object) yourWood28);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor34 = roundVolumeList27.iterator();
        boolean boolean35 = roundVolumeList11.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList27);
        java.lang.Object[] objArray36 = roundVolumeList27.toArray();
        Main main37 = new Main();
        main37.init();
        javafx.application.Application.Parameters parameters39 = main37.getParameters();
        javafx.application.HostServices hostServices40 = main37.getHostServices();
        boolean boolean41 = roundVolumeList27.equals((java.lang.Object) hostServices40);
        logic.YourWood yourWood42 = new logic.YourWood();
        yourWood42.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList44 = yourWood42.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList45 = yourWood42.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream46 = roundVolumeList45.stream();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        yourWood47.diameterFirstSortWood();
        yourWood47.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList54 = yourWood47.getWood();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        boolean boolean60 = roundVolumeList54.contains((java.lang.Object) yourWood55);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor61 = roundVolumeList54.iterator();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        yourWood63.diameterFirstSortWood();
        yourWood63.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList70 = yourWood63.getWood();
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        boolean boolean76 = roundVolumeList70.contains((java.lang.Object) yourWood71);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor77 = roundVolumeList70.iterator();
        boolean boolean78 = roundVolumeList54.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList70);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor80 = null; // flaky: roundVolumeList70.listIterator((int) (short) 1);
        boolean boolean81 = roundVolumeList45.remove((java.lang.Object) roundVolumeList70);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream82 = roundVolumeList45.parallelStream();
        boolean boolean83 = roundVolumeList27.remove((java.lang.Object) roundVolumeList45);
        boolean boolean84 = roundVolume3.equals((java.lang.Object) roundVolumeList27);
        org.junit.Assert.assertNotNull(roundVolumeList11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor18);
        org.junit.Assert.assertNotNull(roundVolumeList27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNull(parameters39);
        org.junit.Assert.assertNotNull(hostServices40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(roundVolumeList44);
        org.junit.Assert.assertNotNull(roundVolumeList45);
        org.junit.Assert.assertNotNull(roundVolumeStream46);
        org.junit.Assert.assertNotNull(roundVolumeList54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor61);
        org.junit.Assert.assertNotNull(roundVolumeList70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor77);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test783");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume(0.0d, (-1), 1.0d);
    }

    @Test
    public void test784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test784");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator80 = roundVolumeList60.spliterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream81 = roundVolumeList60.stream();
        roundVolumeList60.clear();
        logic.RoundVolume roundVolume87 = new logic.RoundVolume((double) 52, (int) (short) 100, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList60.add((int) (byte) 1, roundVolume87);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeSpliterator80);
        org.junit.Assert.assertNotNull(roundVolumeStream81);
    }

    @Test
    public void test785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test785");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        boolean boolean38 = roundVolumeList23.remove((java.lang.Object) (-1));
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor53 = roundVolumeList46.iterator();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        yourWood55.diameterFirstSortWood();
        yourWood55.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList62 = yourWood55.getWood();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        boolean boolean68 = roundVolumeList62.contains((java.lang.Object) yourWood63);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList62.iterator();
        boolean boolean70 = roundVolumeList46.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor71 = roundVolumeList46.iterator();
        logic.RoundVolume roundVolume75 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double76 = roundVolume75.getLength();
        boolean boolean77 = roundVolumeList46.add(roundVolume75);
        boolean boolean78 = roundVolumeList23.contains((java.lang.Object) boolean77);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream79 = roundVolumeList23.parallelStream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor53);
        org.junit.Assert.assertNotNull(roundVolumeList62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor71);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream79);
    }

    @Test
    public void test786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test786");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getLength();
        roundVolume0.setVolume(100.0d);
        int int6 = roundVolume0.getDiameter();
        java.lang.String str7 = roundVolume0.toString();
        roundVolume0.setLength((double) 0.0f);
        int int10 = roundVolume0.getDiameter();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str7, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test787");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        boolean boolean30 = roundVolumeList24.contains((java.lang.Object) yourWood25);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor31 = roundVolumeList24.iterator();
        logic.YourWood yourWood33 = new logic.YourWood();
// flaky:         yourWood33.addWood((double) 1L, (int) (byte) 100);
        yourWood33.lengthFirstSortWood();
        yourWood33.diameterFirstSortWood();
        yourWood33.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList40 = yourWood33.getWood();
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        boolean boolean46 = roundVolumeList40.contains((java.lang.Object) yourWood41);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor47 = roundVolumeList40.iterator();
        boolean boolean48 = roundVolumeList24.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList40);
        java.lang.Object obj49 = null;
        boolean boolean50 = roundVolumeList24.remove(obj49);
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        logic.YourWood yourWood67 = new logic.YourWood();
// flaky:         yourWood67.addWood((double) 1L, (int) (byte) 100);
        yourWood67.lengthFirstSortWood();
        yourWood67.diameterFirstSortWood();
        yourWood67.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList74 = yourWood67.getWood();
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        boolean boolean80 = roundVolumeList74.contains((java.lang.Object) yourWood75);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor81 = roundVolumeList74.iterator();
        boolean boolean82 = roundVolumeList58.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        java.lang.Object[] objArray83 = roundVolumeList74.toArray();
        java.lang.Object[] objArray84 = roundVolumeList74.toArray();
        boolean boolean85 = roundVolumeList24.equals((java.lang.Object) roundVolumeList74);
        java.lang.Object obj86 = null;
        boolean boolean87 = roundVolumeList74.contains(obj86);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor88 = roundVolumeList74.iterator();
        boolean boolean89 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        java.lang.Object[] objArray90 = roundVolumeList7.toArray();
        boolean boolean91 = roundVolumeList7.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor31);
        org.junit.Assert.assertNotNull(roundVolumeList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
        org.junit.Assert.assertNotNull(roundVolumeList74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor81);
// flaky:         org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor88);
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test788");
        Main main0 = new Main();
        main0.init();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.HostServices hostServices3 = main0.getHostServices();
        main0.init();
        javafx.application.HostServices hostServices5 = main0.getHostServices();
        main0.init();
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNotNull(hostServices3);
        org.junit.Assert.assertNotNull(hostServices5);
    }

    @Test
    public void test789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test789");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) (short) 0);
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList25.iterator();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        boolean boolean49 = roundVolumeList25.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList41.listIterator();
        java.lang.Object[] objArray51 = roundVolumeList41.toArray();
        roundVolumeList41.clear();
        boolean boolean53 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        logic.YourWood yourWood54 = new logic.YourWood();
// flaky:         yourWood54.addWood((double) 1L, (int) (byte) 100);
        yourWood54.lengthFirstSortWood();
        yourWood54.diameterFirstSortWood();
        yourWood54.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList61 = yourWood54.getWood();
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        boolean boolean67 = roundVolumeList61.contains((java.lang.Object) yourWood62);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor68 = roundVolumeList61.iterator();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        yourWood70.diameterFirstSortWood();
        yourWood70.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList77 = yourWood70.getWood();
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        boolean boolean83 = roundVolumeList77.contains((java.lang.Object) yourWood78);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor84 = roundVolumeList77.iterator();
        boolean boolean85 = roundVolumeList61.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList77);
        boolean boolean86 = roundVolumeList77.isEmpty();
        java.lang.Object[] objArray87 = roundVolumeList77.toArray();
        boolean boolean88 = roundVolumeList77.isEmpty();
        Main main89 = new Main();
        main89.init();
        javafx.application.Application.Parameters parameters91 = main89.getParameters();
        int int92 = roundVolumeList77.lastIndexOf((java.lang.Object) parameters91);
        boolean boolean93 = roundVolumeList41.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList77);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor95 = roundVolumeList77.listIterator((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertNotNull(objArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(roundVolumeList61);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor68);
        org.junit.Assert.assertNotNull(roundVolumeList77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor84);
// flaky:         org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(parameters91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test790");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        double double8 = roundVolume0.getLength();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList16 = yourWood9.getWood();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        boolean boolean22 = roundVolumeList16.contains((java.lang.Object) yourWood17);
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor25 = roundVolumeList24.listIterator();
        boolean boolean26 = roundVolume0.equals((java.lang.Object) roundVolumeList24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor27 = roundVolumeList24.iterator();
        logic.YourWood yourWood28 = new logic.YourWood();
// flaky:         yourWood28.addWood((double) 1L, (int) (byte) 100);
        yourWood28.lengthFirstSortWood();
        yourWood28.diameterFirstSortWood();
        yourWood28.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList35 = yourWood28.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList36 = yourWood28.getWood();
        boolean boolean37 = roundVolumeList24.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList36);
        Main main38 = new Main();
        main38.init();
        main38.init();
        javafx.application.Application.Parameters parameters41 = main38.getParameters();
        javafx.application.HostServices hostServices42 = main38.getHostServices();
        javafx.application.Application.Parameters parameters43 = main38.getParameters();
        javafx.application.Application.Parameters parameters44 = main38.getParameters();
        int int45 = roundVolumeList36.lastIndexOf((java.lang.Object) parameters44);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 97.0d + "'", double8 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertNotNull(roundVolumeItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor27);
        org.junit.Assert.assertNotNull(roundVolumeList35);
        org.junit.Assert.assertNotNull(roundVolumeList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(parameters41);
        org.junit.Assert.assertNotNull(hostServices42);
        org.junit.Assert.assertNull(parameters43);
        org.junit.Assert.assertNull(parameters44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test791");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolumeList3.remove(obj4);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator6 = roundVolumeList3.spliterator();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        int int15 = roundVolumeList3.lastIndexOf((java.lang.Object) roundVolume7);
        int int16 = roundVolumeList3.size();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test792");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        int int1 = roundVolume0.getDiameter();
        double double2 = roundVolume0.getVolume();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test793");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood16.getWood();
        int int22 = roundVolumeList7.lastIndexOf((java.lang.Object) roundVolumeList21);
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        yourWood23.diameterFirstSortWood();
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList30 = yourWood23.getWood();
        logic.YourWood yourWood31 = new logic.YourWood();
// flaky:         yourWood31.addWood((double) 1L, (int) (byte) 100);
        yourWood31.lengthFirstSortWood();
        boolean boolean36 = roundVolumeList30.contains((java.lang.Object) yourWood31);
        yourWood31.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList38 = yourWood31.getWood();
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        roundVolume40.setLength((double) 10L);
        boolean boolean55 = roundVolume40.equals((java.lang.Object) "CASPIAN");
        roundVolumeList38.add(0, roundVolume40);
        logic.RoundVolume roundVolume60 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean61 = roundVolumeList38.remove((java.lang.Object) (byte) 1);
        boolean boolean62 = roundVolumeList21.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList38);
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        yourWood63.diameterFirstSortWood();
        yourWood63.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList70 = yourWood63.getWood();
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        boolean boolean76 = roundVolumeList70.contains((java.lang.Object) yourWood71);
        boolean boolean77 = roundVolumeList70.isEmpty();
        boolean boolean78 = roundVolumeList38.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList70);
        logic.RoundVolume roundVolume80 = null; // flaky: roundVolumeList70.get(0);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(roundVolumeList38);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(roundVolumeList70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolume80);
    }

    @Test
    public void test794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test794");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        java.util.List<logic.RoundVolume> roundVolumeList82 = null; // flaky: roundVolumeList69.subList(0, (int) (short) 1);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator83 = null; // flaky: roundVolumeList82.spliterator();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeList82);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeSpliterator83);
    }

    @Test
    public void test795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test795");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getLength();
        roundVolume0.setLength(10.0d);
        int int6 = roundVolume0.getDiameter();
        roundVolume0.setDiameter((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test796");
        java.lang.String[] strArray5 = new java.lang.String[] { "RoundVolume(length=0.0, diameter=100, volume=-1.0)", "RoundVolume(length=-1.0, diameter=100, volume=-1.0)", "RoundVolume(length=-1.0, diameter=100, volume=-1.0)", "RoundVolume(length=-1.0, diameter=100, volume=0.0)", "RoundVolume(length=10.0, diameter=100, volume=10.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor70");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test797");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream31 = roundVolumeList23.stream();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        logic.RoundVolume roundVolume50 = null; // flaky: roundVolumeList15.remove(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream51 = roundVolumeList15.stream();
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        logic.YourWood yourWood67 = new logic.YourWood();
// flaky:         yourWood67.addWood((double) 1L, (int) (byte) 100);
        yourWood67.lengthFirstSortWood();
        yourWood67.diameterFirstSortWood();
        yourWood67.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList74 = yourWood67.getWood();
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        boolean boolean80 = roundVolumeList74.contains((java.lang.Object) yourWood75);
        yourWood75.diameterFirstSortWood();
        boolean boolean82 = roundVolumeList59.remove((java.lang.Object) yourWood75);
        logic.RoundVolume roundVolume86 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double87 = roundVolume86.getLength();
        int int88 = roundVolume86.getDiameter();
        roundVolume86.setLength(100.0d);
        boolean boolean91 = roundVolumeList59.add(roundVolume86);
        boolean boolean92 = roundVolumeList15.remove((java.lang.Object) roundVolume86);
        int int93 = roundVolumeList15.size();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeStream31);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertNotNull(roundVolume50);
        org.junit.Assert.assertNotNull(roundVolumeStream51);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertNotNull(roundVolumeList74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test798");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setVolume((double) (-1L));
        boolean boolean40 = roundVolumeList23.contains((java.lang.Object) (-1L));
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator41 = roundVolumeList23.spliterator();
        logic.RoundVolume roundVolume43 = new logic.RoundVolume();
        roundVolume43.setVolume((double) 0);
        double double46 = roundVolume43.getLength();
        roundVolume43.setVolume(100.0d);
        int int49 = roundVolume43.getDiameter();
        java.lang.String str50 = roundVolume43.toString();
        roundVolume43.setDiameter((int) (short) -1);
        logic.RoundVolume roundVolume53 = null; // flaky: roundVolumeList23.set((int) (short) 0, roundVolume43);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator41);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
// flaky:         org.junit.Assert.assertNotNull(roundVolume53);
    }

    @Test
    public void test799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test799");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setDiameter((int) 'a');
        roundVolume0.setLength((double) (byte) 1);
        logic.YourWood yourWood12 = new logic.YourWood();
// flaky:         yourWood12.addWood((double) 1L, (int) (byte) 100);
        yourWood12.lengthFirstSortWood();
        yourWood12.diameterFirstSortWood();
        yourWood12.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList19 = yourWood12.getWood();
        logic.YourWood yourWood20 = new logic.YourWood();
// flaky:         yourWood20.addWood((double) 1L, (int) (byte) 100);
        yourWood20.lengthFirstSortWood();
        boolean boolean25 = roundVolumeList19.contains((java.lang.Object) yourWood20);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor26 = roundVolumeList19.iterator();
        boolean boolean27 = roundVolumeList19.isEmpty();
        logic.YourWood yourWood28 = new logic.YourWood();
// flaky:         yourWood28.addWood((double) 1L, (int) (byte) 100);
        yourWood28.lengthFirstSortWood();
        yourWood28.diameterFirstSortWood();
        yourWood28.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList35 = yourWood28.getWood();
        logic.YourWood yourWood36 = new logic.YourWood();
// flaky:         yourWood36.addWood((double) 1L, (int) (byte) 100);
        yourWood36.lengthFirstSortWood();
        boolean boolean41 = roundVolumeList35.contains((java.lang.Object) yourWood36);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor42 = roundVolumeList35.iterator();
        boolean boolean43 = roundVolumeList19.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList35);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        java.lang.String str48 = roundVolume44.toString();
        double double49 = roundVolume44.getLength();
        roundVolume44.setLength((double) 'a');
        boolean boolean52 = roundVolumeList19.add(roundVolume44);
        double double53 = roundVolume44.getLength();
        roundVolume44.setLength((double) '4');
        double double56 = roundVolume44.getVolume();
        boolean boolean57 = roundVolume0.equals((java.lang.Object) roundVolume44);
        java.lang.String str58 = roundVolume44.toString();
        java.lang.Class<?> wildcardClass59 = roundVolume44.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(roundVolumeList19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(roundVolumeList35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor42);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str48, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 97.0d + "'", double53 == 97.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=52.0, diameter=0, volume=0.0)" + "'", str58, "RoundVolume(length=52.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test800");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (short) 1, (int) (short) -1, 10.0d);
        logic.YourWood yourWood4 = new logic.YourWood();
// flaky:         yourWood4.addWood((double) 1L, (int) (byte) 100);
        yourWood4.lengthFirstSortWood();
        yourWood4.diameterFirstSortWood();
        yourWood4.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList11 = yourWood4.getWood();
        logic.YourWood yourWood12 = new logic.YourWood();
// flaky:         yourWood12.addWood((double) 1L, (int) (byte) 100);
        yourWood12.lengthFirstSortWood();
        boolean boolean17 = roundVolumeList11.contains((java.lang.Object) yourWood12);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor18 = roundVolumeList11.iterator();
        logic.YourWood yourWood20 = new logic.YourWood();
// flaky:         yourWood20.addWood((double) 1L, (int) (byte) 100);
        yourWood20.lengthFirstSortWood();
        yourWood20.diameterFirstSortWood();
        yourWood20.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList27 = yourWood20.getWood();
        logic.YourWood yourWood28 = new logic.YourWood();
// flaky:         yourWood28.addWood((double) 1L, (int) (byte) 100);
        yourWood28.lengthFirstSortWood();
        boolean boolean33 = roundVolumeList27.contains((java.lang.Object) yourWood28);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor34 = roundVolumeList27.iterator();
        boolean boolean35 = roundVolumeList11.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList27);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor36 = roundVolumeList27.listIterator();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        double double40 = roundVolume37.getVolume();
        roundVolume37.setLength((double) (-1L));
        boolean boolean43 = roundVolumeList27.add(roundVolume37);
        logic.RoundVolume roundVolume45 = roundVolumeList27.get((int) (short) 0);
        logic.YourWood yourWood46 = new logic.YourWood();
        yourWood46.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList48 = yourWood46.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList49 = yourWood46.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream50 = roundVolumeList49.stream();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        logic.YourWood yourWood67 = new logic.YourWood();
// flaky:         yourWood67.addWood((double) 1L, (int) (byte) 100);
        yourWood67.lengthFirstSortWood();
        yourWood67.diameterFirstSortWood();
        yourWood67.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList74 = yourWood67.getWood();
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        boolean boolean80 = roundVolumeList74.contains((java.lang.Object) yourWood75);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor81 = roundVolumeList74.iterator();
        boolean boolean82 = roundVolumeList58.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor84 = null; // flaky: roundVolumeList74.listIterator((int) (short) 1);
        boolean boolean85 = roundVolumeList49.remove((java.lang.Object) roundVolumeList74);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream86 = roundVolumeList49.parallelStream();
        int int87 = roundVolumeList27.indexOf((java.lang.Object) roundVolumeStream86);
        boolean boolean88 = roundVolume3.equals((java.lang.Object) int87);
        org.junit.Assert.assertNotNull(roundVolumeList11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor18);
        org.junit.Assert.assertNotNull(roundVolumeList27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor36);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(roundVolume45);
        org.junit.Assert.assertNotNull(roundVolumeList48);
        org.junit.Assert.assertNotNull(roundVolumeList49);
        org.junit.Assert.assertNotNull(roundVolumeStream50);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
        org.junit.Assert.assertNotNull(roundVolumeList74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor81);
// flaky:         org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test801");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream31 = roundVolumeList23.stream();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        logic.RoundVolume roundVolume50 = null; // flaky: roundVolumeList15.remove(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream51 = roundVolumeList15.stream();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream52 = roundVolumeList15.parallelStream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeStream31);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertNotNull(roundVolume50);
        org.junit.Assert.assertNotNull(roundVolumeStream51);
        org.junit.Assert.assertNotNull(roundVolumeStream52);
    }

    @Test
    public void test802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test802");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setDiameter((int) 'a');
        roundVolume0.setVolume((double) 100);
        roundVolume0.setLength((double) 5);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test803");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 52, 2, 0.0d);
        java.lang.String str4 = roundVolume3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=52.0, diameter=2, volume=0.0)" + "'", str4, "RoundVolume(length=52.0, diameter=2, volume=0.0)");
    }

    @Test
    public void test804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test804");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        roundVolume35.setVolume((double) 0);
        double double38 = roundVolume35.getVolume();
        java.lang.String str39 = roundVolume35.toString();
        int int40 = roundVolume35.getDiameter();
        roundVolume35.setLength((double) '#');
        roundVolume35.setVolume(10.0d);
        roundVolume35.setVolume(100.0d);
        boolean boolean47 = roundVolumeList23.add(roundVolume35);
        int int48 = roundVolume35.getDiameter();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str39, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test805");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.lang.Object[] objArray66 = roundVolumeList57.toArray();
        java.lang.Object[] objArray67 = roundVolumeList57.toArray();
        boolean boolean68 = roundVolumeList7.equals((java.lang.Object) roundVolumeList57);
        java.lang.Object obj69 = null;
        boolean boolean70 = roundVolumeList57.contains(obj69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor71 = roundVolumeList57.iterator();
        roundVolumeList57.clear();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
        org.junit.Assert.assertNotNull(objArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor71);
    }

    @Test
    public void test806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test806");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator14 = roundVolumeList7.spliterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        boolean boolean30 = roundVolumeList22.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray31 = roundVolumeList22.toArray();
        boolean boolean32 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList22);
        roundVolumeList7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList7.listIterator((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[RoundVolume(length=1.0, diameter=1, volume=-1.0)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test807");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList23.isEmpty();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        int int49 = roundVolumeList39.size();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList39.listIterator();
        logic.RoundVolume roundVolume55 = new logic.RoundVolume(52.0d, 0, (double) 1L);
        roundVolume55.setLength((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume58 = roundVolumeList39.set(10, roundVolume55);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
    }

    @Test
    public void test808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test808");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getLength();
        double double4 = roundVolume0.getVolume();
        roundVolume0.setLength((double) (-1.0f));
        double double7 = roundVolume0.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
    }

    @Test
    public void test809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test809");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.RoundVolume roundVolume17 = null; // flaky: roundVolumeList7.remove(0);
        logic.RoundVolume roundVolume18 = new logic.RoundVolume();
        roundVolume18.setVolume((double) 0);
        double double21 = roundVolume18.getVolume();
        java.lang.String str22 = roundVolume18.toString();
        int int23 = roundVolume18.getDiameter();
        roundVolume18.setLength((double) '#');
        roundVolume18.setVolume(10.0d);
        roundVolume18.setVolume(100.0d);
        boolean boolean30 = roundVolumeList7.add(roundVolume18);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
// flaky:         org.junit.Assert.assertNotNull(roundVolume17);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str22, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test810");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList8 = yourWood0.getWood();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator9 = roundVolumeList8.spliterator();
        logic.YourWood yourWood10 = new logic.YourWood();
// flaky:         yourWood10.addWood((double) 1L, (int) (byte) 100);
        yourWood10.lengthFirstSortWood();
        yourWood10.diameterFirstSortWood();
        yourWood10.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList17 = yourWood10.getWood();
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        boolean boolean23 = roundVolumeList17.contains((java.lang.Object) yourWood18);
        boolean boolean25 = roundVolumeList17.equals((java.lang.Object) (short) 100);
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        yourWood26.diameterFirstSortWood();
        yourWood26.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList33 = yourWood26.getWood();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        boolean boolean39 = roundVolumeList33.contains((java.lang.Object) yourWood34);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor40 = roundVolumeList33.iterator();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        yourWood42.diameterFirstSortWood();
        yourWood42.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList49 = yourWood42.getWood();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        boolean boolean55 = roundVolumeList49.contains((java.lang.Object) yourWood50);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor56 = roundVolumeList49.iterator();
        boolean boolean57 = roundVolumeList33.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList49);
        boolean boolean58 = roundVolumeList17.equals((java.lang.Object) roundVolumeList49);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume();
        roundVolume59.setVolume((double) 0);
        double double62 = roundVolume59.getVolume();
        java.lang.String str63 = roundVolume59.toString();
        int int64 = roundVolume59.getDiameter();
        roundVolume59.setLength((double) '#');
        roundVolume59.setVolume(10.0d);
        double double69 = roundVolume59.getLength();
        boolean boolean70 = roundVolumeList49.add(roundVolume59);
        boolean boolean71 = roundVolumeList8.equals((java.lang.Object) roundVolume59);
        boolean boolean72 = roundVolumeList8.isEmpty();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream73 = roundVolumeList8.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertNotNull(roundVolumeList8);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator9);
        org.junit.Assert.assertNotNull(roundVolumeList17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(roundVolumeList33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor40);
        org.junit.Assert.assertNotNull(roundVolumeList49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str63, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 35.0d + "'", double69 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream73);
    }

    @Test
    public void test811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test811");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream3 = roundVolumeList2.parallelStream();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume7.setVolume((double) 10);
        java.lang.String str10 = roundVolume7.toString();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume();
        roundVolume11.setVolume((double) 0);
        double double14 = roundVolume11.getVolume();
        java.lang.String str15 = roundVolume11.toString();
        double double16 = roundVolume11.getLength();
        roundVolume11.setLength((double) 'a');
        java.lang.String str19 = roundVolume11.toString();
        logic.RoundVolume roundVolume23 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        double double29 = roundVolume24.getLength();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume33.setVolume((double) 10);
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str40 = roundVolume39.toString();
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume59.setVolume((double) 10);
        java.lang.String str62 = roundVolume59.toString();
        logic.RoundVolume[] roundVolumeArray63 = new logic.RoundVolume[] { roundVolume7, roundVolume11, roundVolume23, roundVolume24, roundVolume33, roundVolume39, roundVolume41, roundVolume44, roundVolume59 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64, roundVolumeArray63);
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        yourWood66.diameterFirstSortWood();
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.YourWood yourWood74 = new logic.YourWood();
// flaky:         yourWood74.addWood((double) 1L, (int) (byte) 100);
        yourWood74.lengthFirstSortWood();
        boolean boolean79 = roundVolumeList73.contains((java.lang.Object) yourWood74);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList73.iterator();
        boolean boolean81 = roundVolumeList64.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        int int82 = roundVolumeList73.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator83 = roundVolumeList73.spliterator();
        int int84 = roundVolumeList2.lastIndexOf((java.lang.Object) roundVolumeList73);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream85 = roundVolumeList73.parallelStream();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeStream3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str10, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str40, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str62, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeStream85);
    }

    @Test
    public void test812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test812");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList15.replaceAll(roundVolumeUnaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
    }

    @Test
    public void test813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test813");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        int int34 = roundVolumeList23.lastIndexOf((java.lang.Object) (-1.0f));
        logic.YourWood yourWood36 = new logic.YourWood();
// flaky:         yourWood36.addWood((double) 1L, (int) (byte) 100);
        yourWood36.lengthFirstSortWood();
        yourWood36.diameterFirstSortWood();
        yourWood36.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList43 = yourWood36.getWood();
        logic.YourWood yourWood44 = new logic.YourWood();
// flaky:         yourWood44.addWood((double) 1L, (int) (byte) 100);
        yourWood44.lengthFirstSortWood();
        boolean boolean49 = roundVolumeList43.contains((java.lang.Object) yourWood44);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList43.iterator();
        logic.RoundVolume roundVolume51 = new logic.RoundVolume();
        roundVolume51.setVolume((double) 0);
        double double54 = roundVolume51.getVolume();
        roundVolume51.setLength((double) 10L);
        boolean boolean57 = roundVolumeList43.equals((java.lang.Object) 10L);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = roundVolumeList23.addAll(10, (java.util.Collection<logic.RoundVolume>) roundVolumeList43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test814");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (byte) 1, (int) (byte) 0, (double) 100);
    }

    @Test
    public void test815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test815");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setDiameter((int) '4');
        double double6 = roundVolume3.getVolume();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }
}
