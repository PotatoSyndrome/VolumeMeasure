package Interface;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        logic.YourWood yourWood0 = null;
        // The following exception was thrown during execution in test generation
        try {
            Interface.WoodTable woodTable1 = null; // flaky: new Interface.WoodTable(yourWood0);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node4 = nodeList1.remove(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        java.lang.Class<?> wildcardClass6 = nodeList1.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.Collection<javafx.scene.Node> nodeCollection9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = nodeList1.retainAll(nodeCollection9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.lang.Class<?> wildcardClass4 = null; // flaky: nodeList3.getClass();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        boolean boolean4 = nodeList1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList7 = nodeList1.subList((-1), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: fromIndex = -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node node5 = null;
        boolean boolean6 = nodeList1.add(node5);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node8 = nodeList1.remove((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator22 = nodeList17.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node24 = nodeList17.get((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator22);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        java.lang.Object obj18 = null;
        boolean boolean19 = nodeList16.remove(obj18);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = false; // flaky: nodeList4.addAll((int) (short) 1, (java.util.Collection<javafx.scene.Node>) nodeList16);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        java.util.Collection<javafx.scene.Node> nodeCollection4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = nodeList1.containsAll(nodeCollection4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor5 = null; // flaky: nodeList3.listIterator((int) (short) 100);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        boolean boolean6 = nodeList1.isEmpty();
        Interface.WoodTable woodTable8 = null;
        Interface.WoodTotalValues woodTotalValues9 = null;
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable8, woodTotalValues9);
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood10.getAll();
        boolean boolean13 = false; // flaky: nodeList11.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node15 = null;
        javafx.scene.Node node16 = null; // flaky: nodeList11.set((int) (byte) 1, node15);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node17 = nodeList1.set((int) ' ', node15);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean5 = false; // flaky: nodeList3.equals((java.lang.Object) (byte) 1);
        Interface.WoodTable woodTable7 = null;
        Interface.WoodTotalValues woodTotalValues8 = null;
        Interface.AddWood addWood9 = null; // flaky: new Interface.AddWood(woodTable7, woodTotalValues8);
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: addWood9.getAll();
        boolean boolean12 = false; // flaky: nodeList10.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node14 = null;
        javafx.scene.Node node15 = null; // flaky: nodeList10.set((int) (byte) 1, node14);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node16 = null; // flaky: nodeList3.set(10, node14);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
// flaky:         addWood2.redraw((double) 100L, (double) 10);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList33 = nodeList1.subList(10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable8 = null;
        Interface.WoodTotalValues woodTotalValues9 = null;
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable8, woodTotalValues9);
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood10.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood10.getAll();
        javafx.scene.Node[] nodeArray13 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList14 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList14, nodeArray13);
        boolean boolean16 = nodeList14.isEmpty();
        int int18 = nodeList14.lastIndexOf((java.lang.Object) 100);
        int int20 = nodeList14.lastIndexOf((java.lang.Object) 10);
        boolean boolean21 = false; // flaky: nodeList12.retainAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        boolean boolean22 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList25 = nodeList1.subList((int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        int int16 = nodeList7.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean29 = false; // flaky: nodeList27.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node31 = null;
        javafx.scene.Node node32 = null; // flaky: nodeList27.set((int) (byte) 1, node31);
        boolean boolean33 = nodeList19.add(node32);
        javafx.scene.Node node34 = null; // flaky: nodeList7.set((int) (short) 0, node32);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node35 = null; // flaky: nodeList3.set((int) 'a', node32);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        boolean boolean25 = nodeList23.isEmpty();
        int int27 = nodeList23.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        boolean boolean33 = false; // flaky: nodeList31.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node35 = null;
        javafx.scene.Node node36 = null; // flaky: nodeList31.set((int) (byte) 1, node35);
        boolean boolean37 = nodeList23.add(node36);
        java.util.stream.Stream<javafx.scene.Node> nodeStream38 = nodeList23.stream();
        boolean boolean39 = nodeList1.equals((java.lang.Object) nodeList23);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node41 = nodeList1.remove(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean5 = false; // flaky: nodeList3.equals((java.lang.Object) (byte) 1);
        Interface.WoodTable woodTable7 = null;
        Interface.WoodTotalValues woodTotalValues8 = null;
        Interface.AddWood addWood9 = null; // flaky: new Interface.AddWood(woodTable7, woodTotalValues8);
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: addWood9.getAll();
        boolean boolean12 = false; // flaky: nodeList10.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node14 = null;
        javafx.scene.Node node15 = null; // flaky: nodeList10.set((int) (byte) 1, node14);
        // The following exception was thrown during execution in test generation
        try {
// flaky:             nodeList3.add((int) (byte) 10, node15);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node node5 = null;
        boolean boolean6 = nodeList1.add(node5);
        javafx.scene.Node[] nodeArray8 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList9 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList9, nodeArray8);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
        boolean boolean16 = false; // flaky: nodeList9.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList15);
        int int18 = nodeList9.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        boolean boolean23 = nodeList21.isEmpty();
        int int25 = nodeList21.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean31 = false; // flaky: nodeList29.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node33 = null;
        javafx.scene.Node node34 = null; // flaky: nodeList29.set((int) (byte) 1, node33);
        boolean boolean35 = nodeList21.add(node34);
        javafx.scene.Node node36 = null; // flaky: nodeList9.set((int) (short) 0, node34);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node37 = nodeList1.set((int) (short) 10, node36);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        int int10 = nodeList1.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean23 = false; // flaky: nodeList21.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node25 = null;
        javafx.scene.Node node26 = null; // flaky: nodeList21.set((int) (byte) 1, node25);
        boolean boolean27 = nodeList13.add(node26);
        javafx.scene.Node node28 = null; // flaky: nodeList1.set((int) (short) 0, node26);
        java.util.AbstractList<javafx.scene.Node>[] nodeListArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.AbstractList<javafx.scene.Node>[] nodeListArray30 = nodeList1.toArray(nodeListArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node7 = nodeList1.remove((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues1.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean30 = false; // flaky: nodeList23.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList29);
        java.util.stream.Stream<javafx.scene.Node> nodeStream31 = null; // flaky: nodeList29.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator32 = null; // flaky: nodeList29.spliterator();
        boolean boolean33 = false; // flaky: nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList29);
// flaky:         nodeList29.clear();
        java.util.Collection<javafx.scene.Node> nodeCollection35 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = nodeList29.containsAll(nodeCollection35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream31);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        int int5 = nodeList1.size();
        Interface.WoodTable woodTable7 = null;
        Interface.WoodTotalValues woodTotalValues8 = null;
        Interface.AddWood addWood9 = null; // flaky: new Interface.AddWood(woodTable7, woodTotalValues8);
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: addWood9.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood9.getAll();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        int int19 = nodeList13.lastIndexOf((java.lang.Object) 10);
        boolean boolean20 = false; // flaky: nodeList11.retainAll((java.util.Collection<javafx.scene.Node>) nodeList13);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = nodeList1.addAll(5, (java.util.Collection<javafx.scene.Node>) nodeList11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        int int5 = nodeList1.size();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        boolean boolean15 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList7);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.add((int) (byte) 10, node31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean5 = false; // flaky: nodeList3.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = nodeList7.remove(obj9);
        javafx.scene.Node node11 = null;
        boolean boolean12 = nodeList7.add(node11);
        int int14 = nodeList7.indexOf((java.lang.Object) (short) 10);
        java.lang.Class<?> wildcardClass15 = nodeList7.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray16 = new java.lang.reflect.GenericDeclaration[] { wildcardClass15 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.GenericDeclaration[] genericDeclarationArray17 = null; // flaky: nodeList3.toArray(genericDeclarationArray16);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(genericDeclarationArray16);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean5 = false; // flaky: nodeList3.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node7 = null;
        javafx.scene.Node node8 = null; // flaky: nodeList3.set((int) (byte) 1, node7);
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null; // flaky: new Interface.WoodTotalValues(woodTable10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: woodTotalValues11.getAll();
        Interface.AddWood addWood13 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues11);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood16.getAll();
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood22.getAll();
        Interface.WoodTable woodTable25 = null;
        Interface.WoodTotalValues woodTotalValues26 = null;
        Interface.AddWood addWood27 = null; // flaky: new Interface.AddWood(woodTable25, woodTotalValues26);
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood27.getAll();
// flaky:         addWood27.redraw((double) 10.0f, (double) 0L);
// flaky:         addWood27.redraw((double) 'a', (double) 1);
        Interface.AddWood[] addWoodArray35 = new Interface.AddWood[] { addWood13, addWood16, addWood22, addWood27 };
        // The following exception was thrown during execution in test generation
        try {
            Interface.AddWood[] addWoodArray36 = null; // flaky: nodeList3.toArray(addWoodArray35);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertNotNull(node8);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNotNull(addWoodArray35);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node node5 = null;
        boolean boolean6 = nodeList1.add(node5);
        java.util.ListIterator<javafx.scene.Node> nodeItor7 = nodeList1.listIterator();
        int int9 = nodeList1.lastIndexOf((java.lang.Object) (byte) 100);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.replaceAll(nodeUnaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean5 = false; // flaky: nodeList3.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node7 = null;
        javafx.scene.Node node8 = null; // flaky: nodeList3.set((int) (byte) 1, node7);
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        boolean boolean14 = false; // flaky: nodeList12.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        boolean boolean19 = nodeList17.isEmpty();
        int int21 = nodeList17.lastIndexOf((java.lang.Object) 100);
        int int23 = nodeList17.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood26.getAll();
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        int int36 = nodeList30.lastIndexOf((java.lang.Object) 10);
        boolean boolean37 = false; // flaky: nodeList28.retainAll((java.util.Collection<javafx.scene.Node>) nodeList30);
        boolean boolean38 = nodeList17.containsAll((java.util.Collection<javafx.scene.Node>) nodeList30);
        boolean boolean39 = false; // flaky: nodeList12.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList17);
        boolean boolean40 = false; // flaky: nodeList3.remove((java.lang.Object) 1);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertNotNull(node8);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node node5 = null;
        boolean boolean6 = nodeList1.add(node5);
        java.lang.Class<?> wildcardClass7 = nodeList1.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
        java.util.Iterator<javafx.scene.Node> nodeItor4 = null; // flaky: nodeList3.iterator();
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList3.replaceAll(nodeUnaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeItor4);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean23 = false; // flaky: nodeList21.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node25 = null;
        javafx.scene.Node node26 = null; // flaky: nodeList21.set((int) (byte) 1, node25);
        boolean boolean27 = nodeList13.add(node26);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood30.getAll();
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        boolean boolean36 = nodeList34.isEmpty();
        int int38 = nodeList34.lastIndexOf((java.lang.Object) 100);
        int int40 = nodeList34.lastIndexOf((java.lang.Object) 10);
        boolean boolean41 = false; // flaky: nodeList32.retainAll((java.util.Collection<javafx.scene.Node>) nodeList34);
        boolean boolean42 = nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList34);
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        boolean boolean46 = nodeList44.isEmpty();
        int int48 = nodeList44.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable49 = null;
        Interface.WoodTotalValues woodTotalValues50 = null;
        Interface.AddWood addWood51 = null; // flaky: new Interface.AddWood(woodTable49, woodTotalValues50);
        java.util.ArrayList<javafx.scene.Node> nodeList52 = null; // flaky: addWood51.getAll();
        boolean boolean54 = false; // flaky: nodeList52.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node56 = null;
        javafx.scene.Node node57 = null; // flaky: nodeList52.set((int) (byte) 1, node56);
        boolean boolean58 = nodeList44.add(node57);
        javafx.scene.Node[] nodeArray59 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList60 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList60, nodeArray59);
        java.lang.Object obj62 = null;
        boolean boolean63 = nodeList60.remove(obj62);
        boolean boolean64 = nodeList44.retainAll((java.util.Collection<javafx.scene.Node>) nodeList60);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator65 = nodeList60.spliterator();
        boolean boolean66 = nodeList34.remove((java.lang.Object) nodeSpliterator65);
        int int67 = nodeList1.lastIndexOf((java.lang.Object) nodeSpliterator65);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node69 = nodeList1.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((double) (short) 100, 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues1.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues2.getAll();
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues2.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        Interface.AddWood addWood3 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
// flaky:         addWood3.redraw((double) 10.0f, (double) (short) 1);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        Interface.WoodTable woodTable7 = null;
        Interface.WoodTotalValues woodTotalValues8 = null;
        Interface.AddWood addWood9 = null; // flaky: new Interface.AddWood(woodTable7, woodTotalValues8);
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: addWood9.getAll();
        boolean boolean12 = false; // flaky: nodeList10.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node14 = null;
        javafx.scene.Node node15 = null; // flaky: nodeList10.set((int) (byte) 1, node14);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node16 = nodeList1.set((int) '#', node14);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.lang.Class<?> wildcardClass10 = null; // flaky: nodeList7.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood14.getAll();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        int int24 = nodeList18.lastIndexOf((java.lang.Object) 10);
        boolean boolean25 = false; // flaky: nodeList16.retainAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = nodeList27.remove(obj29);
        boolean boolean31 = nodeList27.isEmpty();
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        boolean boolean40 = false; // flaky: nodeList33.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList39);
        int int42 = nodeList33.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
        javafx.scene.Node node60 = null; // flaky: nodeList33.set((int) (short) 0, node58);
        boolean boolean61 = nodeList27.add(node60);
        boolean boolean63 = nodeList27.remove((java.lang.Object) 100L);
        boolean boolean64 = nodeList18.remove((java.lang.Object) boolean63);
        boolean boolean65 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        java.lang.Object[] objArray66 = nodeList1.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor68 = nodeList1.listIterator((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        Interface.WoodTable woodTable3 = null;
        Interface.WoodTotalValues woodTotalValues4 = null;
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable3, woodTotalValues4);
        java.util.ArrayList<javafx.scene.Node> nodeList6 = null; // flaky: addWood5.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood5.getAll();
        int int8 = 0; // flaky: nodeList2.indexOf((java.lang.Object) addWood5);
        java.lang.Class<?> wildcardClass9 = null; // flaky: nodeList2.getClass();
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList6);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
// flaky:         org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        int int5 = nodeList1.size();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        boolean boolean15 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList7);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean25 = false; // flaky: nodeList18.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList24);
        javafx.scene.Node[] nodeArray27 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList28 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList28, nodeArray27);
        boolean boolean30 = nodeList28.isEmpty();
        int int32 = nodeList28.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable33 = null;
        Interface.WoodTotalValues woodTotalValues34 = null;
        Interface.AddWood addWood35 = null; // flaky: new Interface.AddWood(woodTable33, woodTotalValues34);
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood35.getAll();
        boolean boolean38 = false; // flaky: nodeList36.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node40 = null;
        javafx.scene.Node node41 = null; // flaky: nodeList36.set((int) (byte) 1, node40);
        boolean boolean42 = nodeList28.add(node41);
// flaky:         nodeList18.add(1, node41);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node44 = nodeList1.set((-1), node41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean14 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        boolean boolean18 = nodeList16.isEmpty();
        int int20 = nodeList16.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean26 = false; // flaky: nodeList24.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node28 = null;
        javafx.scene.Node node29 = null; // flaky: nodeList24.set((int) (byte) 1, node28);
        boolean boolean30 = nodeList16.add(node29);
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        boolean boolean40 = false; // flaky: nodeList33.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList39);
        int int42 = nodeList33.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
        javafx.scene.Node node60 = null; // flaky: nodeList33.set((int) (short) 0, node58);
        javafx.scene.Node node61 = nodeList16.set((int) (byte) 0, node58);
        boolean boolean62 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList16);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node64 = nodeList16.remove((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertNotNull(node60);
// flaky:         org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: addWood2.getAll();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList8 = null; // flaky: nodeList5.subList((int) (byte) 1, (int) (short) -1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        int int16 = nodeList7.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean29 = false; // flaky: nodeList27.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node31 = null;
        javafx.scene.Node node32 = null; // flaky: nodeList27.set((int) (byte) 1, node31);
        boolean boolean33 = nodeList19.add(node32);
        javafx.scene.Node node34 = null; // flaky: nodeList7.set((int) (short) 0, node32);
        boolean boolean35 = nodeList1.add(node34);
        nodeList1.clear();
        javafx.scene.Node[] nodeArray38 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList39 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList39, nodeArray38);
        boolean boolean41 = nodeList39.isEmpty();
        int int43 = nodeList39.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTotalValues woodTotalValues45 = null;
        Interface.AddWood addWood46 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood46.getAll();
        boolean boolean49 = false; // flaky: nodeList47.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node51 = null;
        javafx.scene.Node node52 = null; // flaky: nodeList47.set((int) (byte) 1, node51);
        boolean boolean53 = nodeList39.add(node52);
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        Interface.WoodTable woodTable59 = null;
        Interface.WoodTotalValues woodTotalValues60 = null;
        Interface.AddWood addWood61 = null; // flaky: new Interface.AddWood(woodTable59, woodTotalValues60);
        java.util.ArrayList<javafx.scene.Node> nodeList62 = null; // flaky: addWood61.getAll();
        boolean boolean63 = false; // flaky: nodeList56.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList62);
        int int65 = nodeList56.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray67 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList68 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList68, nodeArray67);
        boolean boolean70 = nodeList68.isEmpty();
        int int72 = nodeList68.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable73 = null;
        Interface.WoodTotalValues woodTotalValues74 = null;
        Interface.AddWood addWood75 = null; // flaky: new Interface.AddWood(woodTable73, woodTotalValues74);
        java.util.ArrayList<javafx.scene.Node> nodeList76 = null; // flaky: addWood75.getAll();
        boolean boolean78 = false; // flaky: nodeList76.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node80 = null;
        javafx.scene.Node node81 = null; // flaky: nodeList76.set((int) (byte) 1, node80);
        boolean boolean82 = nodeList68.add(node81);
        javafx.scene.Node node83 = null; // flaky: nodeList56.set((int) (short) 0, node81);
        javafx.scene.Node node84 = nodeList39.set((int) (byte) 0, node81);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node85 = nodeList1.set((int) 'a', node81);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList62);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
// flaky:         org.junit.Assert.assertNotNull(node83);
// flaky:         org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        int int15 = nodeList11.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean21 = false; // flaky: nodeList19.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node23 = null;
        javafx.scene.Node node24 = null; // flaky: nodeList19.set((int) (byte) 1, node23);
        boolean boolean25 = nodeList11.add(node24);
// flaky:         nodeList1.add(1, node24);
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        java.lang.Object obj31 = null;
        boolean boolean32 = nodeList29.remove(obj31);
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        boolean boolean36 = nodeList34.isEmpty();
        int int38 = nodeList34.lastIndexOf((java.lang.Object) 100);
        boolean boolean39 = nodeList34.isEmpty();
        nodeList34.clear();
        boolean boolean41 = nodeList29.removeAll((java.util.Collection<javafx.scene.Node>) nodeList34);
        Interface.WoodTable woodTable42 = null;
        Interface.WoodTotalValues woodTotalValues43 = null;
        Interface.AddWood addWood44 = null; // flaky: new Interface.AddWood(woodTable42, woodTotalValues43);
        java.util.ArrayList<javafx.scene.Node> nodeList45 = null; // flaky: addWood44.getAll();
// flaky:         addWood44.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList49 = null; // flaky: addWood44.getAll();
        boolean boolean50 = false; // flaky: nodeList34.addAll((java.util.Collection<javafx.scene.Node>) nodeList49);
        javafx.scene.Node[] nodeArray51 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList52 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList52, nodeArray51);
        boolean boolean54 = nodeList52.isEmpty();
        boolean boolean55 = nodeList52.isEmpty();
        nodeList52.clear();
        boolean boolean57 = nodeList34.retainAll((java.util.Collection<javafx.scene.Node>) nodeList52);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = nodeList1.addAll((int) (short) 100, (java.util.Collection<javafx.scene.Node>) nodeList34);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList45);
// flaky:         org.junit.Assert.assertNotNull(nodeList49);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable15 = null;
        Interface.WoodTotalValues woodTotalValues16 = null;
        Interface.AddWood addWood17 = null; // flaky: new Interface.AddWood(woodTable15, woodTotalValues16);
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood17.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood17.getAll();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        boolean boolean23 = nodeList21.isEmpty();
        int int25 = nodeList21.lastIndexOf((java.lang.Object) 100);
        int int27 = nodeList21.lastIndexOf((java.lang.Object) 10);
        boolean boolean28 = false; // flaky: nodeList19.retainAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        boolean boolean30 = false; // flaky: nodeList19.contains((java.lang.Object) false);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        boolean boolean35 = false; // flaky: nodeList34.isEmpty();
        boolean boolean37 = false; // flaky: nodeList34.equals((java.lang.Object) 100);
        int int38 = 0; // flaky: nodeList19.lastIndexOf((java.lang.Object) nodeList34);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator39 = null; // flaky: nodeList34.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = nodeList6.addAll((int) (byte) 100, (java.util.Collection<javafx.scene.Node>) nodeList34);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator39);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        Interface.AddWood addWood3 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues2.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        java.lang.Class<?> wildcardClass14 = nodeList1.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList10 = nodeList1.subList((int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = nodeList18.remove(obj20);
        int int22 = nodeList18.size();
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
        boolean boolean31 = false; // flaky: nodeList24.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList30);
        boolean boolean32 = nodeList18.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        boolean boolean33 = nodeList12.removeAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList12.replaceAll(nodeUnaryOperator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList13 = nodeList1.subList((int) (byte) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        boolean boolean9 = nodeList7.isEmpty();
        int int11 = nodeList7.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
        boolean boolean17 = false; // flaky: nodeList15.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node19 = null;
        javafx.scene.Node node20 = null; // flaky: nodeList15.set((int) (byte) 1, node19);
        boolean boolean21 = nodeList7.add(node20);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = nodeList23.remove(obj25);
        boolean boolean27 = nodeList7.retainAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        boolean boolean28 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList31 = nodeList7.subList(5, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        java.lang.Object obj12 = null;
        boolean boolean13 = nodeList10.remove(obj12);
        javafx.scene.Node node14 = null;
        boolean boolean15 = nodeList10.add(node14);
        java.util.ListIterator<javafx.scene.Node> nodeItor16 = nodeList10.listIterator();
        boolean boolean17 = false; // flaky: nodeList8.contains((java.lang.Object) nodeList10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList20 = nodeList10.subList(10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        boolean boolean22 = nodeList1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node24 = nodeList1.remove((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node6 = null; // flaky: nodeList3.get(10);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean25 = false; // flaky: nodeList18.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList24);
        int int27 = nodeList18.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = nodeList30.add(node43);
        javafx.scene.Node node45 = null; // flaky: nodeList18.set((int) (short) 0, node43);
        javafx.scene.Node node46 = nodeList1.set((int) (byte) 0, node43);
        Interface.WoodTable woodTable47 = null;
        Interface.WoodTotalValues woodTotalValues48 = null;
        Interface.AddWood addWood49 = null; // flaky: new Interface.AddWood(woodTable47, woodTotalValues48);
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: addWood49.getAll();
        boolean boolean52 = false; // flaky: nodeList50.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray54 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList55 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList55, nodeArray54);
        boolean boolean57 = nodeList55.isEmpty();
        int int59 = nodeList55.lastIndexOf((java.lang.Object) 100);
        int int61 = nodeList55.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable62 = null;
        Interface.WoodTotalValues woodTotalValues63 = null;
        Interface.AddWood addWood64 = null; // flaky: new Interface.AddWood(woodTable62, woodTotalValues63);
        java.util.ArrayList<javafx.scene.Node> nodeList65 = null; // flaky: addWood64.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList66 = null; // flaky: addWood64.getAll();
        javafx.scene.Node[] nodeArray67 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList68 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList68, nodeArray67);
        boolean boolean70 = nodeList68.isEmpty();
        int int72 = nodeList68.lastIndexOf((java.lang.Object) 100);
        int int74 = nodeList68.lastIndexOf((java.lang.Object) 10);
        boolean boolean75 = false; // flaky: nodeList66.retainAll((java.util.Collection<javafx.scene.Node>) nodeList68);
        boolean boolean76 = nodeList55.containsAll((java.util.Collection<javafx.scene.Node>) nodeList68);
        boolean boolean77 = false; // flaky: nodeList50.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList55);
        boolean boolean78 = nodeList1.contains((java.lang.Object) nodeList55);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertNotNull(node45);
// flaky:         org.junit.Assert.assertNotNull(node46);
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList65);
// flaky:         org.junit.Assert.assertNotNull(nodeList66);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        boolean boolean9 = nodeList7.isEmpty();
        int int11 = nodeList7.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
        boolean boolean17 = false; // flaky: nodeList15.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node19 = null;
        javafx.scene.Node node20 = null; // flaky: nodeList15.set((int) (byte) 1, node19);
        boolean boolean21 = nodeList7.add(node20);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = nodeList23.remove(obj25);
        boolean boolean27 = nodeList7.retainAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        boolean boolean28 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList7);
        int int30 = nodeList1.lastIndexOf((java.lang.Object) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList33 = nodeList1.subList(10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = nodeList7.remove(obj9);
        boolean boolean11 = nodeList7.isEmpty();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray15 = nodeList7.toArray(strArray14);
        java.lang.CharSequence[] charSequenceArray16 = nodeList1.toArray((java.lang.CharSequence[]) strArray14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor18 = nodeList1.listIterator((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(charSequenceArray16);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor20 = nodeList1.listIterator((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: woodTotalValues2.getAll();
// flaky:         woodTotalValues2.redraw((double) (short) 100, 10.0d);
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues2.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean14 = nodeList1.isEmpty();
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean30 = false; // flaky: nodeList23.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList29);
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        boolean boolean35 = nodeList33.isEmpty();
        int int37 = nodeList33.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean43 = false; // flaky: nodeList41.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node45 = null;
        javafx.scene.Node node46 = null; // flaky: nodeList41.set((int) (byte) 1, node45);
        boolean boolean47 = nodeList33.add(node46);
// flaky:         nodeList23.add(1, node46);
        javafx.scene.Node node49 = null; // flaky: nodeList19.set(0, node46);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node50 = nodeList1.set((int) '4', node46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean14 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        boolean boolean18 = nodeList16.isEmpty();
        int int20 = nodeList16.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean26 = false; // flaky: nodeList24.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node28 = null;
        javafx.scene.Node node29 = null; // flaky: nodeList24.set((int) (byte) 1, node28);
        boolean boolean30 = nodeList16.add(node29);
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        boolean boolean40 = false; // flaky: nodeList33.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList39);
        int int42 = nodeList33.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
        javafx.scene.Node node60 = null; // flaky: nodeList33.set((int) (short) 0, node58);
        javafx.scene.Node node61 = nodeList16.set((int) (byte) 0, node58);
        boolean boolean62 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor64 = nodeList1.listIterator((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertNotNull(node60);
// flaky:         org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator22 = nodeList17.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor24 = nodeList17.listIterator((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator22);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        java.lang.Class<?> wildcardClass5 = null; // flaky: nodeList4.getClass();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        java.lang.Class<?> wildcardClass12 = nodeList1.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((double) 2, (double) 5);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues1.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList3.replaceAll(nodeUnaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = nodeList18.remove(obj20);
        int int22 = nodeList18.size();
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
        boolean boolean31 = false; // flaky: nodeList24.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList30);
        boolean boolean32 = nodeList18.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        boolean boolean33 = nodeList12.removeAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node35 = nodeList12.get((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList14 = nodeList1.subList((int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(35) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean22 = false; // flaky: nodeList15.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList21);
        int int24 = nodeList15.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        java.lang.Object obj28 = null;
        boolean boolean29 = nodeList26.remove(obj28);
        boolean boolean30 = nodeList26.isEmpty();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray34 = nodeList26.toArray(strArray33);
        boolean boolean35 = nodeList15.equals((java.lang.Object) strArray34);
        int int36 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) boolean35);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node38 = null; // flaky: nodeList4.get((int) (short) -1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        int int10 = nodeList1.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean23 = false; // flaky: nodeList21.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node25 = null;
        javafx.scene.Node node26 = null; // flaky: nodeList21.set((int) (byte) 1, node25);
        boolean boolean27 = nodeList13.add(node26);
        javafx.scene.Node node28 = null; // flaky: nodeList1.set((int) (short) 0, node26);
        javafx.scene.Node[] nodeArray30 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList31 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList31, nodeArray30);
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
        boolean boolean38 = false; // flaky: nodeList31.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList37);
        javafx.scene.Node[] nodeArray40 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList41 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList41, nodeArray40);
        boolean boolean43 = nodeList41.isEmpty();
        int int45 = nodeList41.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable46 = null;
        Interface.WoodTotalValues woodTotalValues47 = null;
        Interface.AddWood addWood48 = null; // flaky: new Interface.AddWood(woodTable46, woodTotalValues47);
        java.util.ArrayList<javafx.scene.Node> nodeList49 = null; // flaky: addWood48.getAll();
        boolean boolean51 = false; // flaky: nodeList49.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node53 = null;
        javafx.scene.Node node54 = null; // flaky: nodeList49.set((int) (byte) 1, node53);
        boolean boolean55 = nodeList41.add(node54);
// flaky:         nodeList31.add(1, node54);
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.add((-1), node54);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor23 = nodeList1.listIterator((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node25 = null; // flaky: nodeList4.remove((int) (byte) 1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = nodeList18.remove(obj20);
        int int22 = nodeList18.size();
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
        boolean boolean31 = false; // flaky: nodeList24.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList30);
        boolean boolean32 = nodeList18.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        boolean boolean33 = nodeList12.removeAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        java.lang.Class<?> wildcardClass34 = nodeList24.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
// flaky:         woodTotalValues3.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: woodTotalValues3.getAll();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList12 = null; // flaky: nodeList9.subList((int) (byte) 1, 0);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues1.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = nodeList32.remove(obj34);
        int int36 = nodeList32.size();
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean45 = false; // flaky: nodeList38.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList44);
        boolean boolean46 = nodeList32.retainAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        boolean boolean47 = nodeList1.contains((java.lang.Object) nodeList32);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node49 = nodeList32.remove((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean30 = false; // flaky: nodeList23.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList29);
        java.util.stream.Stream<javafx.scene.Node> nodeStream31 = null; // flaky: nodeList29.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator32 = null; // flaky: nodeList29.spliterator();
        boolean boolean33 = false; // flaky: nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        java.util.Iterator<javafx.scene.Node> nodeItor34 = null; // flaky: nodeList29.iterator();
        javafx.scene.Node[] nodeArray35 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList36 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList36, nodeArray35);
        Interface.WoodTable woodTable39 = null;
        Interface.WoodTotalValues woodTotalValues40 = null;
        Interface.AddWood addWood41 = null; // flaky: new Interface.AddWood(woodTable39, woodTotalValues40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: addWood41.getAll();
        boolean boolean43 = false; // flaky: nodeList36.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList42);
        int int45 = nodeList36.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        java.lang.Object obj49 = null;
        boolean boolean50 = nodeList47.remove(obj49);
        boolean boolean51 = nodeList47.isEmpty();
        java.lang.String[] strArray54 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray55 = nodeList47.toArray(strArray54);
        boolean boolean56 = nodeList36.equals((java.lang.Object) strArray55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable<java.lang.String>[] strComparableArray57 = null; // flaky: nodeList29.toArray((java.lang.Comparable<java.lang.String>[]) strArray55);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream31);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor34);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        boolean boolean25 = nodeList23.isEmpty();
        int int27 = nodeList23.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        boolean boolean33 = false; // flaky: nodeList31.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node35 = null;
        javafx.scene.Node node36 = null; // flaky: nodeList31.set((int) (byte) 1, node35);
        boolean boolean37 = nodeList23.add(node36);
        java.util.stream.Stream<javafx.scene.Node> nodeStream38 = nodeList23.stream();
        boolean boolean39 = nodeList1.equals((java.lang.Object) nodeList23);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null; // flaky: new Interface.WoodTotalValues(woodTable40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: woodTotalValues41.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: woodTotalValues41.getAll();
        boolean boolean44 = nodeList1.contains((java.lang.Object) nodeList43);
        Interface.WoodTable woodTable46 = null;
        Interface.WoodTotalValues woodTotalValues47 = null;
        Interface.AddWood addWood48 = null; // flaky: new Interface.AddWood(woodTable46, woodTotalValues47);
        java.util.ArrayList<javafx.scene.Node> nodeList49 = null; // flaky: addWood48.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: addWood48.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList51 = null; // flaky: addWood48.getAll();
        javafx.scene.Node[] nodeArray53 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList54 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList54, nodeArray53);
        boolean boolean56 = nodeList54.isEmpty();
        int int58 = nodeList54.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable59 = null;
        Interface.WoodTotalValues woodTotalValues60 = null;
        Interface.AddWood addWood61 = null; // flaky: new Interface.AddWood(woodTable59, woodTotalValues60);
        java.util.ArrayList<javafx.scene.Node> nodeList62 = null; // flaky: addWood61.getAll();
        boolean boolean64 = false; // flaky: nodeList62.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node66 = null;
        javafx.scene.Node node67 = null; // flaky: nodeList62.set((int) (byte) 1, node66);
        boolean boolean68 = nodeList54.add(node67);
        javafx.scene.Node node69 = null; // flaky: nodeList51.set((int) (short) 0, node67);
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.add((int) (byte) 100, node69);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList49);
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
// flaky:         org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
// flaky:         org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        boolean boolean8 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = nodeList1.stream();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node11 = nodeList1.remove(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeStream9);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
// flaky:         woodTotalValues3.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: woodTotalValues3.getAll();
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues3.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood33.getAll();
        boolean boolean37 = false; // flaky: nodeList22.addAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        int int38 = nodeList22.size();
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTable woodTable42 = null;
        Interface.WoodTotalValues woodTotalValues43 = null; // flaky: new Interface.WoodTotalValues(woodTable42);
        Interface.AddWood addWood44 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues43);
// flaky:         woodTotalValues43.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood48 = null; // flaky: new Interface.AddWood(woodTable40, woodTotalValues43);
        java.util.ArrayList<javafx.scene.Node> nodeList49 = null; // flaky: woodTotalValues43.getAll();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = nodeList22.addAll((int) (byte) 10, (java.util.Collection<javafx.scene.Node>) nodeList49);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
// flaky:         org.junit.Assert.assertNotNull(nodeList49);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        Interface.WoodTable woodTable3 = null;
        Interface.WoodTotalValues woodTotalValues4 = null;
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable3, woodTotalValues4);
        java.util.ArrayList<javafx.scene.Node> nodeList6 = null; // flaky: addWood5.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood5.getAll();
        int int8 = 0; // flaky: nodeList2.indexOf((java.lang.Object) addWood5);
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = nodeList10.isEmpty();
        boolean boolean18 = false; // flaky: nodeList2.contains((java.lang.Object) nodeList10);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList10.replaceAll(nodeUnaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList6);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = nodeList25.remove(obj27);
        boolean boolean29 = nodeList25.isEmpty();
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray33 = nodeList25.toArray(strArray32);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        boolean boolean37 = nodeList35.isEmpty();
        int int39 = nodeList35.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null;
        Interface.AddWood addWood42 = null; // flaky: new Interface.AddWood(woodTable40, woodTotalValues41);
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: addWood42.getAll();
        boolean boolean45 = false; // flaky: nodeList43.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node47 = null;
        javafx.scene.Node node48 = null; // flaky: nodeList43.set((int) (byte) 1, node47);
        boolean boolean49 = nodeList35.add(node48);
        javafx.scene.Node[] nodeArray51 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList52 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList52, nodeArray51);
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTotalValues woodTotalValues56 = null;
        Interface.AddWood addWood57 = null; // flaky: new Interface.AddWood(woodTable55, woodTotalValues56);
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood57.getAll();
        boolean boolean59 = false; // flaky: nodeList52.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList58);
        int int61 = nodeList52.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray63 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList64 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList64, nodeArray63);
        boolean boolean66 = nodeList64.isEmpty();
        int int68 = nodeList64.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable69 = null;
        Interface.WoodTotalValues woodTotalValues70 = null;
        Interface.AddWood addWood71 = null; // flaky: new Interface.AddWood(woodTable69, woodTotalValues70);
        java.util.ArrayList<javafx.scene.Node> nodeList72 = null; // flaky: addWood71.getAll();
        boolean boolean74 = false; // flaky: nodeList72.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node76 = null;
        javafx.scene.Node node77 = null; // flaky: nodeList72.set((int) (byte) 1, node76);
        boolean boolean78 = nodeList64.add(node77);
        javafx.scene.Node node79 = null; // flaky: nodeList52.set((int) (short) 0, node77);
        javafx.scene.Node node80 = nodeList35.set((int) (byte) 0, node77);
        boolean boolean81 = nodeList25.add(node80);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node82 = null; // flaky: nodeList21.set((-1), node80);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
// flaky:         org.junit.Assert.assertNotNull(node79);
// flaky:         org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        boolean boolean9 = nodeList7.isEmpty();
        int int11 = nodeList7.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
        boolean boolean17 = false; // flaky: nodeList15.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node19 = null;
        javafx.scene.Node node20 = null; // flaky: nodeList15.set((int) (byte) 1, node19);
        boolean boolean21 = nodeList7.add(node20);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = nodeList23.remove(obj25);
        boolean boolean27 = nodeList7.retainAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        boolean boolean28 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList7);
        javafx.scene.Node[] nodeArray30 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList31 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList31, nodeArray30);
        boolean boolean33 = nodeList31.isEmpty();
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood36.getAll();
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        int int44 = nodeList40.lastIndexOf((java.lang.Object) 100);
        int int46 = nodeList40.lastIndexOf((java.lang.Object) 10);
        boolean boolean47 = false; // flaky: nodeList38.retainAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        boolean boolean48 = false; // flaky: nodeList31.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        boolean boolean49 = false; // flaky: nodeList38.isEmpty();
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean54 = false; // flaky: nodeList53.isEmpty();
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        Interface.WoodTable woodTable60 = null;
        Interface.WoodTotalValues woodTotalValues61 = null;
        Interface.AddWood addWood62 = null; // flaky: new Interface.AddWood(woodTable60, woodTotalValues61);
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: addWood62.getAll();
        boolean boolean64 = false; // flaky: nodeList57.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList63);
        javafx.scene.Node[] nodeArray66 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList67 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList67, nodeArray66);
        boolean boolean69 = nodeList67.isEmpty();
        int int71 = nodeList67.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable72 = null;
        Interface.WoodTotalValues woodTotalValues73 = null;
        Interface.AddWood addWood74 = null; // flaky: new Interface.AddWood(woodTable72, woodTotalValues73);
        java.util.ArrayList<javafx.scene.Node> nodeList75 = null; // flaky: addWood74.getAll();
        boolean boolean77 = false; // flaky: nodeList75.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node79 = null;
        javafx.scene.Node node80 = null; // flaky: nodeList75.set((int) (byte) 1, node79);
        boolean boolean81 = nodeList67.add(node80);
// flaky:         nodeList57.add(1, node80);
        javafx.scene.Node node83 = null; // flaky: nodeList53.set(0, node80);
        boolean boolean84 = false; // flaky: nodeList38.add(node80);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node85 = nodeList7.set((int) (byte) 1, node80);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertNotNull(node83);
// flaky:         org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: woodTotalValues2.getAll();
// flaky:         woodTotalValues2.redraw((double) (short) 100, 10.0d);
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
// flaky:         woodTotalValues2.redraw(10.0d, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues2.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        boolean boolean6 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream7 = nodeList1.stream();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node9 = nodeList1.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeStream7);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
// flaky:         woodTotalValues1.redraw((double) (short) 100, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues1.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        boolean boolean27 = nodeList24.isEmpty();
        nodeList24.clear();
        boolean boolean29 = nodeList6.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null; // flaky: new Interface.WoodTotalValues(woodTable31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: woodTotalValues32.getAll();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = nodeList24.addAll((int) (byte) 100, (java.util.Collection<javafx.scene.Node>) nodeList33);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node15 = nodeList1.get(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator22 = nodeList17.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor24 = nodeList17.listIterator((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator22);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = nodeList25.remove(obj27);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        boolean boolean35 = nodeList25.equals((java.lang.Object) nodeList30);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood38.getAll();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        boolean boolean44 = nodeList42.isEmpty();
        int int46 = nodeList42.lastIndexOf((java.lang.Object) 100);
        int int48 = nodeList42.lastIndexOf((java.lang.Object) 10);
        boolean boolean49 = false; // flaky: nodeList40.retainAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        javafx.scene.Node[] nodeArray50 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList51 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList51, nodeArray50);
        java.lang.Object obj53 = null;
        boolean boolean54 = nodeList51.remove(obj53);
        boolean boolean55 = nodeList51.isEmpty();
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        Interface.WoodTable woodTable60 = null;
        Interface.WoodTotalValues woodTotalValues61 = null;
        Interface.AddWood addWood62 = null; // flaky: new Interface.AddWood(woodTable60, woodTotalValues61);
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: addWood62.getAll();
        boolean boolean64 = false; // flaky: nodeList57.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList63);
        int int66 = nodeList57.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray68 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList69 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList69, nodeArray68);
        boolean boolean71 = nodeList69.isEmpty();
        int int73 = nodeList69.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable74 = null;
        Interface.WoodTotalValues woodTotalValues75 = null;
        Interface.AddWood addWood76 = null; // flaky: new Interface.AddWood(woodTable74, woodTotalValues75);
        java.util.ArrayList<javafx.scene.Node> nodeList77 = null; // flaky: addWood76.getAll();
        boolean boolean79 = false; // flaky: nodeList77.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node81 = null;
        javafx.scene.Node node82 = null; // flaky: nodeList77.set((int) (byte) 1, node81);
        boolean boolean83 = nodeList69.add(node82);
        javafx.scene.Node node84 = null; // flaky: nodeList57.set((int) (short) 0, node82);
        boolean boolean85 = nodeList51.add(node84);
        boolean boolean87 = nodeList51.remove((java.lang.Object) 100L);
        boolean boolean88 = nodeList42.remove((java.lang.Object) boolean87);
        boolean boolean89 = nodeList25.addAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        boolean boolean90 = false; // flaky: nodeList4.equals((java.lang.Object) nodeList42);
        java.util.stream.Stream<javafx.scene.Node> nodeStream91 = nodeList42.parallelStream();
        int int92 = nodeList42.size();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
// flaky:         org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(nodeStream91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
// flaky:         woodTotalValues3.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: woodTotalValues3.getAll();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node11 = null; // flaky: nodeList9.get(5);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        Interface.WoodTable woodTable17 = null;
        Interface.WoodTotalValues woodTotalValues18 = null;
        Interface.AddWood addWood19 = null; // flaky: new Interface.AddWood(woodTable17, woodTotalValues18);
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood19.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood19.getAll();
        int int22 = 0; // flaky: nodeList21.size();
        boolean boolean23 = false; // flaky: nodeList7.containsAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        boolean boolean27 = nodeList25.isEmpty();
        int int29 = nodeList25.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean35 = false; // flaky: nodeList33.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node37 = null;
        javafx.scene.Node node38 = null; // flaky: nodeList33.set((int) (byte) 1, node37);
        boolean boolean39 = nodeList25.add(node38);
        javafx.scene.Node[] nodeArray40 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList41 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList41, nodeArray40);
        java.lang.Object obj43 = null;
        boolean boolean44 = nodeList41.remove(obj43);
        boolean boolean45 = nodeList25.retainAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        nodeList41.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor47 = nodeList41.listIterator();
        boolean boolean48 = false; // flaky: nodeList21.containsAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator49 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList41.replaceAll(nodeUnaryOperator49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(nodeItor47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        java.util.ListIterator<javafx.scene.Node> nodeItor12 = nodeList1.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList15 = nodeList1.subList((int) '4', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(52) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
        org.junit.Assert.assertNotNull(nodeItor12);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        boolean boolean13 = false; // flaky: nodeList12.isEmpty();
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        Interface.WoodTable woodTable19 = null;
        Interface.WoodTotalValues woodTotalValues20 = null;
        Interface.AddWood addWood21 = null; // flaky: new Interface.AddWood(woodTable19, woodTotalValues20);
        java.util.ArrayList<javafx.scene.Node> nodeList22 = null; // flaky: addWood21.getAll();
        boolean boolean23 = false; // flaky: nodeList16.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList22);
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        boolean boolean28 = nodeList26.isEmpty();
        int int30 = nodeList26.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        boolean boolean36 = false; // flaky: nodeList34.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node38 = null;
        javafx.scene.Node node39 = null; // flaky: nodeList34.set((int) (byte) 1, node38);
        boolean boolean40 = nodeList26.add(node39);
// flaky:         nodeList16.add(1, node39);
        javafx.scene.Node node42 = null; // flaky: nodeList12.set(0, node39);
        int int43 = nodeList1.indexOf((java.lang.Object) 0);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        Interface.WoodTable woodTable48 = null;
        Interface.WoodTotalValues woodTotalValues49 = null;
        Interface.AddWood addWood50 = null; // flaky: new Interface.AddWood(woodTable48, woodTotalValues49);
        java.util.ArrayList<javafx.scene.Node> nodeList51 = null; // flaky: addWood50.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList52 = null; // flaky: addWood50.getAll();
        javafx.scene.Node[] nodeArray53 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList54 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList54, nodeArray53);
        boolean boolean56 = nodeList54.isEmpty();
        int int58 = nodeList54.lastIndexOf((java.lang.Object) 100);
        int int60 = nodeList54.lastIndexOf((java.lang.Object) 10);
        boolean boolean61 = false; // flaky: nodeList52.retainAll((java.util.Collection<javafx.scene.Node>) nodeList54);
        boolean boolean62 = false; // flaky: nodeList45.removeAll((java.util.Collection<javafx.scene.Node>) nodeList52);
        boolean boolean63 = false; // flaky: nodeList52.isEmpty();
        Interface.WoodTable woodTable64 = null;
        Interface.WoodTotalValues woodTotalValues65 = null;
        Interface.AddWood addWood66 = null; // flaky: new Interface.AddWood(woodTable64, woodTotalValues65);
        java.util.ArrayList<javafx.scene.Node> nodeList67 = null; // flaky: addWood66.getAll();
        boolean boolean68 = false; // flaky: nodeList67.isEmpty();
        javafx.scene.Node[] nodeArray70 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList71 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList71, nodeArray70);
        Interface.WoodTable woodTable74 = null;
        Interface.WoodTotalValues woodTotalValues75 = null;
        Interface.AddWood addWood76 = null; // flaky: new Interface.AddWood(woodTable74, woodTotalValues75);
        java.util.ArrayList<javafx.scene.Node> nodeList77 = null; // flaky: addWood76.getAll();
        boolean boolean78 = false; // flaky: nodeList71.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList77);
        javafx.scene.Node[] nodeArray80 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList81 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList81, nodeArray80);
        boolean boolean83 = nodeList81.isEmpty();
        int int85 = nodeList81.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable86 = null;
        Interface.WoodTotalValues woodTotalValues87 = null;
        Interface.AddWood addWood88 = null; // flaky: new Interface.AddWood(woodTable86, woodTotalValues87);
        java.util.ArrayList<javafx.scene.Node> nodeList89 = null; // flaky: addWood88.getAll();
        boolean boolean91 = false; // flaky: nodeList89.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node93 = null;
        javafx.scene.Node node94 = null; // flaky: nodeList89.set((int) (byte) 1, node93);
        boolean boolean95 = nodeList81.add(node94);
// flaky:         nodeList71.add(1, node94);
        javafx.scene.Node node97 = null; // flaky: nodeList67.set(0, node94);
        boolean boolean98 = false; // flaky: nodeList52.add(node94);
        boolean boolean99 = nodeList1.add(node94);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList22);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList51);
// flaky:         org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList77);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
// flaky:         org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
// flaky:         org.junit.Assert.assertNotNull(node97);
// flaky:         org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        javafx.scene.Node[] nodeArray8 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList9 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList9, nodeArray8);
        boolean boolean11 = nodeList9.isEmpty();
        int int13 = nodeList9.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        boolean boolean19 = false; // flaky: nodeList17.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node21 = null;
        javafx.scene.Node node22 = null; // flaky: nodeList17.set((int) (byte) 1, node21);
        boolean boolean23 = nodeList9.add(node22);
        java.util.stream.Stream<javafx.scene.Node> nodeStream24 = nodeList9.stream();
        javafx.scene.Node node25 = null;
        boolean boolean26 = nodeList9.add(node25);
        boolean boolean27 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList9);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList9.replaceAll(nodeUnaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeStream24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = nodeList18.remove(obj20);
        boolean boolean22 = nodeList18.isEmpty();
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = nodeList18.toArray(strArray25);
        javafx.scene.Node[] nodeArray27 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList28 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList28, nodeArray27);
        boolean boolean30 = nodeList28.isEmpty();
        int int32 = nodeList28.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable33 = null;
        Interface.WoodTotalValues woodTotalValues34 = null;
        Interface.AddWood addWood35 = null; // flaky: new Interface.AddWood(woodTable33, woodTotalValues34);
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood35.getAll();
        boolean boolean38 = false; // flaky: nodeList36.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node40 = null;
        javafx.scene.Node node41 = null; // flaky: nodeList36.set((int) (byte) 1, node40);
        boolean boolean42 = nodeList28.add(node41);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        Interface.WoodTable woodTable48 = null;
        Interface.WoodTotalValues woodTotalValues49 = null;
        Interface.AddWood addWood50 = null; // flaky: new Interface.AddWood(woodTable48, woodTotalValues49);
        java.util.ArrayList<javafx.scene.Node> nodeList51 = null; // flaky: addWood50.getAll();
        boolean boolean52 = false; // flaky: nodeList45.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList51);
        int int54 = nodeList45.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        boolean boolean59 = nodeList57.isEmpty();
        int int61 = nodeList57.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable62 = null;
        Interface.WoodTotalValues woodTotalValues63 = null;
        Interface.AddWood addWood64 = null; // flaky: new Interface.AddWood(woodTable62, woodTotalValues63);
        java.util.ArrayList<javafx.scene.Node> nodeList65 = null; // flaky: addWood64.getAll();
        boolean boolean67 = false; // flaky: nodeList65.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node69 = null;
        javafx.scene.Node node70 = null; // flaky: nodeList65.set((int) (byte) 1, node69);
        boolean boolean71 = nodeList57.add(node70);
        javafx.scene.Node node72 = null; // flaky: nodeList45.set((int) (short) 0, node70);
        javafx.scene.Node node73 = nodeList28.set((int) (byte) 0, node70);
        boolean boolean74 = nodeList18.add(node73);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node75 = nodeList1.set((int) (short) 10, node73);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
// flaky:         org.junit.Assert.assertNotNull(node72);
// flaky:         org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList13.isEmpty();
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        boolean boolean24 = false; // flaky: nodeList17.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList23);
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        boolean boolean29 = nodeList27.isEmpty();
        int int31 = nodeList27.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable32 = null;
        Interface.WoodTotalValues woodTotalValues33 = null;
        Interface.AddWood addWood34 = null; // flaky: new Interface.AddWood(woodTable32, woodTotalValues33);
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood34.getAll();
        boolean boolean37 = false; // flaky: nodeList35.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node39 = null;
        javafx.scene.Node node40 = null; // flaky: nodeList35.set((int) (byte) 1, node39);
        boolean boolean41 = nodeList27.add(node40);
// flaky:         nodeList17.add(1, node40);
        javafx.scene.Node node43 = null; // flaky: nodeList13.set(0, node40);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node44 = nodeList1.set((int) ' ', node40);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable8 = null;
        Interface.WoodTotalValues woodTotalValues9 = null;
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable8, woodTotalValues9);
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood10.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood10.getAll();
        javafx.scene.Node[] nodeArray13 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList14 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList14, nodeArray13);
        boolean boolean16 = nodeList14.isEmpty();
        int int18 = nodeList14.lastIndexOf((java.lang.Object) 100);
        int int20 = nodeList14.lastIndexOf((java.lang.Object) 10);
        boolean boolean21 = false; // flaky: nodeList12.retainAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        boolean boolean22 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood36.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood36.getAll();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        boolean boolean44 = nodeList42.isEmpty();
        int int46 = nodeList42.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable47 = null;
        Interface.WoodTotalValues woodTotalValues48 = null;
        Interface.AddWood addWood49 = null; // flaky: new Interface.AddWood(woodTable47, woodTotalValues48);
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: addWood49.getAll();
        boolean boolean52 = false; // flaky: nodeList50.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node54 = null;
        javafx.scene.Node node55 = null; // flaky: nodeList50.set((int) (byte) 1, node54);
        boolean boolean56 = nodeList42.add(node55);
        javafx.scene.Node node57 = null; // flaky: nodeList39.set((int) (short) 0, node55);
        javafx.scene.Node[] nodeArray58 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList59 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList59, nodeArray58);
        java.lang.Object obj61 = null;
        boolean boolean62 = nodeList59.remove(obj61);
        javafx.scene.Node[] nodeArray63 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList64 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList64, nodeArray63);
        java.lang.Object obj66 = null;
        boolean boolean67 = nodeList64.remove(obj66);
        javafx.scene.Node[] nodeArray68 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList69 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList69, nodeArray68);
        Interface.WoodTable woodTable72 = null;
        Interface.WoodTotalValues woodTotalValues73 = null;
        Interface.AddWood addWood74 = null; // flaky: new Interface.AddWood(woodTable72, woodTotalValues73);
        java.util.ArrayList<javafx.scene.Node> nodeList75 = null; // flaky: addWood74.getAll();
        boolean boolean76 = false; // flaky: nodeList69.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList75);
        javafx.scene.Node[] nodeArray78 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList79 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList79, nodeArray78);
        boolean boolean81 = nodeList79.isEmpty();
        int int83 = nodeList79.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable84 = null;
        Interface.WoodTotalValues woodTotalValues85 = null;
        Interface.AddWood addWood86 = null; // flaky: new Interface.AddWood(woodTable84, woodTotalValues85);
        java.util.ArrayList<javafx.scene.Node> nodeList87 = null; // flaky: addWood86.getAll();
        boolean boolean89 = false; // flaky: nodeList87.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node91 = null;
        javafx.scene.Node node92 = null; // flaky: nodeList87.set((int) (byte) 1, node91);
        boolean boolean93 = nodeList79.add(node92);
// flaky:         nodeList69.add(1, node92);
        boolean boolean95 = nodeList64.retainAll((java.util.Collection<javafx.scene.Node>) nodeList69);
        boolean boolean96 = nodeList59.retainAll((java.util.Collection<javafx.scene.Node>) nodeList69);
        boolean boolean97 = false; // flaky: nodeList39.retainAll((java.util.Collection<javafx.scene.Node>) nodeList59);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = false; // flaky: nodeList26.addAll(10, (java.util.Collection<javafx.scene.Node>) nodeList39);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.replaceAll(nodeUnaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean5 = false; // flaky: nodeList3.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node7 = null;
        javafx.scene.Node node8 = null; // flaky: nodeList3.set((int) (byte) 1, node7);
        java.util.Iterator<javafx.scene.Node> nodeItor9 = null; // flaky: nodeList3.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor11 = null; // flaky: nodeList3.listIterator((int) '4');
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertNotNull(node8);
// flaky:         org.junit.Assert.assertNotNull(nodeItor9);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor18 = null; // flaky: nodeList7.listIterator((int) 'a');
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = nodeList32.remove(obj34);
        int int36 = nodeList32.size();
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean45 = false; // flaky: nodeList38.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList44);
        boolean boolean46 = nodeList32.retainAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        boolean boolean47 = nodeList1.contains((java.lang.Object) nodeList32);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node49 = nodeList32.remove((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
// flaky:         woodTotalValues1.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: woodTotalValues1.getAll();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node7 = null; // flaky: nodeList5.get((int) (short) -1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood33.getAll();
        boolean boolean37 = false; // flaky: nodeList22.addAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator38 = nodeList22.spliterator();
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        boolean boolean43 = nodeList22.containsAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTotalValues woodTotalValues45 = null;
        Interface.AddWood addWood46 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood46.getAll();
        boolean boolean49 = false; // flaky: nodeList47.equals((java.lang.Object) (byte) 1);
        javafx.css.Styleable[] styleableArray50 = new javafx.css.Styleable[] {};
        javafx.css.Styleable[] styleableArray51 = null; // flaky: nodeList47.toArray(styleableArray50);
        int int52 = nodeList22.indexOf((java.lang.Object) styleableArray50);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node54 = nodeList22.remove(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(styleableArray50);
// flaky:         org.junit.Assert.assertNotNull(styleableArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        boolean boolean25 = nodeList21.isEmpty();
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean34 = false; // flaky: nodeList27.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList33);
        int int36 = nodeList27.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray38 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList39 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList39, nodeArray38);
        boolean boolean41 = nodeList39.isEmpty();
        int int43 = nodeList39.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTotalValues woodTotalValues45 = null;
        Interface.AddWood addWood46 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood46.getAll();
        boolean boolean49 = false; // flaky: nodeList47.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node51 = null;
        javafx.scene.Node node52 = null; // flaky: nodeList47.set((int) (byte) 1, node51);
        boolean boolean53 = nodeList39.add(node52);
        javafx.scene.Node node54 = null; // flaky: nodeList27.set((int) (short) 0, node52);
        boolean boolean55 = nodeList21.add(node54);
        boolean boolean57 = nodeList21.remove((java.lang.Object) 100L);
        int int58 = 0; // flaky: nodeList8.lastIndexOf((java.lang.Object) nodeList21);
        java.lang.Object[] objArray59 = nodeList21.toArray();
        Interface.WoodTable woodTable60 = null;
        Interface.WoodTotalValues woodTotalValues61 = null;
        Interface.AddWood addWood62 = null; // flaky: new Interface.AddWood(woodTable60, woodTotalValues61);
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: addWood62.getAll();
        boolean boolean64 = false; // flaky: nodeList63.isEmpty();
        boolean boolean66 = false; // flaky: nodeList63.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor67 = null; // flaky: nodeList63.iterator();
        javafx.scene.Node[] nodeArray68 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList69 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList69, nodeArray68);
        boolean boolean71 = nodeList69.isEmpty();
        boolean boolean72 = nodeList69.isEmpty();
        nodeList69.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor75 = nodeList69.listIterator(0);
        Interface.WoodTable woodTable76 = null;
        Interface.WoodTotalValues woodTotalValues77 = null;
        Interface.AddWood addWood78 = null; // flaky: new Interface.AddWood(woodTable76, woodTotalValues77);
        java.util.ArrayList<javafx.scene.Node> nodeList79 = null; // flaky: addWood78.getAll();
        boolean boolean81 = false; // flaky: nodeList79.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node83 = null;
        javafx.scene.Node node84 = null; // flaky: nodeList79.set((int) (byte) 1, node83);
        javafx.css.Styleable[] styleableArray85 = new javafx.css.Styleable[] { node84 };
        Interface.WoodTable woodTable86 = null;
        Interface.WoodTotalValues woodTotalValues87 = null;
        Interface.AddWood addWood88 = null; // flaky: new Interface.AddWood(woodTable86, woodTotalValues87);
        java.util.ArrayList<javafx.scene.Node> nodeList89 = null; // flaky: addWood88.getAll();
        boolean boolean91 = false; // flaky: nodeList89.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node93 = null;
        javafx.scene.Node node94 = null; // flaky: nodeList89.set((int) (byte) 1, node93);
        javafx.css.Styleable[] styleableArray95 = new javafx.css.Styleable[] { node94 };
        javafx.css.Styleable[][] styleableArray96 = new javafx.css.Styleable[][] { styleableArray85, styleableArray95 };
        javafx.css.Styleable[][] styleableArray97 = nodeList69.toArray(styleableArray96);
        boolean boolean98 = false; // flaky: nodeList63.addAll((java.util.Collection<javafx.scene.Node>) nodeList69);
        boolean boolean99 = nodeList21.equals((java.lang.Object) nodeList69);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(objArray59);
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor67);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(nodeItor75);
// flaky:         org.junit.Assert.assertNotNull(nodeList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(styleableArray85);
// flaky:         org.junit.Assert.assertNotNull(nodeList89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
// flaky:         org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(styleableArray95);
        org.junit.Assert.assertNotNull(styleableArray96);
        org.junit.Assert.assertNotNull(styleableArray97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = nodeList25.remove(obj27);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        boolean boolean35 = nodeList25.equals((java.lang.Object) nodeList30);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
// flaky:         addWood38.redraw((double) 10.0f, (double) 0L);
        boolean boolean43 = nodeList25.contains((java.lang.Object) 10.0f);
        boolean boolean44 = false; // flaky: nodeList19.contains((java.lang.Object) 10.0f);
        java.util.ListIterator<javafx.scene.Node> nodeItor46 = null; // flaky: nodeList19.listIterator((int) (byte) 1);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor46);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean25 = false; // flaky: nodeList18.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList24);
        int int27 = nodeList18.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = nodeList30.add(node43);
        javafx.scene.Node node45 = null; // flaky: nodeList18.set((int) (short) 0, node43);
        javafx.scene.Node node46 = nodeList1.set((int) (byte) 0, node43);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node48 = nodeList1.get(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertNotNull(node45);
// flaky:         org.junit.Assert.assertNotNull(node46);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node10 = null; // flaky: nodeList8.remove(11);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = nodeList25.remove(obj27);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        boolean boolean35 = nodeList25.equals((java.lang.Object) nodeList30);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
// flaky:         addWood38.redraw((double) 10.0f, (double) 0L);
        boolean boolean43 = nodeList25.contains((java.lang.Object) 10.0f);
        boolean boolean44 = false; // flaky: nodeList19.contains((java.lang.Object) 10.0f);
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        java.lang.Object obj48 = null;
        boolean boolean49 = nodeList46.remove(obj48);
        javafx.scene.Node[] nodeArray50 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList51 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList51, nodeArray50);
        Interface.WoodTable woodTable54 = null;
        Interface.WoodTotalValues woodTotalValues55 = null;
        Interface.AddWood addWood56 = null; // flaky: new Interface.AddWood(woodTable54, woodTotalValues55);
        java.util.ArrayList<javafx.scene.Node> nodeList57 = null; // flaky: addWood56.getAll();
        boolean boolean58 = false; // flaky: nodeList51.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList57);
        java.util.stream.Stream<javafx.scene.Node> nodeStream59 = null; // flaky: nodeList57.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator60 = null; // flaky: nodeList57.spliterator();
        javafx.scene.Node[] nodeArray61 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList62 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList62, nodeArray61);
        java.lang.Object obj64 = null;
        boolean boolean65 = nodeList62.remove(obj64);
        boolean boolean66 = false; // flaky: nodeList57.removeAll((java.util.Collection<javafx.scene.Node>) nodeList62);
        int int67 = nodeList46.lastIndexOf((java.lang.Object) nodeList62);
        boolean boolean68 = false; // flaky: nodeList19.addAll((java.util.Collection<javafx.scene.Node>) nodeList46);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList57);
// flaky:         org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream59);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator60);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        int int5 = 0; // flaky: nodeList4.size();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        boolean boolean9 = nodeList7.isEmpty();
        boolean boolean10 = nodeList7.isEmpty();
        nodeList7.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor13 = nodeList7.listIterator(0);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        boolean boolean19 = false; // flaky: nodeList17.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node21 = null;
        javafx.scene.Node node22 = null; // flaky: nodeList17.set((int) (byte) 1, node21);
        javafx.css.Styleable[] styleableArray23 = new javafx.css.Styleable[] { node22 };
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean29 = false; // flaky: nodeList27.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node31 = null;
        javafx.scene.Node node32 = null; // flaky: nodeList27.set((int) (byte) 1, node31);
        javafx.css.Styleable[] styleableArray33 = new javafx.css.Styleable[] { node32 };
        javafx.css.Styleable[][] styleableArray34 = new javafx.css.Styleable[][] { styleableArray23, styleableArray33 };
        javafx.css.Styleable[][] styleableArray35 = nodeList7.toArray(styleableArray34);
        boolean boolean36 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList39 = nodeList7.subList((int) (short) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeItor13);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(styleableArray23);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(styleableArray33);
        org.junit.Assert.assertNotNull(styleableArray34);
        org.junit.Assert.assertNotNull(styleableArray35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = nodeList32.remove(obj34);
        int int36 = nodeList32.size();
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean45 = false; // flaky: nodeList38.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList44);
        boolean boolean46 = nodeList32.retainAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        boolean boolean47 = nodeList1.contains((java.lang.Object) nodeList32);
        javafx.scene.Node[] nodeArray48 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList49 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList49, nodeArray48);
        java.lang.Object obj51 = null;
        boolean boolean52 = nodeList49.remove(obj51);
        boolean boolean53 = nodeList49.isEmpty();
        javafx.scene.Node[] nodeArray54 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList55 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList55, nodeArray54);
        Interface.WoodTable woodTable58 = null;
        Interface.WoodTotalValues woodTotalValues59 = null;
        Interface.AddWood addWood60 = null; // flaky: new Interface.AddWood(woodTable58, woodTotalValues59);
        java.util.ArrayList<javafx.scene.Node> nodeList61 = null; // flaky: addWood60.getAll();
        boolean boolean62 = false; // flaky: nodeList55.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList61);
        int int64 = nodeList55.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray66 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList67 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList67, nodeArray66);
        boolean boolean69 = nodeList67.isEmpty();
        int int71 = nodeList67.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable72 = null;
        Interface.WoodTotalValues woodTotalValues73 = null;
        Interface.AddWood addWood74 = null; // flaky: new Interface.AddWood(woodTable72, woodTotalValues73);
        java.util.ArrayList<javafx.scene.Node> nodeList75 = null; // flaky: addWood74.getAll();
        boolean boolean77 = false; // flaky: nodeList75.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node79 = null;
        javafx.scene.Node node80 = null; // flaky: nodeList75.set((int) (byte) 1, node79);
        boolean boolean81 = nodeList67.add(node80);
        javafx.scene.Node node82 = null; // flaky: nodeList55.set((int) (short) 0, node80);
        boolean boolean83 = nodeList49.add(node82);
        boolean boolean85 = nodeList49.remove((java.lang.Object) 100L);
        int int86 = nodeList1.indexOf((java.lang.Object) 100L);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList61);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node24 = null; // flaky: nodeList21.remove((int) (short) -1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor4 = nodeList1.iterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(nodeItor4);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: addWood2.getAll();
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTable woodTable7 = null;
        Interface.WoodTotalValues woodTotalValues8 = null; // flaky: new Interface.WoodTotalValues(woodTable7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: woodTotalValues8.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: woodTotalValues8.getAll();
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues8);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
// flaky:         addWood14.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood14.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood14.getAll();
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood23.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood23.getAll();
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
// flaky:         addWood29.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood29.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood29.getAll();
        Interface.AddWood[] addWoodArray36 = new Interface.AddWood[] { addWood11, addWood14, addWood23, addWood29 };
        // The following exception was thrown during execution in test generation
        try {
            Interface.AddWood[] addWoodArray37 = null; // flaky: nodeList5.toArray(addWoodArray36);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertNotNull(addWoodArray36);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList35.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList41);
        java.util.stream.Stream<javafx.scene.Node> nodeStream43 = null; // flaky: nodeList41.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator44 = null; // flaky: nodeList41.spliterator();
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        boolean boolean51 = nodeList46.isEmpty();
        boolean boolean52 = false; // flaky: nodeList41.contains((java.lang.Object) boolean51);
        boolean boolean53 = false; // flaky: nodeList7.addAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        Interface.WoodTable woodTable54 = null;
        Interface.WoodTotalValues woodTotalValues55 = null;
        Interface.AddWood addWood56 = null; // flaky: new Interface.AddWood(woodTable54, woodTotalValues55);
        java.util.ArrayList<javafx.scene.Node> nodeList57 = null; // flaky: addWood56.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood56.getAll();
        javafx.scene.Node[] nodeArray59 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList60 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList60, nodeArray59);
        boolean boolean62 = nodeList60.isEmpty();
        int int64 = nodeList60.lastIndexOf((java.lang.Object) 100);
        int int66 = nodeList60.lastIndexOf((java.lang.Object) 10);
        boolean boolean67 = false; // flaky: nodeList58.retainAll((java.util.Collection<javafx.scene.Node>) nodeList60);
        Interface.WoodTable woodTable68 = null;
        Interface.WoodTotalValues woodTotalValues69 = null;
        Interface.AddWood addWood70 = null; // flaky: new Interface.AddWood(woodTable68, woodTotalValues69);
        java.util.ArrayList<javafx.scene.Node> nodeList71 = null; // flaky: addWood70.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList72 = null; // flaky: addWood70.getAll();
        boolean boolean73 = false; // flaky: nodeList60.addAll((java.util.Collection<javafx.scene.Node>) nodeList72);
        boolean boolean74 = false; // flaky: nodeList7.addAll((java.util.Collection<javafx.scene.Node>) nodeList72);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream43);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator44);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList57);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList71);
// flaky:         org.junit.Assert.assertNotNull(nodeList72);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues3.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null; // flaky: new Interface.WoodTotalValues(woodTable35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: woodTotalValues36.getAll();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = false; // flaky: nodeList7.addAll((int) (short) 10, (java.util.Collection<javafx.scene.Node>) nodeList37);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.ListIterator<javafx.scene.Node> nodeItor11 = nodeList1.listIterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeItor11);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean28 = false; // flaky: nodeList27.isEmpty();
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        boolean boolean33 = false; // flaky: nodeList32.isEmpty();
        javafx.scene.Node[] nodeArray35 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList36 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList36, nodeArray35);
        Interface.WoodTable woodTable39 = null;
        Interface.WoodTotalValues woodTotalValues40 = null;
        Interface.AddWood addWood41 = null; // flaky: new Interface.AddWood(woodTable39, woodTotalValues40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: addWood41.getAll();
        boolean boolean43 = false; // flaky: nodeList36.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList42);
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable51 = null;
        Interface.WoodTotalValues woodTotalValues52 = null;
        Interface.AddWood addWood53 = null; // flaky: new Interface.AddWood(woodTable51, woodTotalValues52);
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood53.getAll();
        boolean boolean56 = false; // flaky: nodeList54.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node58 = null;
        javafx.scene.Node node59 = null; // flaky: nodeList54.set((int) (byte) 1, node58);
        boolean boolean60 = nodeList46.add(node59);
// flaky:         nodeList36.add(1, node59);
        javafx.scene.Node node62 = null; // flaky: nodeList32.set(0, node59);
        boolean boolean63 = false; // flaky: nodeList27.add(node62);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node64 = nodeList6.set((int) (short) 100, node62);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
// flaky:         org.junit.Assert.assertNotNull(node62);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.ListIterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList8.listIterator();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
        boolean boolean32 = false; // flaky: nodeList30.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node34 = null;
        javafx.scene.Node node35 = null; // flaky: nodeList30.set((int) (byte) 1, node34);
        boolean boolean36 = nodeList22.add(node35);
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood39.getAll();
        javafx.scene.Node[] nodeArray42 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList43 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList43, nodeArray42);
        boolean boolean45 = nodeList43.isEmpty();
        int int47 = nodeList43.lastIndexOf((java.lang.Object) 100);
        int int49 = nodeList43.lastIndexOf((java.lang.Object) 10);
        boolean boolean50 = false; // flaky: nodeList41.retainAll((java.util.Collection<javafx.scene.Node>) nodeList43);
        boolean boolean51 = nodeList22.removeAll((java.util.Collection<javafx.scene.Node>) nodeList43);
        Interface.WoodTable woodTable52 = null;
        Interface.WoodTotalValues woodTotalValues53 = null;
        Interface.AddWood addWood54 = null; // flaky: new Interface.AddWood(woodTable52, woodTotalValues53);
        java.util.ArrayList<javafx.scene.Node> nodeList55 = null; // flaky: addWood54.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList56 = null; // flaky: addWood54.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList57 = null; // flaky: addWood54.getAll();
        boolean boolean58 = false; // flaky: nodeList43.addAll((java.util.Collection<javafx.scene.Node>) nodeList57);
        boolean boolean59 = false; // flaky: nodeList8.removeAll((java.util.Collection<javafx.scene.Node>) nodeList43);
        javafx.scene.Node[] nodeArray60 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList61 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList61, nodeArray60);
        boolean boolean63 = nodeList61.isEmpty();
        int int65 = nodeList61.lastIndexOf((java.lang.Object) 100);
        javafx.scene.Node[] nodeArray66 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList67 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList67, nodeArray66);
        boolean boolean69 = nodeList67.isEmpty();
        int int71 = nodeList67.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable72 = null;
        Interface.WoodTotalValues woodTotalValues73 = null;
        Interface.AddWood addWood74 = null; // flaky: new Interface.AddWood(woodTable72, woodTotalValues73);
        java.util.ArrayList<javafx.scene.Node> nodeList75 = null; // flaky: addWood74.getAll();
        boolean boolean77 = false; // flaky: nodeList75.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node79 = null;
        javafx.scene.Node node80 = null; // flaky: nodeList75.set((int) (byte) 1, node79);
        boolean boolean81 = nodeList67.add(node80);
        javafx.scene.Node[] nodeArray82 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList83 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList83, nodeArray82);
        java.lang.Object obj85 = null;
        boolean boolean86 = nodeList83.remove(obj85);
        boolean boolean87 = nodeList67.retainAll((java.util.Collection<javafx.scene.Node>) nodeList83);
        boolean boolean88 = nodeList61.addAll((java.util.Collection<javafx.scene.Node>) nodeList67);
        int int90 = nodeList61.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean91 = false; // flaky: nodeList8.removeAll((java.util.Collection<javafx.scene.Node>) nodeList61);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList55);
// flaky:         org.junit.Assert.assertNotNull(nodeList56);
// flaky:         org.junit.Assert.assertNotNull(nodeList57);
// flaky:         org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.Iterator<javafx.scene.Node> nodeItor8 = nodeList1.iterator();
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        boolean boolean18 = false; // flaky: nodeList11.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList17);
        int int20 = nodeList11.indexOf((java.lang.Object) true);
        javafx.scene.Node node22 = null; // flaky: nodeList11.get((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.add((int) (byte) 10, node22);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        int int5 = 0; // flaky: nodeList4.size();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node7 = null; // flaky: nodeList4.get((int) (short) 100);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean22 = false; // flaky: nodeList15.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList21);
        int int24 = nodeList15.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        java.lang.Object obj28 = null;
        boolean boolean29 = nodeList26.remove(obj28);
        boolean boolean30 = nodeList26.isEmpty();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray34 = nodeList26.toArray(strArray33);
        boolean boolean35 = nodeList15.equals((java.lang.Object) strArray34);
        int int36 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) boolean35);
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean45 = false; // flaky: nodeList38.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList44);
        int int47 = nodeList38.indexOf((java.lang.Object) true);
        boolean boolean48 = false; // flaky: nodeList4.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        java.util.ListIterator<javafx.scene.Node> nodeItor49 = nodeList38.listIterator();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeItor49);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        int int17 = 0; // flaky: nodeList7.size();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator18 = null; // flaky: nodeList7.spliterator();
// flaky:         nodeList7.clear();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator18);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        java.util.stream.Stream<javafx.scene.Node> nodeStream16 = nodeList1.stream();
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
// flaky:         addWood20.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood20.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood20.getAll();
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        boolean boolean32 = false; // flaky: nodeList31.isEmpty();
        Interface.WoodTable woodTable33 = null;
        Interface.WoodTotalValues woodTotalValues34 = null;
        Interface.AddWood addWood35 = null; // flaky: new Interface.AddWood(woodTable33, woodTotalValues34);
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood35.getAll();
        boolean boolean37 = false; // flaky: nodeList36.isEmpty();
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        Interface.WoodTable woodTable43 = null;
        Interface.WoodTotalValues woodTotalValues44 = null;
        Interface.AddWood addWood45 = null; // flaky: new Interface.AddWood(woodTable43, woodTotalValues44);
        java.util.ArrayList<javafx.scene.Node> nodeList46 = null; // flaky: addWood45.getAll();
        boolean boolean47 = false; // flaky: nodeList40.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList46);
        javafx.scene.Node[] nodeArray49 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList50 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList50, nodeArray49);
        boolean boolean52 = nodeList50.isEmpty();
        int int54 = nodeList50.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTotalValues woodTotalValues56 = null;
        Interface.AddWood addWood57 = null; // flaky: new Interface.AddWood(woodTable55, woodTotalValues56);
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood57.getAll();
        boolean boolean60 = false; // flaky: nodeList58.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node62 = null;
        javafx.scene.Node node63 = null; // flaky: nodeList58.set((int) (byte) 1, node62);
        boolean boolean64 = nodeList50.add(node63);
// flaky:         nodeList40.add(1, node63);
        javafx.scene.Node node66 = null; // flaky: nodeList36.set(0, node63);
        boolean boolean67 = false; // flaky: nodeList31.add(node66);
        javafx.scene.Node node68 = null; // flaky: nodeList26.set((int) (short) 1, node66);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node69 = nodeList1.set((int) (byte) -1, node66);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeStream16);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertNotNull(node66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray9 = nodeList1.toArray(strArray8);
        java.util.ListIterator<javafx.scene.Node> nodeItor10 = nodeList1.listIterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(nodeItor10);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        int int5 = nodeList1.size();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        boolean boolean15 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList7);
        int int17 = nodeList1.lastIndexOf((java.lang.Object) 'a');
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: woodTotalValues3.getAll();
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues3.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.replaceAll(nodeUnaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = nodeList18.remove(obj20);
        int int22 = nodeList18.size();
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
        boolean boolean31 = false; // flaky: nodeList24.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList30);
        boolean boolean32 = nodeList18.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        boolean boolean33 = nodeList12.removeAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node35 = nodeList12.get((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood14.getAll();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        int int24 = nodeList18.lastIndexOf((java.lang.Object) 10);
        boolean boolean25 = false; // flaky: nodeList16.retainAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = nodeList27.remove(obj29);
        boolean boolean31 = nodeList27.isEmpty();
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        boolean boolean40 = false; // flaky: nodeList33.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList39);
        int int42 = nodeList33.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
        javafx.scene.Node node60 = null; // flaky: nodeList33.set((int) (short) 0, node58);
        boolean boolean61 = nodeList27.add(node60);
        boolean boolean63 = nodeList27.remove((java.lang.Object) 100L);
        boolean boolean64 = nodeList18.remove((java.lang.Object) boolean63);
        boolean boolean65 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        java.lang.Object[] objArray66 = nodeList1.toArray();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node68 = nodeList1.get(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = nodeList15.remove(obj17);
        boolean boolean19 = nodeList15.isEmpty();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean28 = false; // flaky: nodeList21.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList27);
        int int30 = nodeList21.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        boolean boolean35 = nodeList33.isEmpty();
        int int37 = nodeList33.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean43 = false; // flaky: nodeList41.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node45 = null;
        javafx.scene.Node node46 = null; // flaky: nodeList41.set((int) (byte) 1, node45);
        boolean boolean47 = nodeList33.add(node46);
        javafx.scene.Node node48 = null; // flaky: nodeList21.set((int) (short) 0, node46);
        boolean boolean49 = nodeList15.add(node48);
        boolean boolean51 = nodeList15.remove((java.lang.Object) 100L);
        boolean boolean52 = nodeList6.remove((java.lang.Object) boolean51);
        java.lang.Object[] objArray53 = nodeList6.toArray();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        javafx.scene.Node[] nodeArray13 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList14 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList14, nodeArray13);
        java.lang.Object obj16 = null;
        boolean boolean17 = nodeList14.remove(obj16);
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        boolean boolean24 = nodeList19.isEmpty();
        nodeList19.clear();
        boolean boolean26 = nodeList14.removeAll((java.util.Collection<javafx.scene.Node>) nodeList19);
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
// flaky:         addWood29.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood29.getAll();
        boolean boolean35 = false; // flaky: nodeList19.addAll((java.util.Collection<javafx.scene.Node>) nodeList34);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = nodeList6.addAll((int) (byte) 100, (java.util.Collection<javafx.scene.Node>) nodeList34);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((double) 0L, (double) 100.0f);
        java.util.ArrayList<javafx.scene.Node> nodeList6 = null; // flaky: woodTotalValues1.getAll();
        Interface.WoodTable woodTable7 = null;
        Interface.WoodTotalValues woodTotalValues8 = null;
        Interface.AddWood addWood9 = null; // flaky: new Interface.AddWood(woodTable7, woodTotalValues8);
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: addWood9.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood9.getAll();
        int int12 = 0; // flaky: nodeList11.size();
        int int13 = 0; // flaky: nodeList6.lastIndexOf((java.lang.Object) int12);
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList6);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.ListIterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList8.listIterator();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        Interface.WoodTable woodTable25 = null;
        Interface.WoodTotalValues woodTotalValues26 = null;
        Interface.AddWood addWood27 = null; // flaky: new Interface.AddWood(woodTable25, woodTotalValues26);
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood27.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood27.getAll();
        javafx.scene.Node[] nodeArray30 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList31 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList31, nodeArray30);
        boolean boolean33 = nodeList31.isEmpty();
        int int35 = nodeList31.lastIndexOf((java.lang.Object) 100);
        int int37 = nodeList31.lastIndexOf((java.lang.Object) 10);
        boolean boolean38 = false; // flaky: nodeList29.retainAll((java.util.Collection<javafx.scene.Node>) nodeList31);
        boolean boolean39 = false; // flaky: nodeList22.removeAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        boolean boolean40 = false; // flaky: nodeList29.isEmpty();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = nodeList42.remove(obj44);
        boolean boolean46 = nodeList42.isEmpty();
        javafx.scene.Node[] nodeArray47 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList48 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList48, nodeArray47);
        Interface.WoodTable woodTable51 = null;
        Interface.WoodTotalValues woodTotalValues52 = null;
        Interface.AddWood addWood53 = null; // flaky: new Interface.AddWood(woodTable51, woodTotalValues52);
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood53.getAll();
        boolean boolean55 = false; // flaky: nodeList48.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList54);
        int int57 = nodeList48.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray59 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList60 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList60, nodeArray59);
        boolean boolean62 = nodeList60.isEmpty();
        int int64 = nodeList60.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable65 = null;
        Interface.WoodTotalValues woodTotalValues66 = null;
        Interface.AddWood addWood67 = null; // flaky: new Interface.AddWood(woodTable65, woodTotalValues66);
        java.util.ArrayList<javafx.scene.Node> nodeList68 = null; // flaky: addWood67.getAll();
        boolean boolean70 = false; // flaky: nodeList68.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node72 = null;
        javafx.scene.Node node73 = null; // flaky: nodeList68.set((int) (byte) 1, node72);
        boolean boolean74 = nodeList60.add(node73);
        javafx.scene.Node node75 = null; // flaky: nodeList48.set((int) (short) 0, node73);
        boolean boolean76 = nodeList42.add(node75);
        boolean boolean78 = nodeList42.remove((java.lang.Object) 100L);
        int int79 = 0; // flaky: nodeList29.lastIndexOf((java.lang.Object) nodeList42);
        boolean boolean80 = false; // flaky: nodeList8.addAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        java.lang.Class<?> wildcardClass81 = null; // flaky: nodeList8.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
// flaky:         org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        boolean boolean19 = nodeList17.isEmpty();
        int int21 = nodeList17.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable22 = null;
        Interface.WoodTotalValues woodTotalValues23 = null;
        Interface.AddWood addWood24 = null; // flaky: new Interface.AddWood(woodTable22, woodTotalValues23);
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood24.getAll();
        boolean boolean27 = false; // flaky: nodeList25.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node29 = null;
        javafx.scene.Node node30 = null; // flaky: nodeList25.set((int) (byte) 1, node29);
        boolean boolean31 = nodeList17.add(node30);
// flaky:         nodeList7.add(1, node30);
        javafx.scene.Node node33 = null; // flaky: nodeList3.set(0, node30);
        java.util.Iterator<javafx.scene.Node> nodeItor34 = null; // flaky: nodeList3.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList37 = null; // flaky: nodeList3.subList(1, 0);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertNotNull(node33);
// flaky:         org.junit.Assert.assertNotNull(nodeItor34);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        int int5 = nodeList1.size();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        boolean boolean15 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.replaceAll(nodeUnaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        boolean boolean6 = false; // flaky: nodeList3.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor7 = null; // flaky: nodeList3.iterator();
        javafx.scene.Node[] nodeArray8 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList9 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList9, nodeArray8);
        boolean boolean11 = nodeList9.isEmpty();
        boolean boolean12 = nodeList9.isEmpty();
        nodeList9.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor15 = nodeList9.listIterator(0);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean21 = false; // flaky: nodeList19.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node23 = null;
        javafx.scene.Node node24 = null; // flaky: nodeList19.set((int) (byte) 1, node23);
        javafx.css.Styleable[] styleableArray25 = new javafx.css.Styleable[] { node24 };
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean31 = false; // flaky: nodeList29.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node33 = null;
        javafx.scene.Node node34 = null; // flaky: nodeList29.set((int) (byte) 1, node33);
        javafx.css.Styleable[] styleableArray35 = new javafx.css.Styleable[] { node34 };
        javafx.css.Styleable[][] styleableArray36 = new javafx.css.Styleable[][] { styleableArray25, styleableArray35 };
        javafx.css.Styleable[][] styleableArray37 = nodeList9.toArray(styleableArray36);
        boolean boolean38 = false; // flaky: nodeList3.addAll((java.util.Collection<javafx.scene.Node>) nodeList9);
        Interface.WoodTable woodTable39 = null;
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null; // flaky: new Interface.WoodTotalValues(woodTable40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: woodTotalValues41.getAll();
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable39, woodTotalValues41);
        boolean boolean44 = nodeList9.equals((java.lang.Object) woodTotalValues41);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues41.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeItor15);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(styleableArray25);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(styleableArray35);
        org.junit.Assert.assertNotNull(styleableArray36);
        org.junit.Assert.assertNotNull(styleableArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((double) 2, (double) 5);
// flaky:         woodTotalValues1.redraw((double) (byte) 1, (double) 1);
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: woodTotalValues1.getAll();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList13.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList19);
        int int22 = nodeList13.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        boolean boolean27 = nodeList25.isEmpty();
        int int29 = nodeList25.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean35 = false; // flaky: nodeList33.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node37 = null;
        javafx.scene.Node node38 = null; // flaky: nodeList33.set((int) (byte) 1, node37);
        boolean boolean39 = nodeList25.add(node38);
        javafx.scene.Node node40 = null; // flaky: nodeList13.set((int) (short) 0, node38);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node41 = null; // flaky: nodeList10.set((-1), node40);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertNotNull(node40);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList35.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList41);
        java.util.stream.Stream<javafx.scene.Node> nodeStream43 = null; // flaky: nodeList41.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator44 = null; // flaky: nodeList41.spliterator();
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        boolean boolean51 = nodeList46.isEmpty();
        boolean boolean52 = false; // flaky: nodeList41.contains((java.lang.Object) boolean51);
        boolean boolean53 = false; // flaky: nodeList7.addAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        int int54 = 0; // flaky: nodeList7.size();
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTotalValues woodTotalValues56 = null;
        Interface.AddWood addWood57 = null; // flaky: new Interface.AddWood(woodTable55, woodTotalValues56);
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood57.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList59 = null; // flaky: addWood57.getAll();
        javafx.scene.Node[] nodeArray60 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList61 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList61, nodeArray60);
        boolean boolean63 = nodeList61.isEmpty();
        int int65 = nodeList61.lastIndexOf((java.lang.Object) 100);
        int int67 = nodeList61.lastIndexOf((java.lang.Object) 10);
        boolean boolean68 = false; // flaky: nodeList59.retainAll((java.util.Collection<javafx.scene.Node>) nodeList61);
        boolean boolean70 = false; // flaky: nodeList59.contains((java.lang.Object) false);
        Interface.WoodTable woodTable71 = null;
        Interface.WoodTotalValues woodTotalValues72 = null;
        Interface.AddWood addWood73 = null; // flaky: new Interface.AddWood(woodTable71, woodTotalValues72);
        java.util.ArrayList<javafx.scene.Node> nodeList74 = null; // flaky: addWood73.getAll();
        boolean boolean75 = false; // flaky: nodeList74.isEmpty();
        boolean boolean77 = false; // flaky: nodeList74.equals((java.lang.Object) 100);
        int int78 = 0; // flaky: nodeList59.lastIndexOf((java.lang.Object) nodeList74);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator79 = null; // flaky: nodeList74.spliterator();
        boolean boolean80 = false; // flaky: nodeList7.remove((java.lang.Object) nodeList74);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList83 = null; // flaky: nodeList74.subList((int) (byte) 1, (int) '4');
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream43);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator44);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 11 + "'", int54 == 11);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
// flaky:         org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean23 = false; // flaky: nodeList21.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node25 = null;
        javafx.scene.Node node26 = null; // flaky: nodeList21.set((int) (byte) 1, node25);
        boolean boolean27 = nodeList13.add(node26);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood30.getAll();
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        boolean boolean36 = nodeList34.isEmpty();
        int int38 = nodeList34.lastIndexOf((java.lang.Object) 100);
        int int40 = nodeList34.lastIndexOf((java.lang.Object) 10);
        boolean boolean41 = false; // flaky: nodeList32.retainAll((java.util.Collection<javafx.scene.Node>) nodeList34);
        boolean boolean42 = nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList34);
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        boolean boolean46 = nodeList44.isEmpty();
        int int48 = nodeList44.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable49 = null;
        Interface.WoodTotalValues woodTotalValues50 = null;
        Interface.AddWood addWood51 = null; // flaky: new Interface.AddWood(woodTable49, woodTotalValues50);
        java.util.ArrayList<javafx.scene.Node> nodeList52 = null; // flaky: addWood51.getAll();
        boolean boolean54 = false; // flaky: nodeList52.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node56 = null;
        javafx.scene.Node node57 = null; // flaky: nodeList52.set((int) (byte) 1, node56);
        boolean boolean58 = nodeList44.add(node57);
        javafx.scene.Node[] nodeArray59 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList60 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList60, nodeArray59);
        java.lang.Object obj62 = null;
        boolean boolean63 = nodeList60.remove(obj62);
        boolean boolean64 = nodeList44.retainAll((java.util.Collection<javafx.scene.Node>) nodeList60);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator65 = nodeList60.spliterator();
        boolean boolean66 = nodeList34.remove((java.lang.Object) nodeSpliterator65);
        int int67 = nodeList1.lastIndexOf((java.lang.Object) nodeSpliterator65);
        java.lang.Class<?> wildcardClass68 = nodeSpliterator65.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        boolean boolean27 = nodeList25.isEmpty();
        int int29 = nodeList25.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean35 = false; // flaky: nodeList33.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node37 = null;
        javafx.scene.Node node38 = null; // flaky: nodeList33.set((int) (byte) 1, node37);
        boolean boolean39 = nodeList25.add(node38);
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        Interface.WoodTable woodTable45 = null;
        Interface.WoodTotalValues woodTotalValues46 = null;
        Interface.AddWood addWood47 = null; // flaky: new Interface.AddWood(woodTable45, woodTotalValues46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: addWood47.getAll();
        boolean boolean49 = false; // flaky: nodeList42.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList48);
        int int51 = nodeList42.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray53 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList54 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList54, nodeArray53);
        boolean boolean56 = nodeList54.isEmpty();
        int int58 = nodeList54.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable59 = null;
        Interface.WoodTotalValues woodTotalValues60 = null;
        Interface.AddWood addWood61 = null; // flaky: new Interface.AddWood(woodTable59, woodTotalValues60);
        java.util.ArrayList<javafx.scene.Node> nodeList62 = null; // flaky: addWood61.getAll();
        boolean boolean64 = false; // flaky: nodeList62.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node66 = null;
        javafx.scene.Node node67 = null; // flaky: nodeList62.set((int) (byte) 1, node66);
        boolean boolean68 = nodeList54.add(node67);
        javafx.scene.Node node69 = null; // flaky: nodeList42.set((int) (short) 0, node67);
        javafx.scene.Node node70 = nodeList25.set((int) (byte) 0, node67);
// flaky:         nodeList6.add((int) (short) 1, node70);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
// flaky:         org.junit.Assert.assertNotNull(node69);
// flaky:         org.junit.Assert.assertNotNull(node70);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = nodeList6.remove(obj8);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        boolean boolean18 = false; // flaky: nodeList11.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        boolean boolean23 = nodeList21.isEmpty();
        int int25 = nodeList21.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean31 = false; // flaky: nodeList29.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node33 = null;
        javafx.scene.Node node34 = null; // flaky: nodeList29.set((int) (byte) 1, node33);
        boolean boolean35 = nodeList21.add(node34);
// flaky:         nodeList11.add(1, node34);
        boolean boolean37 = nodeList6.retainAll((java.util.Collection<javafx.scene.Node>) nodeList11);
        boolean boolean38 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList11);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        int int44 = nodeList40.lastIndexOf((java.lang.Object) 100);
        boolean boolean45 = nodeList40.isEmpty();
        nodeList40.clear();
        boolean boolean47 = nodeList11.addAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        java.lang.Object obj48 = null;
        boolean boolean49 = nodeList11.remove(obj48);
        javafx.scene.Node[] nodeArray50 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList51 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList51, nodeArray50);
        boolean boolean53 = nodeList51.isEmpty();
        int int55 = nodeList51.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable56 = null;
        Interface.WoodTotalValues woodTotalValues57 = null;
        Interface.AddWood addWood58 = null; // flaky: new Interface.AddWood(woodTable56, woodTotalValues57);
        java.util.ArrayList<javafx.scene.Node> nodeList59 = null; // flaky: addWood58.getAll();
        boolean boolean61 = false; // flaky: nodeList59.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node63 = null;
        javafx.scene.Node node64 = null; // flaky: nodeList59.set((int) (byte) 1, node63);
        boolean boolean65 = nodeList51.add(node64);
        javafx.scene.Node[] nodeArray66 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList67 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList67, nodeArray66);
        java.lang.Object obj69 = null;
        boolean boolean70 = nodeList67.remove(obj69);
        boolean boolean71 = nodeList51.retainAll((java.util.Collection<javafx.scene.Node>) nodeList67);
        javafx.scene.Node[] nodeArray72 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList73 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList73, nodeArray72);
        Interface.WoodTable woodTable76 = null;
        Interface.WoodTotalValues woodTotalValues77 = null;
        Interface.AddWood addWood78 = null; // flaky: new Interface.AddWood(woodTable76, woodTotalValues77);
        java.util.ArrayList<javafx.scene.Node> nodeList79 = null; // flaky: addWood78.getAll();
        boolean boolean80 = false; // flaky: nodeList73.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList79);
        java.util.stream.Stream<javafx.scene.Node> nodeStream81 = null; // flaky: nodeList79.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator82 = null; // flaky: nodeList79.spliterator();
        boolean boolean83 = false; // flaky: nodeList51.addAll((java.util.Collection<javafx.scene.Node>) nodeList79);
        boolean boolean84 = nodeList11.removeAll((java.util.Collection<javafx.scene.Node>) nodeList51);
        java.util.stream.Stream<javafx.scene.Node> nodeStream85 = nodeList11.stream();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream81);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator82);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(nodeStream85);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        javafx.scene.Node[] nodeArray19 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList20 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList20, nodeArray19);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean27 = false; // flaky: nodeList20.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList26);
        java.util.stream.Stream<javafx.scene.Node> nodeStream28 = null; // flaky: nodeList26.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator29 = null; // flaky: nodeList26.spliterator();
        int int30 = 0; // flaky: nodeList8.indexOf((java.lang.Object) nodeList26);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node32 = null; // flaky: nodeList8.remove(10);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream28);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        java.lang.Object obj12 = null;
        boolean boolean13 = nodeList10.remove(obj12);
        javafx.scene.Node node14 = null;
        boolean boolean15 = nodeList10.add(node14);
        java.util.ListIterator<javafx.scene.Node> nodeItor16 = nodeList10.listIterator();
        boolean boolean17 = false; // flaky: nodeList8.contains((java.lang.Object) nodeList10);
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean29 = false; // flaky: nodeList27.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node31 = null;
        javafx.scene.Node node32 = null; // flaky: nodeList27.set((int) (byte) 1, node31);
        boolean boolean33 = nodeList19.add(node32);
        java.util.stream.Stream<javafx.scene.Node> nodeStream34 = nodeList19.stream();
        javafx.scene.Node[] nodeArray35 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList36 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList36, nodeArray35);
        java.lang.Object obj38 = null;
        boolean boolean39 = nodeList36.remove(obj38);
        javafx.scene.Node[] nodeArray40 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList41 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList41, nodeArray40);
        boolean boolean43 = nodeList41.isEmpty();
        int int45 = nodeList41.lastIndexOf((java.lang.Object) 100);
        boolean boolean46 = nodeList41.isEmpty();
        nodeList41.clear();
        boolean boolean48 = nodeList36.removeAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        Interface.WoodTable woodTable49 = null;
        Interface.WoodTotalValues woodTotalValues50 = null;
        Interface.AddWood addWood51 = null; // flaky: new Interface.AddWood(woodTable49, woodTotalValues50);
        java.util.ArrayList<javafx.scene.Node> nodeList52 = null; // flaky: addWood51.getAll();
// flaky:         addWood51.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList56 = null; // flaky: addWood51.getAll();
        boolean boolean57 = false; // flaky: nodeList41.addAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        javafx.scene.Node[] nodeArray58 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList59 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList59, nodeArray58);
        boolean boolean61 = nodeList59.isEmpty();
        boolean boolean62 = nodeList59.isEmpty();
        nodeList59.clear();
        boolean boolean64 = nodeList41.retainAll((java.util.Collection<javafx.scene.Node>) nodeList59);
        java.util.AbstractList[] abstractListArray66 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<javafx.scene.Node>[] nodeListArray67 = (java.util.AbstractList<javafx.scene.Node>[]) abstractListArray66;
        nodeListArray67[0] = nodeList19;
        nodeListArray67[1] = nodeList41;
        java.util.AbstractList<javafx.scene.Node>[] nodeListArray72 = nodeList10.toArray(nodeListArray67);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList75 = nodeList10.subList((int) (short) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeStream34);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList52);
// flaky:         org.junit.Assert.assertNotNull(nodeList56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(abstractListArray66);
        org.junit.Assert.assertNotNull(nodeListArray67);
        org.junit.Assert.assertNotNull(nodeListArray72);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean14 = nodeList1.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor15 = nodeList1.iterator();
        Interface.WoodTable woodTable17 = null;
        Interface.WoodTotalValues woodTotalValues18 = null;
        Interface.AddWood addWood19 = null; // flaky: new Interface.AddWood(woodTable17, woodTotalValues18);
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood19.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood19.getAll();
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        boolean boolean25 = nodeList23.isEmpty();
        int int27 = nodeList23.lastIndexOf((java.lang.Object) 100);
        int int29 = nodeList23.lastIndexOf((java.lang.Object) 10);
        boolean boolean30 = false; // flaky: nodeList21.retainAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood33.getAll();
        boolean boolean36 = false; // flaky: nodeList23.addAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        java.lang.Object obj40 = null;
        boolean boolean41 = nodeList38.remove(obj40);
        javafx.scene.Node node42 = null;
        boolean boolean43 = nodeList38.add(node42);
        java.util.ListIterator<javafx.scene.Node> nodeItor44 = nodeList38.listIterator();
        boolean boolean45 = nodeList23.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        java.util.stream.Stream<javafx.scene.Node> nodeStream46 = nodeList23.stream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = nodeList1.addAll((int) (short) 10, (java.util.Collection<javafx.scene.Node>) nodeList23);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(nodeItor15);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeStream46);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        boolean boolean19 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        javafx.scene.Node node25 = null;
        boolean boolean26 = nodeList21.add(node25);
        java.util.ListIterator<javafx.scene.Node> nodeItor27 = nodeList21.listIterator();
        boolean boolean28 = nodeList6.removeAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor30 = nodeList21.listIterator((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        javafx.scene.Node[] nodeArray19 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList20 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList20, nodeArray19);
        boolean boolean22 = nodeList20.isEmpty();
        int int24 = nodeList20.lastIndexOf((java.lang.Object) 100);
        int int26 = nodeList20.lastIndexOf((java.lang.Object) 10);
        boolean boolean27 = false; // flaky: nodeList18.retainAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        boolean boolean31 = nodeList29.isEmpty();
        int int33 = nodeList29.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
        boolean boolean39 = false; // flaky: nodeList37.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node41 = null;
        javafx.scene.Node node42 = null; // flaky: nodeList37.set((int) (byte) 1, node41);
        boolean boolean43 = nodeList29.add(node42);
        java.util.stream.Stream<javafx.scene.Node> nodeStream44 = nodeList29.stream();
        boolean boolean45 = nodeList20.equals((java.lang.Object) nodeStream44);
        boolean boolean46 = nodeList20.isEmpty();
        boolean boolean47 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node49 = nodeList1.remove((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray8 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList9 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList9, nodeArray8);
        boolean boolean11 = nodeList9.isEmpty();
        int int13 = nodeList9.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        boolean boolean19 = false; // flaky: nodeList17.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node21 = null;
        javafx.scene.Node node22 = null; // flaky: nodeList17.set((int) (byte) 1, node21);
        boolean boolean23 = nodeList9.add(node22);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood26.getAll();
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        int int36 = nodeList30.lastIndexOf((java.lang.Object) 10);
        boolean boolean37 = false; // flaky: nodeList28.retainAll((java.util.Collection<javafx.scene.Node>) nodeList30);
        boolean boolean38 = nodeList9.removeAll((java.util.Collection<javafx.scene.Node>) nodeList30);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        int int44 = nodeList40.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable45 = null;
        Interface.WoodTotalValues woodTotalValues46 = null;
        Interface.AddWood addWood47 = null; // flaky: new Interface.AddWood(woodTable45, woodTotalValues46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: addWood47.getAll();
        boolean boolean50 = false; // flaky: nodeList48.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node52 = null;
        javafx.scene.Node node53 = null; // flaky: nodeList48.set((int) (byte) 1, node52);
        boolean boolean54 = nodeList40.add(node53);
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        java.lang.Object obj58 = null;
        boolean boolean59 = nodeList56.remove(obj58);
        boolean boolean60 = nodeList40.retainAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator61 = nodeList56.spliterator();
        boolean boolean62 = nodeList30.remove((java.lang.Object) nodeSpliterator61);
        boolean boolean63 = false; // flaky: nodeList7.equals((java.lang.Object) boolean62);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator64 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList7.replaceAll(nodeUnaryOperator64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        boolean boolean24 = false; // flaky: nodeList4.isEmpty();
        java.lang.Class<?> wildcardClass25 = null; // flaky: nodeList4.getClass();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean14 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        boolean boolean18 = nodeList16.isEmpty();
        int int20 = nodeList16.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean26 = false; // flaky: nodeList24.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node28 = null;
        javafx.scene.Node node29 = null; // flaky: nodeList24.set((int) (byte) 1, node28);
        boolean boolean30 = nodeList16.add(node29);
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        boolean boolean40 = false; // flaky: nodeList33.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList39);
        int int42 = nodeList33.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
        javafx.scene.Node node60 = null; // flaky: nodeList33.set((int) (short) 0, node58);
        javafx.scene.Node node61 = nodeList16.set((int) (byte) 0, node58);
        boolean boolean62 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList16);
        java.util.Collection<javafx.scene.Node> nodeCollection63 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = nodeList16.addAll(nodeCollection63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertNotNull(node60);
// flaky:         org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        Interface.WoodTable woodTable3 = null;
        Interface.WoodTotalValues woodTotalValues4 = null;
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable3, woodTotalValues4);
        java.util.ArrayList<javafx.scene.Node> nodeList6 = null; // flaky: addWood5.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood5.getAll();
        int int8 = 0; // flaky: nodeList2.indexOf((java.lang.Object) addWood5);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList2.replaceAll(nodeUnaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList6);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = nodeList6.remove(obj8);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        boolean boolean18 = false; // flaky: nodeList11.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        boolean boolean23 = nodeList21.isEmpty();
        int int25 = nodeList21.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean31 = false; // flaky: nodeList29.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node33 = null;
        javafx.scene.Node node34 = null; // flaky: nodeList29.set((int) (byte) 1, node33);
        boolean boolean35 = nodeList21.add(node34);
// flaky:         nodeList11.add(1, node34);
        boolean boolean37 = nodeList6.retainAll((java.util.Collection<javafx.scene.Node>) nodeList11);
        boolean boolean38 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList11);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        int int44 = nodeList40.lastIndexOf((java.lang.Object) 100);
        boolean boolean45 = nodeList40.isEmpty();
        nodeList40.clear();
        boolean boolean47 = nodeList11.addAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node49 = nodeList40.get((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood33.getAll();
        boolean boolean37 = false; // flaky: nodeList22.addAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator38 = nodeList22.spliterator();
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        boolean boolean43 = nodeList22.containsAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        java.lang.Object obj47 = null;
        boolean boolean48 = nodeList45.remove(obj47);
        javafx.scene.Node[] nodeArray49 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList50 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList50, nodeArray49);
        boolean boolean52 = nodeList50.isEmpty();
        int int54 = nodeList50.lastIndexOf((java.lang.Object) 100);
        boolean boolean55 = nodeList45.equals((java.lang.Object) nodeList50);
        Interface.WoodTable woodTable56 = null;
        Interface.WoodTotalValues woodTotalValues57 = null;
        Interface.AddWood addWood58 = null; // flaky: new Interface.AddWood(woodTable56, woodTotalValues57);
        java.util.ArrayList<javafx.scene.Node> nodeList59 = null; // flaky: addWood58.getAll();
// flaky:         addWood58.redraw((double) 10.0f, (double) 0L);
        boolean boolean63 = nodeList45.contains((java.lang.Object) 10.0f);
        Interface.WoodTable woodTable64 = null;
        Interface.WoodTotalValues woodTotalValues65 = null;
        Interface.AddWood addWood66 = null; // flaky: new Interface.AddWood(woodTable64, woodTotalValues65);
        java.util.ArrayList<javafx.scene.Node> nodeList67 = null; // flaky: addWood66.getAll();
        boolean boolean69 = false; // flaky: nodeList67.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray71 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList72 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList72, nodeArray71);
        boolean boolean74 = nodeList72.isEmpty();
        int int76 = nodeList72.lastIndexOf((java.lang.Object) 100);
        int int78 = nodeList72.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable79 = null;
        Interface.WoodTotalValues woodTotalValues80 = null;
        Interface.AddWood addWood81 = null; // flaky: new Interface.AddWood(woodTable79, woodTotalValues80);
        java.util.ArrayList<javafx.scene.Node> nodeList82 = null; // flaky: addWood81.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList83 = null; // flaky: addWood81.getAll();
        javafx.scene.Node[] nodeArray84 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList85 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList85, nodeArray84);
        boolean boolean87 = nodeList85.isEmpty();
        int int89 = nodeList85.lastIndexOf((java.lang.Object) 100);
        int int91 = nodeList85.lastIndexOf((java.lang.Object) 10);
        boolean boolean92 = false; // flaky: nodeList83.retainAll((java.util.Collection<javafx.scene.Node>) nodeList85);
        boolean boolean93 = nodeList72.containsAll((java.util.Collection<javafx.scene.Node>) nodeList85);
        boolean boolean94 = false; // flaky: nodeList67.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList72);
        boolean boolean95 = false; // flaky: nodeList45.retainAll((java.util.Collection<javafx.scene.Node>) nodeList67);
        boolean boolean96 = nodeList22.remove((java.lang.Object) boolean95);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList82);
// flaky:         org.junit.Assert.assertNotNull(nodeList83);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        boolean boolean27 = nodeList25.isEmpty();
        int int29 = nodeList25.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean35 = false; // flaky: nodeList33.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node37 = null;
        javafx.scene.Node node38 = null; // flaky: nodeList33.set((int) (byte) 1, node37);
        boolean boolean39 = nodeList25.add(node38);
        javafx.scene.Node[] nodeArray40 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList41 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList41, nodeArray40);
        java.lang.Object obj43 = null;
        boolean boolean44 = nodeList41.remove(obj43);
        boolean boolean45 = nodeList25.retainAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean54 = false; // flaky: nodeList47.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList53);
        java.util.stream.Stream<javafx.scene.Node> nodeStream55 = null; // flaky: nodeList53.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator56 = null; // flaky: nodeList53.spliterator();
        boolean boolean57 = false; // flaky: nodeList25.addAll((java.util.Collection<javafx.scene.Node>) nodeList53);
// flaky:         nodeList53.clear();
        java.lang.Object[] objArray59 = null; // flaky: nodeList53.toArray();
        javafx.scene.Node[] nodeArray60 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList61 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList61, nodeArray60);
        boolean boolean63 = nodeList61.isEmpty();
        int int65 = nodeList61.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable66 = null;
        Interface.WoodTotalValues woodTotalValues67 = null;
        Interface.AddWood addWood68 = null; // flaky: new Interface.AddWood(woodTable66, woodTotalValues67);
        java.util.ArrayList<javafx.scene.Node> nodeList69 = null; // flaky: addWood68.getAll();
        boolean boolean71 = false; // flaky: nodeList69.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node73 = null;
        javafx.scene.Node node74 = null; // flaky: nodeList69.set((int) (byte) 1, node73);
        boolean boolean75 = nodeList61.add(node74);
        boolean boolean76 = false; // flaky: nodeList53.add(node74);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node77 = null; // flaky: nodeList21.set((int) '#', node74);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream55);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertNotNull(objArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = nodeList25.remove(obj27);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        boolean boolean35 = nodeList25.equals((java.lang.Object) nodeList30);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood38.getAll();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        boolean boolean44 = nodeList42.isEmpty();
        int int46 = nodeList42.lastIndexOf((java.lang.Object) 100);
        int int48 = nodeList42.lastIndexOf((java.lang.Object) 10);
        boolean boolean49 = false; // flaky: nodeList40.retainAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        javafx.scene.Node[] nodeArray50 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList51 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList51, nodeArray50);
        java.lang.Object obj53 = null;
        boolean boolean54 = nodeList51.remove(obj53);
        boolean boolean55 = nodeList51.isEmpty();
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        Interface.WoodTable woodTable60 = null;
        Interface.WoodTotalValues woodTotalValues61 = null;
        Interface.AddWood addWood62 = null; // flaky: new Interface.AddWood(woodTable60, woodTotalValues61);
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: addWood62.getAll();
        boolean boolean64 = false; // flaky: nodeList57.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList63);
        int int66 = nodeList57.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray68 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList69 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList69, nodeArray68);
        boolean boolean71 = nodeList69.isEmpty();
        int int73 = nodeList69.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable74 = null;
        Interface.WoodTotalValues woodTotalValues75 = null;
        Interface.AddWood addWood76 = null; // flaky: new Interface.AddWood(woodTable74, woodTotalValues75);
        java.util.ArrayList<javafx.scene.Node> nodeList77 = null; // flaky: addWood76.getAll();
        boolean boolean79 = false; // flaky: nodeList77.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node81 = null;
        javafx.scene.Node node82 = null; // flaky: nodeList77.set((int) (byte) 1, node81);
        boolean boolean83 = nodeList69.add(node82);
        javafx.scene.Node node84 = null; // flaky: nodeList57.set((int) (short) 0, node82);
        boolean boolean85 = nodeList51.add(node84);
        boolean boolean87 = nodeList51.remove((java.lang.Object) 100L);
        boolean boolean88 = nodeList42.remove((java.lang.Object) boolean87);
        boolean boolean89 = nodeList25.addAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        boolean boolean90 = false; // flaky: nodeList4.equals((java.lang.Object) nodeList42);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator91 = nodeList42.spliterator();
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator92 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList42.replaceAll(nodeUnaryOperator92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
// flaky:         org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator91);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray9 = nodeList1.toArray(strArray8);
        nodeList1.clear();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        boolean boolean14 = nodeList12.isEmpty();
        Interface.WoodTable woodTable15 = null;
        Interface.WoodTotalValues woodTotalValues16 = null;
        Interface.AddWood addWood17 = null; // flaky: new Interface.AddWood(woodTable15, woodTotalValues16);
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood17.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood17.getAll();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        boolean boolean23 = nodeList21.isEmpty();
        int int25 = nodeList21.lastIndexOf((java.lang.Object) 100);
        int int27 = nodeList21.lastIndexOf((java.lang.Object) 10);
        boolean boolean28 = false; // flaky: nodeList19.retainAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        boolean boolean29 = false; // flaky: nodeList12.removeAll((java.util.Collection<javafx.scene.Node>) nodeList19);
        boolean boolean30 = false; // flaky: nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList19);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        boolean boolean17 = nodeList15.isEmpty();
        int int19 = nodeList15.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        boolean boolean25 = false; // flaky: nodeList23.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node27 = null;
        javafx.scene.Node node28 = null; // flaky: nodeList23.set((int) (byte) 1, node27);
        boolean boolean29 = nodeList15.add(node28);
        java.util.stream.Stream<javafx.scene.Node> nodeStream30 = nodeList15.stream();
        boolean boolean31 = nodeList6.equals((java.lang.Object) nodeStream30);
        boolean boolean32 = nodeList6.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor33 = nodeList6.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor34 = nodeList6.listIterator();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(nodeItor33);
        org.junit.Assert.assertNotNull(nodeItor34);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node node5 = null;
        boolean boolean6 = nodeList1.add(node5);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node8 = nodeList1.get(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        boolean boolean6 = nodeList1.isEmpty();
        nodeList1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList10 = nodeList1.subList((int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
// flaky:         woodTotalValues3.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
// flaky:         addWood8.redraw((double) 5, (double) 'a');
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.ListIterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList8.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node22 = null; // flaky: nodeList8.remove(0);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        javafx.scene.Node[] nodeArray19 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList20 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList20, nodeArray19);
        boolean boolean22 = nodeList20.isEmpty();
        int int24 = nodeList20.lastIndexOf((java.lang.Object) 100);
        int int26 = nodeList20.lastIndexOf((java.lang.Object) 10);
        boolean boolean27 = false; // flaky: nodeList18.retainAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        boolean boolean31 = nodeList29.isEmpty();
        int int33 = nodeList29.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
        boolean boolean39 = false; // flaky: nodeList37.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node41 = null;
        javafx.scene.Node node42 = null; // flaky: nodeList37.set((int) (byte) 1, node41);
        boolean boolean43 = nodeList29.add(node42);
        java.util.stream.Stream<javafx.scene.Node> nodeStream44 = nodeList29.stream();
        boolean boolean45 = nodeList20.equals((java.lang.Object) nodeStream44);
        boolean boolean46 = nodeList20.isEmpty();
        boolean boolean47 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        java.util.ListIterator<javafx.scene.Node> nodeItor48 = nodeList1.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node50 = nodeList1.remove((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeItor48);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean30 = false; // flaky: nodeList23.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList29);
        java.util.stream.Stream<javafx.scene.Node> nodeStream31 = null; // flaky: nodeList29.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator32 = null; // flaky: nodeList29.spliterator();
        boolean boolean33 = false; // flaky: nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator34 = nodeList1.spliterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream31);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator34);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        boolean boolean6 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream7 = nodeList1.stream();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        java.lang.Object obj12 = null;
        boolean boolean13 = nodeList10.remove(obj12);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = nodeList15.remove(obj17);
        javafx.scene.Node[] nodeArray19 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList20 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList20, nodeArray19);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean27 = false; // flaky: nodeList20.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList26);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = nodeList30.add(node43);
// flaky:         nodeList20.add(1, node43);
        boolean boolean46 = nodeList15.retainAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        boolean boolean47 = nodeList10.retainAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        boolean boolean48 = nodeList1.addAll((int) (short) 0, (java.util.Collection<javafx.scene.Node>) nodeList20);
        boolean boolean49 = nodeList20.isEmpty();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeStream7);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator9 = nodeList1.spliterator();
        java.util.stream.Stream<javafx.scene.Node> nodeStream10 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = nodeList12.isEmpty();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean25 = false; // flaky: nodeList18.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList24);
        int int27 = nodeList18.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = nodeList30.add(node43);
        javafx.scene.Node node45 = null; // flaky: nodeList18.set((int) (short) 0, node43);
        boolean boolean46 = nodeList12.add(node45);
        boolean boolean47 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList50 = nodeList12.subList(5, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator9);
        org.junit.Assert.assertNotNull(nodeStream10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
// flaky:         addWood14.redraw((double) 10.0f, (double) 0L);
        boolean boolean19 = nodeList1.contains((java.lang.Object) 10.0f);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        boolean boolean25 = false; // flaky: nodeList23.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray27 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList28 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList28, nodeArray27);
        boolean boolean30 = nodeList28.isEmpty();
        int int32 = nodeList28.lastIndexOf((java.lang.Object) 100);
        int int34 = nodeList28.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood37.getAll();
        javafx.scene.Node[] nodeArray40 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList41 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList41, nodeArray40);
        boolean boolean43 = nodeList41.isEmpty();
        int int45 = nodeList41.lastIndexOf((java.lang.Object) 100);
        int int47 = nodeList41.lastIndexOf((java.lang.Object) 10);
        boolean boolean48 = false; // flaky: nodeList39.retainAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        boolean boolean49 = nodeList28.containsAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        boolean boolean50 = false; // flaky: nodeList23.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList28);
        boolean boolean51 = false; // flaky: nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        java.util.ListIterator<javafx.scene.Node> nodeItor53 = null; // flaky: nodeList23.listIterator(1);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor53);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        boolean boolean22 = nodeList1.isEmpty();
        int int23 = nodeList1.size();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((double) 2, (double) 5);
// flaky:         woodTotalValues1.redraw((double) (byte) 1, (double) 1);
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((double) (short) 1, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues1.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        java.util.stream.Stream<javafx.scene.Node> nodeStream16 = nodeList1.stream();
        Interface.WoodTable woodTable17 = null;
        Interface.WoodTotalValues woodTotalValues18 = null;
        Interface.AddWood addWood19 = null; // flaky: new Interface.AddWood(woodTable17, woodTotalValues18);
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood19.getAll();
        boolean boolean21 = false; // flaky: nodeList20.isEmpty();
        Interface.WoodTable woodTable22 = null;
        Interface.WoodTotalValues woodTotalValues23 = null;
        Interface.AddWood addWood24 = null; // flaky: new Interface.AddWood(woodTable22, woodTotalValues23);
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood24.getAll();
        boolean boolean26 = false; // flaky: nodeList25.isEmpty();
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        Interface.WoodTable woodTable32 = null;
        Interface.WoodTotalValues woodTotalValues33 = null;
        Interface.AddWood addWood34 = null; // flaky: new Interface.AddWood(woodTable32, woodTotalValues33);
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood34.getAll();
        boolean boolean36 = false; // flaky: nodeList29.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList35);
        javafx.scene.Node[] nodeArray38 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList39 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList39, nodeArray38);
        boolean boolean41 = nodeList39.isEmpty();
        int int43 = nodeList39.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTotalValues woodTotalValues45 = null;
        Interface.AddWood addWood46 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood46.getAll();
        boolean boolean49 = false; // flaky: nodeList47.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node51 = null;
        javafx.scene.Node node52 = null; // flaky: nodeList47.set((int) (byte) 1, node51);
        boolean boolean53 = nodeList39.add(node52);
// flaky:         nodeList29.add(1, node52);
        javafx.scene.Node node55 = null; // flaky: nodeList25.set(0, node52);
        boolean boolean56 = false; // flaky: nodeList20.add(node55);
        javafx.scene.Node[] nodeArray57 = new javafx.scene.Node[] { node55 };
        javafx.scene.Node[] nodeArray58 = nodeList1.toArray(nodeArray57);
        Interface.WoodTable woodTable59 = null;
        Interface.WoodTotalValues woodTotalValues60 = null;
        Interface.AddWood addWood61 = null; // flaky: new Interface.AddWood(woodTable59, woodTotalValues60);
        java.util.ArrayList<javafx.scene.Node> nodeList62 = null; // flaky: addWood61.getAll();
// flaky:         addWood61.redraw((double) 10.0f, (double) (-1L));
        java.util.ArrayList<javafx.scene.Node> nodeList66 = null; // flaky: addWood61.getAll();
        boolean boolean67 = false; // flaky: nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList66);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeStream16);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(node55);
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(nodeArray58);
// flaky:         org.junit.Assert.assertNotNull(nodeList62);
// flaky:         org.junit.Assert.assertNotNull(nodeList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = nodeList25.remove(obj27);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        boolean boolean35 = nodeList25.equals((java.lang.Object) nodeList30);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood38.getAll();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        boolean boolean44 = nodeList42.isEmpty();
        int int46 = nodeList42.lastIndexOf((java.lang.Object) 100);
        int int48 = nodeList42.lastIndexOf((java.lang.Object) 10);
        boolean boolean49 = false; // flaky: nodeList40.retainAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        javafx.scene.Node[] nodeArray50 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList51 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList51, nodeArray50);
        java.lang.Object obj53 = null;
        boolean boolean54 = nodeList51.remove(obj53);
        boolean boolean55 = nodeList51.isEmpty();
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        Interface.WoodTable woodTable60 = null;
        Interface.WoodTotalValues woodTotalValues61 = null;
        Interface.AddWood addWood62 = null; // flaky: new Interface.AddWood(woodTable60, woodTotalValues61);
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: addWood62.getAll();
        boolean boolean64 = false; // flaky: nodeList57.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList63);
        int int66 = nodeList57.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray68 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList69 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList69, nodeArray68);
        boolean boolean71 = nodeList69.isEmpty();
        int int73 = nodeList69.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable74 = null;
        Interface.WoodTotalValues woodTotalValues75 = null;
        Interface.AddWood addWood76 = null; // flaky: new Interface.AddWood(woodTable74, woodTotalValues75);
        java.util.ArrayList<javafx.scene.Node> nodeList77 = null; // flaky: addWood76.getAll();
        boolean boolean79 = false; // flaky: nodeList77.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node81 = null;
        javafx.scene.Node node82 = null; // flaky: nodeList77.set((int) (byte) 1, node81);
        boolean boolean83 = nodeList69.add(node82);
        javafx.scene.Node node84 = null; // flaky: nodeList57.set((int) (short) 0, node82);
        boolean boolean85 = nodeList51.add(node84);
        boolean boolean87 = nodeList51.remove((java.lang.Object) 100L);
        boolean boolean88 = nodeList42.remove((java.lang.Object) boolean87);
        boolean boolean89 = nodeList25.addAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        boolean boolean90 = false; // flaky: nodeList4.equals((java.lang.Object) nodeList42);
        java.util.stream.Stream<javafx.scene.Node> nodeStream91 = nodeList42.parallelStream();
        java.lang.Object[] objArray92 = nodeList42.toArray();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
// flaky:         org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(nodeStream91);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        boolean boolean25 = nodeList23.isEmpty();
        int int27 = nodeList23.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        boolean boolean33 = false; // flaky: nodeList31.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node35 = null;
        javafx.scene.Node node36 = null; // flaky: nodeList31.set((int) (byte) 1, node35);
        boolean boolean37 = nodeList23.add(node36);
        java.util.stream.Stream<javafx.scene.Node> nodeStream38 = nodeList23.stream();
        boolean boolean39 = nodeList1.equals((java.lang.Object) nodeList23);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null; // flaky: new Interface.WoodTotalValues(woodTable40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: woodTotalValues41.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: woodTotalValues41.getAll();
        boolean boolean44 = nodeList1.contains((java.lang.Object) nodeList43);
        java.util.stream.Stream<javafx.scene.Node> nodeStream45 = null; // flaky: nodeList43.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node47 = null; // flaky: nodeList43.get((int) (byte) 10);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeStream45);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList11 = null; // flaky: nodeList7.subList(10, (int) (byte) 10);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        nodeList17.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor23 = nodeList17.listIterator();
        java.util.Collection<javafx.scene.Node> nodeCollection24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = nodeList17.removeAll(nodeCollection24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeItor23);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        boolean boolean13 = false; // flaky: nodeList6.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        boolean boolean18 = nodeList16.isEmpty();
        int int20 = nodeList16.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean26 = false; // flaky: nodeList24.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node28 = null;
        javafx.scene.Node node29 = null; // flaky: nodeList24.set((int) (byte) 1, node28);
        boolean boolean30 = nodeList16.add(node29);
// flaky:         nodeList6.add(1, node29);
        boolean boolean32 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        boolean boolean41 = false; // flaky: nodeList34.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList40);
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        boolean boolean46 = nodeList44.isEmpty();
        int int48 = nodeList44.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable49 = null;
        Interface.WoodTotalValues woodTotalValues50 = null;
        Interface.AddWood addWood51 = null; // flaky: new Interface.AddWood(woodTable49, woodTotalValues50);
        java.util.ArrayList<javafx.scene.Node> nodeList52 = null; // flaky: addWood51.getAll();
        boolean boolean54 = false; // flaky: nodeList52.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node56 = null;
        javafx.scene.Node node57 = null; // flaky: nodeList52.set((int) (byte) 1, node56);
        boolean boolean58 = nodeList44.add(node57);
// flaky:         nodeList34.add(1, node57);
        int int60 = nodeList1.lastIndexOf((java.lang.Object) 1);
        java.util.Collection<javafx.scene.Node> nodeCollection62 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = nodeList1.addAll(0, nodeCollection62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = nodeList15.remove(obj17);
        boolean boolean19 = nodeList15.isEmpty();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean28 = false; // flaky: nodeList21.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList27);
        int int30 = nodeList21.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        boolean boolean35 = nodeList33.isEmpty();
        int int37 = nodeList33.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean43 = false; // flaky: nodeList41.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node45 = null;
        javafx.scene.Node node46 = null; // flaky: nodeList41.set((int) (byte) 1, node45);
        boolean boolean47 = nodeList33.add(node46);
        javafx.scene.Node node48 = null; // flaky: nodeList21.set((int) (short) 0, node46);
        boolean boolean49 = nodeList15.add(node48);
        boolean boolean51 = nodeList15.remove((java.lang.Object) 100L);
        boolean boolean52 = nodeList6.remove((java.lang.Object) boolean51);
        javafx.scene.Node[] nodeArray53 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList54 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList54, nodeArray53);
        boolean boolean56 = nodeList54.isEmpty();
        int int58 = nodeList54.lastIndexOf((java.lang.Object) 100);
        int int60 = nodeList54.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable61 = null;
        Interface.WoodTotalValues woodTotalValues62 = null;
        Interface.AddWood addWood63 = null; // flaky: new Interface.AddWood(woodTable61, woodTotalValues62);
        java.util.ArrayList<javafx.scene.Node> nodeList64 = null; // flaky: addWood63.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList65 = null; // flaky: addWood63.getAll();
        javafx.scene.Node[] nodeArray66 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList67 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList67, nodeArray66);
        boolean boolean69 = nodeList67.isEmpty();
        int int71 = nodeList67.lastIndexOf((java.lang.Object) 100);
        int int73 = nodeList67.lastIndexOf((java.lang.Object) 10);
        boolean boolean74 = false; // flaky: nodeList65.retainAll((java.util.Collection<javafx.scene.Node>) nodeList67);
        boolean boolean75 = nodeList54.containsAll((java.util.Collection<javafx.scene.Node>) nodeList67);
        java.util.ListIterator<javafx.scene.Node> nodeItor77 = nodeList54.listIterator(0);
        boolean boolean78 = nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList54);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node80 = nodeList6.get((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList64);
// flaky:         org.junit.Assert.assertNotNull(nodeList65);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(nodeItor77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        boolean boolean25 = nodeList23.isEmpty();
        int int27 = nodeList23.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        boolean boolean33 = false; // flaky: nodeList31.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node35 = null;
        javafx.scene.Node node36 = null; // flaky: nodeList31.set((int) (byte) 1, node35);
        boolean boolean37 = nodeList23.add(node36);
        java.util.stream.Stream<javafx.scene.Node> nodeStream38 = nodeList23.stream();
        boolean boolean39 = nodeList1.equals((java.lang.Object) nodeList23);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator40 = nodeList23.spliterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator40);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        boolean boolean25 = nodeList23.isEmpty();
        int int27 = nodeList23.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        boolean boolean33 = false; // flaky: nodeList31.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node35 = null;
        javafx.scene.Node node36 = null; // flaky: nodeList31.set((int) (byte) 1, node35);
        boolean boolean37 = nodeList23.add(node36);
        java.util.stream.Stream<javafx.scene.Node> nodeStream38 = nodeList23.stream();
        boolean boolean39 = nodeList1.equals((java.lang.Object) nodeList23);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null; // flaky: new Interface.WoodTotalValues(woodTable40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: woodTotalValues41.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: woodTotalValues41.getAll();
        boolean boolean44 = nodeList1.contains((java.lang.Object) nodeList43);
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        java.lang.Object obj48 = null;
        boolean boolean49 = nodeList46.remove(obj48);
        javafx.scene.Node[] nodeArray50 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList51 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList51, nodeArray50);
        boolean boolean53 = nodeList51.isEmpty();
        int int55 = nodeList51.lastIndexOf((java.lang.Object) 100);
        boolean boolean56 = nodeList51.isEmpty();
        nodeList51.clear();
        boolean boolean58 = nodeList46.removeAll((java.util.Collection<javafx.scene.Node>) nodeList51);
        boolean boolean59 = nodeList46.isEmpty();
        javafx.scene.Node[] nodeArray60 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList61 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList61, nodeArray60);
        boolean boolean63 = nodeList61.isEmpty();
        boolean boolean64 = nodeList61.isEmpty();
        nodeList61.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor67 = nodeList61.listIterator(0);
        Interface.WoodTable woodTable68 = null;
        Interface.WoodTotalValues woodTotalValues69 = null;
        Interface.AddWood addWood70 = null; // flaky: new Interface.AddWood(woodTable68, woodTotalValues69);
        java.util.ArrayList<javafx.scene.Node> nodeList71 = null; // flaky: addWood70.getAll();
        boolean boolean73 = false; // flaky: nodeList71.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node75 = null;
        javafx.scene.Node node76 = null; // flaky: nodeList71.set((int) (byte) 1, node75);
        javafx.css.Styleable[] styleableArray77 = new javafx.css.Styleable[] { node76 };
        Interface.WoodTable woodTable78 = null;
        Interface.WoodTotalValues woodTotalValues79 = null;
        Interface.AddWood addWood80 = null; // flaky: new Interface.AddWood(woodTable78, woodTotalValues79);
        java.util.ArrayList<javafx.scene.Node> nodeList81 = null; // flaky: addWood80.getAll();
        boolean boolean83 = false; // flaky: nodeList81.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node85 = null;
        javafx.scene.Node node86 = null; // flaky: nodeList81.set((int) (byte) 1, node85);
        javafx.css.Styleable[] styleableArray87 = new javafx.css.Styleable[] { node86 };
        javafx.css.Styleable[][] styleableArray88 = new javafx.css.Styleable[][] { styleableArray77, styleableArray87 };
        javafx.css.Styleable[][] styleableArray89 = nodeList61.toArray(styleableArray88);
        boolean boolean90 = nodeList46.addAll((java.util.Collection<javafx.scene.Node>) nodeList61);
        boolean boolean91 = false; // flaky: nodeList43.removeAll((java.util.Collection<javafx.scene.Node>) nodeList46);
        java.lang.Class<?> wildcardClass92 = null; // flaky: nodeList43.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeItor67);
// flaky:         org.junit.Assert.assertNotNull(nodeList71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(styleableArray77);
// flaky:         org.junit.Assert.assertNotNull(nodeList81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
// flaky:         org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(styleableArray87);
        org.junit.Assert.assertNotNull(styleableArray88);
        org.junit.Assert.assertNotNull(styleableArray89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable8 = null;
        Interface.WoodTotalValues woodTotalValues9 = null;
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable8, woodTotalValues9);
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood10.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood10.getAll();
        javafx.scene.Node[] nodeArray13 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList14 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList14, nodeArray13);
        boolean boolean16 = nodeList14.isEmpty();
        int int18 = nodeList14.lastIndexOf((java.lang.Object) 100);
        int int20 = nodeList14.lastIndexOf((java.lang.Object) 10);
        boolean boolean21 = false; // flaky: nodeList12.retainAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        boolean boolean22 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node24 = nodeList1.get(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
        boolean boolean38 = false; // flaky: nodeList37.isEmpty();
        boolean boolean39 = false; // flaky: nodeList7.addAll((java.util.Collection<javafx.scene.Node>) nodeList37);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator40 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList37.replaceAll(nodeUnaryOperator40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        nodeList17.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList25 = nodeList17.subList((int) (short) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.ListIterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList8.listIterator();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
        boolean boolean32 = false; // flaky: nodeList30.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node34 = null;
        javafx.scene.Node node35 = null; // flaky: nodeList30.set((int) (byte) 1, node34);
        boolean boolean36 = nodeList22.add(node35);
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood39.getAll();
        javafx.scene.Node[] nodeArray42 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList43 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList43, nodeArray42);
        boolean boolean45 = nodeList43.isEmpty();
        int int47 = nodeList43.lastIndexOf((java.lang.Object) 100);
        int int49 = nodeList43.lastIndexOf((java.lang.Object) 10);
        boolean boolean50 = false; // flaky: nodeList41.retainAll((java.util.Collection<javafx.scene.Node>) nodeList43);
        boolean boolean51 = nodeList22.removeAll((java.util.Collection<javafx.scene.Node>) nodeList43);
        Interface.WoodTable woodTable52 = null;
        Interface.WoodTotalValues woodTotalValues53 = null;
        Interface.AddWood addWood54 = null; // flaky: new Interface.AddWood(woodTable52, woodTotalValues53);
        java.util.ArrayList<javafx.scene.Node> nodeList55 = null; // flaky: addWood54.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList56 = null; // flaky: addWood54.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList57 = null; // flaky: addWood54.getAll();
        boolean boolean58 = false; // flaky: nodeList43.addAll((java.util.Collection<javafx.scene.Node>) nodeList57);
        boolean boolean59 = false; // flaky: nodeList8.removeAll((java.util.Collection<javafx.scene.Node>) nodeList43);
        Interface.WoodTable woodTable60 = null;
        Interface.WoodTotalValues woodTotalValues61 = null; // flaky: new Interface.WoodTotalValues(woodTable60);
        java.util.ArrayList<javafx.scene.Node> nodeList62 = null; // flaky: woodTotalValues61.getAll();
        Interface.WoodTable woodTable63 = null;
        Interface.WoodTotalValues woodTotalValues64 = null;
        Interface.AddWood addWood65 = null; // flaky: new Interface.AddWood(woodTable63, woodTotalValues64);
        java.util.ArrayList<javafx.scene.Node> nodeList66 = null; // flaky: addWood65.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList67 = null; // flaky: addWood65.getAll();
        int int68 = 0; // flaky: nodeList62.indexOf((java.lang.Object) addWood65);
        java.lang.Class<?> wildcardClass69 = null; // flaky: nodeList62.getClass();
        Interface.WoodTable woodTable70 = null;
        Interface.WoodTotalValues woodTotalValues71 = null;
        Interface.AddWood addWood72 = null; // flaky: new Interface.AddWood(woodTable70, woodTotalValues71);
        java.util.ArrayList<javafx.scene.Node> nodeList73 = null; // flaky: addWood72.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList74 = null; // flaky: addWood72.getAll();
        java.lang.Class<?> wildcardClass75 = null; // flaky: nodeList74.getClass();
        java.lang.reflect.Type[] typeArray76 = new java.lang.reflect.Type[] { wildcardClass69, wildcardClass75 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type[] typeArray77 = nodeList43.toArray(typeArray76);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList55);
// flaky:         org.junit.Assert.assertNotNull(nodeList56);
// flaky:         org.junit.Assert.assertNotNull(nodeList57);
// flaky:         org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList62);
// flaky:         org.junit.Assert.assertNotNull(nodeList66);
// flaky:         org.junit.Assert.assertNotNull(nodeList67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
// flaky:         org.junit.Assert.assertNotNull(wildcardClass69);
// flaky:         org.junit.Assert.assertNotNull(nodeList73);
// flaky:         org.junit.Assert.assertNotNull(nodeList74);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(typeArray76);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        boolean boolean25 = nodeList23.isEmpty();
        int int27 = nodeList23.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        boolean boolean33 = false; // flaky: nodeList31.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node35 = null;
        javafx.scene.Node node36 = null; // flaky: nodeList31.set((int) (byte) 1, node35);
        boolean boolean37 = nodeList23.add(node36);
        java.util.stream.Stream<javafx.scene.Node> nodeStream38 = nodeList23.stream();
        boolean boolean39 = nodeList1.equals((java.lang.Object) nodeList23);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null; // flaky: new Interface.WoodTotalValues(woodTable40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: woodTotalValues41.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: woodTotalValues41.getAll();
        boolean boolean44 = nodeList1.contains((java.lang.Object) nodeList43);
        java.util.stream.Stream<javafx.scene.Node> nodeStream45 = null; // flaky: nodeList43.parallelStream();
        java.lang.Class<?> wildcardClass46 = null; // flaky: nodeStream45.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeStream45);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTable woodTable3 = null;
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null; // flaky: new Interface.WoodTotalValues(woodTable4);
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable3, woodTotalValues5);
// flaky:         woodTotalValues5.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable2, woodTotalValues5);
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues5);
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues5);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues5.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        int int19 = nodeList13.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood22.getAll();
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        boolean boolean28 = nodeList26.isEmpty();
        int int30 = nodeList26.lastIndexOf((java.lang.Object) 100);
        int int32 = nodeList26.lastIndexOf((java.lang.Object) 10);
        boolean boolean33 = false; // flaky: nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        boolean boolean34 = nodeList13.containsAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = false; // flaky: nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        int int45 = nodeList1.lastIndexOf((java.lang.Object) nodeList13);
        Interface.WoodTable woodTable46 = null;
        Interface.WoodTotalValues woodTotalValues47 = null; // flaky: new Interface.WoodTotalValues(woodTable46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: woodTotalValues47.getAll();
        int int49 = nodeList13.lastIndexOf((java.lang.Object) woodTotalValues47);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues47.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        boolean boolean19 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        javafx.scene.Node node25 = null;
        boolean boolean26 = nodeList21.add(node25);
        java.util.ListIterator<javafx.scene.Node> nodeItor27 = nodeList21.listIterator();
        boolean boolean28 = nodeList6.removeAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        boolean boolean33 = false; // flaky: nodeList21.removeAll((java.util.Collection<javafx.scene.Node>) nodeList32);
        java.util.Collection<javafx.scene.Node> nodeCollection34 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = nodeList21.addAll(nodeCollection34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean39 = false; // flaky: nodeList32.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList38);
        java.util.stream.Stream<javafx.scene.Node> nodeStream40 = null; // flaky: nodeList38.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator41 = null; // flaky: nodeList38.spliterator();
        javafx.scene.Node[] nodeArray42 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList43 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList43, nodeArray42);
        java.lang.Object obj45 = null;
        boolean boolean46 = nodeList43.remove(obj45);
        boolean boolean47 = false; // flaky: nodeList38.removeAll((java.util.Collection<javafx.scene.Node>) nodeList43);
        int int48 = 0; // flaky: nodeList38.size();
        boolean boolean49 = nodeList1.remove((java.lang.Object) int48);
        boolean boolean50 = nodeList1.isEmpty();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream40);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        javafx.scene.Node node16 = null;
        boolean boolean17 = nodeList12.add(node16);
        int int19 = nodeList12.indexOf((java.lang.Object) (short) 10);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
// flaky:         addWood22.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood22.getAll();
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        java.lang.Object obj32 = null;
        boolean boolean33 = nodeList30.remove(obj32);
        javafx.scene.Node node34 = null;
        boolean boolean35 = nodeList30.add(node34);
        java.util.ListIterator<javafx.scene.Node> nodeItor36 = nodeList30.listIterator();
        boolean boolean37 = false; // flaky: nodeList28.contains((java.lang.Object) nodeList30);
        java.util.ListIterator<javafx.scene.Node> nodeItor38 = nodeList30.listIterator();
        boolean boolean39 = nodeList12.remove((java.lang.Object) nodeList30);
        boolean boolean40 = false; // flaky: nodeList7.remove((java.lang.Object) boolean39);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(nodeItor36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        int int31 = nodeList22.size();
        int int32 = nodeList22.size();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean14 = nodeList1.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor15 = nodeList1.iterator();
        int int16 = nodeList1.size();
        Interface.WoodTable woodTable17 = null;
        Interface.WoodTotalValues woodTotalValues18 = null;
        Interface.AddWood addWood19 = null; // flaky: new Interface.AddWood(woodTable17, woodTotalValues18);
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood19.getAll();
// flaky:         addWood19.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood19.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood19.getAll();
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = nodeList27.remove(obj29);
        javafx.scene.Node node31 = null;
        boolean boolean32 = nodeList27.add(node31);
        java.util.ListIterator<javafx.scene.Node> nodeItor33 = nodeList27.listIterator();
        boolean boolean34 = false; // flaky: nodeList25.contains((java.lang.Object) nodeList27);
        java.util.ListIterator<javafx.scene.Node> nodeItor35 = nodeList27.listIterator();
        java.util.Iterator<javafx.scene.Node> nodeItor36 = nodeList27.iterator();
        boolean boolean37 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList27);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(nodeItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(nodeItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeItor35);
        org.junit.Assert.assertNotNull(nodeItor36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        java.util.List<javafx.scene.Node> nodeList21 = null; // flaky: nodeList8.subList(0, (int) (byte) 0);
        java.util.Iterator<javafx.scene.Node> nodeItor22 = null; // flaky: nodeList8.iterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertNotNull(nodeItor22);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood14.getAll();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        int int24 = nodeList18.lastIndexOf((java.lang.Object) 10);
        boolean boolean25 = false; // flaky: nodeList16.retainAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = nodeList27.remove(obj29);
        boolean boolean31 = nodeList27.isEmpty();
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        boolean boolean40 = false; // flaky: nodeList33.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList39);
        int int42 = nodeList33.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
        javafx.scene.Node node60 = null; // flaky: nodeList33.set((int) (short) 0, node58);
        boolean boolean61 = nodeList27.add(node60);
        boolean boolean63 = nodeList27.remove((java.lang.Object) 100L);
        boolean boolean64 = nodeList18.remove((java.lang.Object) boolean63);
        boolean boolean65 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        java.lang.Object[] objArray66 = nodeList1.toArray();
        java.util.stream.Stream<javafx.scene.Node> nodeStream67 = nodeList1.parallelStream();
        nodeList1.clear();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(nodeStream67);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        boolean boolean6 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream7 = nodeList1.stream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator8 = nodeList1.spliterator();
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = nodeList1.parallelStream();
        boolean boolean10 = nodeList1.isEmpty();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeStream7);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
        org.junit.Assert.assertNotNull(nodeStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        int int28 = nodeList24.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        boolean boolean34 = false; // flaky: nodeList32.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node36 = null;
        javafx.scene.Node node37 = null; // flaky: nodeList32.set((int) (byte) 1, node36);
        boolean boolean38 = nodeList24.add(node37);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        java.lang.Object obj42 = null;
        boolean boolean43 = nodeList40.remove(obj42);
        boolean boolean44 = nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        boolean boolean45 = nodeList24.isEmpty();
        boolean boolean46 = nodeList6.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator47 = nodeList6.spliterator();
        Interface.WoodTable woodTable48 = null;
        Interface.WoodTotalValues woodTotalValues49 = null;
        Interface.AddWood addWood50 = null; // flaky: new Interface.AddWood(woodTable48, woodTotalValues49);
        java.util.ArrayList<javafx.scene.Node> nodeList51 = null; // flaky: addWood50.getAll();
        boolean boolean53 = false; // flaky: nodeList51.equals((java.lang.Object) (byte) 1);
        boolean boolean54 = nodeList6.contains((java.lang.Object) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList57 = nodeList6.subList((int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator47);
// flaky:         org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues2.getAll();
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: woodTotalValues2.getAll();
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues2.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        boolean boolean17 = nodeList15.isEmpty();
        int int19 = nodeList15.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        boolean boolean25 = false; // flaky: nodeList23.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node27 = null;
        javafx.scene.Node node28 = null; // flaky: nodeList23.set((int) (byte) 1, node27);
        boolean boolean29 = nodeList15.add(node28);
        java.util.stream.Stream<javafx.scene.Node> nodeStream30 = nodeList15.stream();
        boolean boolean31 = nodeList6.equals((java.lang.Object) nodeStream30);
        boolean boolean32 = nodeList6.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor33 = nodeList6.iterator();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node35 = nodeList6.remove(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(nodeItor33);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray7 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList8 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList8, nodeArray7);
        boolean boolean10 = nodeList8.isEmpty();
        int int12 = nodeList8.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable13 = null;
        Interface.WoodTotalValues woodTotalValues14 = null;
        Interface.AddWood addWood15 = null; // flaky: new Interface.AddWood(woodTable13, woodTotalValues14);
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood15.getAll();
        boolean boolean18 = false; // flaky: nodeList16.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node20 = null;
        javafx.scene.Node node21 = null; // flaky: nodeList16.set((int) (byte) 1, node20);
        boolean boolean22 = nodeList8.add(node21);
        javafx.scene.Node node23 = null; // flaky: nodeList5.set((int) (short) 0, node21);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = nodeList25.remove(obj27);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        java.lang.Object obj32 = null;
        boolean boolean33 = nodeList30.remove(obj32);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList35.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList41);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
// flaky:         nodeList35.add(1, node58);
        boolean boolean61 = nodeList30.retainAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        boolean boolean62 = nodeList25.retainAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        boolean boolean63 = false; // flaky: nodeList5.retainAll((java.util.Collection<javafx.scene.Node>) nodeList25);
        javafx.scene.Node[] nodeArray65 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList66 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList66, nodeArray65);
        Interface.WoodTable woodTable69 = null;
        Interface.WoodTotalValues woodTotalValues70 = null;
        Interface.AddWood addWood71 = null; // flaky: new Interface.AddWood(woodTable69, woodTotalValues70);
        java.util.ArrayList<javafx.scene.Node> nodeList72 = null; // flaky: addWood71.getAll();
        boolean boolean73 = false; // flaky: nodeList66.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList72);
        int int75 = nodeList66.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray77 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList78 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList78, nodeArray77);
        boolean boolean80 = nodeList78.isEmpty();
        int int82 = nodeList78.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable83 = null;
        Interface.WoodTotalValues woodTotalValues84 = null;
        Interface.AddWood addWood85 = null; // flaky: new Interface.AddWood(woodTable83, woodTotalValues84);
        java.util.ArrayList<javafx.scene.Node> nodeList86 = null; // flaky: addWood85.getAll();
        boolean boolean88 = false; // flaky: nodeList86.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node90 = null;
        javafx.scene.Node node91 = null; // flaky: nodeList86.set((int) (byte) 1, node90);
        boolean boolean92 = nodeList78.add(node91);
        javafx.scene.Node node93 = null; // flaky: nodeList66.set((int) (short) 0, node91);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node94 = nodeList25.set((int) (byte) 10, node93);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList72);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
// flaky:         org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        int int10 = nodeList1.indexOf((java.lang.Object) true);
        javafx.scene.Node node12 = null; // flaky: nodeList1.get((int) (byte) 0);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.replaceAll(nodeUnaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
// flaky:         org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator9 = nodeList1.spliterator();
        java.util.stream.Stream<javafx.scene.Node> nodeStream10 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = nodeList12.isEmpty();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean25 = false; // flaky: nodeList18.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList24);
        int int27 = nodeList18.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = nodeList30.add(node43);
        javafx.scene.Node node45 = null; // flaky: nodeList18.set((int) (short) 0, node43);
        boolean boolean46 = nodeList12.add(node45);
        boolean boolean47 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        Interface.WoodTable woodTable49 = null;
        Interface.WoodTotalValues woodTotalValues50 = null;
        Interface.AddWood addWood51 = null; // flaky: new Interface.AddWood(woodTable49, woodTotalValues50);
        java.util.ArrayList<javafx.scene.Node> nodeList52 = null; // flaky: addWood51.getAll();
        boolean boolean53 = false; // flaky: nodeList52.isEmpty();
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        Interface.WoodTable woodTable59 = null;
        Interface.WoodTotalValues woodTotalValues60 = null;
        Interface.AddWood addWood61 = null; // flaky: new Interface.AddWood(woodTable59, woodTotalValues60);
        java.util.ArrayList<javafx.scene.Node> nodeList62 = null; // flaky: addWood61.getAll();
        boolean boolean63 = false; // flaky: nodeList56.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList62);
        javafx.scene.Node[] nodeArray65 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList66 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList66, nodeArray65);
        boolean boolean68 = nodeList66.isEmpty();
        int int70 = nodeList66.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable71 = null;
        Interface.WoodTotalValues woodTotalValues72 = null;
        Interface.AddWood addWood73 = null; // flaky: new Interface.AddWood(woodTable71, woodTotalValues72);
        java.util.ArrayList<javafx.scene.Node> nodeList74 = null; // flaky: addWood73.getAll();
        boolean boolean76 = false; // flaky: nodeList74.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node78 = null;
        javafx.scene.Node node79 = null; // flaky: nodeList74.set((int) (byte) 1, node78);
        boolean boolean80 = nodeList66.add(node79);
// flaky:         nodeList56.add(1, node79);
        javafx.scene.Node node82 = null; // flaky: nodeList52.set(0, node79);
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.add((int) (byte) -1, node79);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator9);
        org.junit.Assert.assertNotNull(nodeStream10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList62);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
// flaky:         org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        int int5 = nodeList1.size();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        boolean boolean15 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList7);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        boolean boolean27 = nodeList22.isEmpty();
        nodeList22.clear();
        boolean boolean29 = nodeList17.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood32.getAll();
        javafx.scene.Node[] nodeArray35 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList36 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList36, nodeArray35);
        boolean boolean38 = nodeList36.isEmpty();
        int int40 = nodeList36.lastIndexOf((java.lang.Object) 100);
        int int42 = nodeList36.lastIndexOf((java.lang.Object) 10);
        boolean boolean43 = false; // flaky: nodeList34.retainAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
        java.util.stream.Stream<javafx.scene.Node> nodeStream60 = nodeList45.stream();
        boolean boolean61 = nodeList36.equals((java.lang.Object) nodeStream60);
        boolean boolean62 = nodeList36.isEmpty();
        boolean boolean63 = nodeList17.addAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        java.util.ListIterator<javafx.scene.Node> nodeItor64 = nodeList17.listIterator();
        java.lang.Object[] objArray65 = nodeList17.toArray();
        boolean boolean66 = nodeList7.contains((java.lang.Object) nodeList17);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(nodeStream60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeItor64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList8.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor22 = null; // flaky: nodeList8.listIterator(0);
        boolean boolean23 = false; // flaky: nodeList8.isEmpty();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
// flaky:         org.junit.Assert.assertNotNull(nodeItor22);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node12 = null; // flaky: nodeList7.remove((int) ' ');
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean30 = false; // flaky: nodeList23.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList29);
        java.util.stream.Stream<javafx.scene.Node> nodeStream31 = null; // flaky: nodeList29.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator32 = null; // flaky: nodeList29.spliterator();
        boolean boolean33 = false; // flaky: nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList29);
// flaky:         nodeList29.clear();
        java.util.Iterator<javafx.scene.Node> nodeItor35 = null; // flaky: nodeList29.iterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream31);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor35);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        boolean boolean6 = false; // flaky: nodeList3.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor7 = null; // flaky: nodeList3.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = null; // flaky: nodeList3.listIterator();
        javafx.scene.Node node10 = null; // flaky: nodeList3.get(1);
        java.lang.Class<?> wildcardClass11 = null; // flaky: nodeList3.getClass();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor7);
// flaky:         org.junit.Assert.assertNotNull(nodeItor8);
// flaky:         org.junit.Assert.assertNotNull(node10);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        boolean boolean6 = false; // flaky: nodeList3.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor7 = null; // flaky: nodeList3.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor9 = null; // flaky: nodeList3.listIterator((int) ' ');
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor7);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean14 = nodeList1.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor15 = nodeList1.iterator();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node17 = nodeList1.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(nodeItor15);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean5 = false; // flaky: nodeList3.equals((java.lang.Object) (byte) 1);
        javafx.css.Styleable[] styleableArray6 = new javafx.css.Styleable[] {};
        javafx.css.Styleable[] styleableArray7 = null; // flaky: nodeList3.toArray(styleableArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList10 = null; // flaky: nodeList3.subList((int) (short) 1, 0);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(styleableArray6);
// flaky:         org.junit.Assert.assertNotNull(styleableArray7);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = nodeList7.remove(obj9);
        boolean boolean11 = nodeList7.isEmpty();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray15 = nodeList7.toArray(strArray14);
        java.lang.CharSequence[] charSequenceArray16 = nodeList1.toArray((java.lang.CharSequence[]) strArray14);
        Interface.WoodTable woodTable17 = null;
        Interface.WoodTotalValues woodTotalValues18 = null;
        Interface.AddWood addWood19 = null; // flaky: new Interface.AddWood(woodTable17, woodTotalValues18);
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood19.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood19.getAll();
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        boolean boolean25 = nodeList23.isEmpty();
        int int27 = nodeList23.lastIndexOf((java.lang.Object) 100);
        int int29 = nodeList23.lastIndexOf((java.lang.Object) 10);
        boolean boolean30 = false; // flaky: nodeList21.retainAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood33.getAll();
        boolean boolean36 = false; // flaky: nodeList23.addAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        java.lang.Object obj40 = null;
        boolean boolean41 = nodeList38.remove(obj40);
        javafx.scene.Node node42 = null;
        boolean boolean43 = nodeList38.add(node42);
        java.util.ListIterator<javafx.scene.Node> nodeItor44 = nodeList38.listIterator();
        boolean boolean45 = nodeList23.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        boolean boolean46 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        javafx.scene.Node[] nodeArray48 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList49 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList49, nodeArray48);
        java.lang.Object obj51 = null;
        boolean boolean52 = nodeList49.remove(obj51);
        boolean boolean53 = nodeList49.isEmpty();
        javafx.scene.Node[] nodeArray54 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList55 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList55, nodeArray54);
        Interface.WoodTable woodTable58 = null;
        Interface.WoodTotalValues woodTotalValues59 = null;
        Interface.AddWood addWood60 = null; // flaky: new Interface.AddWood(woodTable58, woodTotalValues59);
        java.util.ArrayList<javafx.scene.Node> nodeList61 = null; // flaky: addWood60.getAll();
        boolean boolean62 = false; // flaky: nodeList55.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList61);
        int int64 = nodeList55.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray66 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList67 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList67, nodeArray66);
        boolean boolean69 = nodeList67.isEmpty();
        int int71 = nodeList67.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable72 = null;
        Interface.WoodTotalValues woodTotalValues73 = null;
        Interface.AddWood addWood74 = null; // flaky: new Interface.AddWood(woodTable72, woodTotalValues73);
        java.util.ArrayList<javafx.scene.Node> nodeList75 = null; // flaky: addWood74.getAll();
        boolean boolean77 = false; // flaky: nodeList75.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node79 = null;
        javafx.scene.Node node80 = null; // flaky: nodeList75.set((int) (byte) 1, node79);
        boolean boolean81 = nodeList67.add(node80);
        javafx.scene.Node node82 = null; // flaky: nodeList55.set((int) (short) 0, node80);
        boolean boolean83 = nodeList49.add(node82);
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.add((int) '4', node82);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(charSequenceArray16);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList61);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        int int15 = nodeList11.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean21 = false; // flaky: nodeList19.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node23 = null;
        javafx.scene.Node node24 = null; // flaky: nodeList19.set((int) (byte) 1, node23);
        boolean boolean25 = nodeList11.add(node24);
// flaky:         nodeList1.add(1, node24);
        java.util.Iterator<javafx.scene.Node> nodeItor27 = nodeList1.iterator();
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        Interface.WoodTable woodTable32 = null;
        Interface.WoodTotalValues woodTotalValues33 = null;
        Interface.AddWood addWood34 = null; // flaky: new Interface.AddWood(woodTable32, woodTotalValues33);
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood34.getAll();
        boolean boolean36 = false; // flaky: nodeList29.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList35);
        java.util.stream.Stream<javafx.scene.Node> nodeStream37 = null; // flaky: nodeList35.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator38 = null; // flaky: nodeList35.spliterator();
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        java.lang.Object obj42 = null;
        boolean boolean43 = nodeList40.remove(obj42);
        boolean boolean44 = false; // flaky: nodeList35.removeAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable51 = null;
        Interface.WoodTotalValues woodTotalValues52 = null;
        Interface.AddWood addWood53 = null; // flaky: new Interface.AddWood(woodTable51, woodTotalValues52);
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood53.getAll();
        boolean boolean56 = false; // flaky: nodeList54.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node58 = null;
        javafx.scene.Node node59 = null; // flaky: nodeList54.set((int) (byte) 1, node58);
        boolean boolean60 = nodeList46.add(node59);
        boolean boolean61 = false; // flaky: nodeList35.add(node59);
        javafx.scene.Node[] nodeArray62 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList63 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList63, nodeArray62);
        Interface.WoodTable woodTable66 = null;
        Interface.WoodTotalValues woodTotalValues67 = null;
        Interface.AddWood addWood68 = null; // flaky: new Interface.AddWood(woodTable66, woodTotalValues67);
        java.util.ArrayList<javafx.scene.Node> nodeList69 = null; // flaky: addWood68.getAll();
        boolean boolean70 = false; // flaky: nodeList63.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList69);
        java.util.stream.Stream<javafx.scene.Node> nodeStream71 = null; // flaky: nodeList69.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator72 = null; // flaky: nodeList69.spliterator();
        javafx.scene.Node[] nodeArray73 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList74 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList74, nodeArray73);
        boolean boolean76 = nodeList74.isEmpty();
        int int78 = nodeList74.lastIndexOf((java.lang.Object) 100);
        boolean boolean79 = nodeList74.isEmpty();
        boolean boolean80 = false; // flaky: nodeList69.contains((java.lang.Object) boolean79);
        boolean boolean81 = false; // flaky: nodeList35.addAll((java.util.Collection<javafx.scene.Node>) nodeList69);
        java.util.stream.Stream<javafx.scene.Node> nodeStream82 = null; // flaky: nodeList69.parallelStream();
        boolean boolean83 = false; // flaky: nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList69);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeItor27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream37);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream71);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator72);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList35.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList41);
        java.util.stream.Stream<javafx.scene.Node> nodeStream43 = null; // flaky: nodeList41.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator44 = null; // flaky: nodeList41.spliterator();
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        boolean boolean51 = nodeList46.isEmpty();
        boolean boolean52 = false; // flaky: nodeList41.contains((java.lang.Object) boolean51);
        boolean boolean53 = false; // flaky: nodeList7.addAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        int int54 = 0; // flaky: nodeList7.size();
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTotalValues woodTotalValues56 = null;
        Interface.AddWood addWood57 = null; // flaky: new Interface.AddWood(woodTable55, woodTotalValues56);
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood57.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList59 = null; // flaky: addWood57.getAll();
        javafx.scene.Node[] nodeArray60 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList61 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList61, nodeArray60);
        boolean boolean63 = nodeList61.isEmpty();
        int int65 = nodeList61.lastIndexOf((java.lang.Object) 100);
        int int67 = nodeList61.lastIndexOf((java.lang.Object) 10);
        boolean boolean68 = false; // flaky: nodeList59.retainAll((java.util.Collection<javafx.scene.Node>) nodeList61);
        boolean boolean70 = false; // flaky: nodeList59.contains((java.lang.Object) false);
        Interface.WoodTable woodTable71 = null;
        Interface.WoodTotalValues woodTotalValues72 = null;
        Interface.AddWood addWood73 = null; // flaky: new Interface.AddWood(woodTable71, woodTotalValues72);
        java.util.ArrayList<javafx.scene.Node> nodeList74 = null; // flaky: addWood73.getAll();
        boolean boolean75 = false; // flaky: nodeList74.isEmpty();
        boolean boolean77 = false; // flaky: nodeList74.equals((java.lang.Object) 100);
        int int78 = 0; // flaky: nodeList59.lastIndexOf((java.lang.Object) nodeList74);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator79 = null; // flaky: nodeList74.spliterator();
        boolean boolean80 = false; // flaky: nodeList7.remove((java.lang.Object) nodeList74);
        java.lang.Class<?> wildcardClass81 = null; // flaky: nodeList74.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream43);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator44);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 11 + "'", int54 == 11);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
// flaky:         org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        int int28 = nodeList24.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        boolean boolean34 = false; // flaky: nodeList32.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node36 = null;
        javafx.scene.Node node37 = null; // flaky: nodeList32.set((int) (byte) 1, node36);
        boolean boolean38 = nodeList24.add(node37);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        java.lang.Object obj42 = null;
        boolean boolean43 = nodeList40.remove(obj42);
        boolean boolean44 = nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        boolean boolean45 = nodeList24.isEmpty();
        boolean boolean46 = nodeList6.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        int int47 = nodeList24.size();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood33.getAll();
        boolean boolean37 = false; // flaky: nodeList22.addAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator38 = nodeList22.spliterator();
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        boolean boolean43 = nodeList22.containsAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        int int44 = nodeList22.size();
        java.lang.Object[] objArray45 = nodeList22.toArray();
        java.lang.Class<?> wildcardClass46 = nodeList22.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        int int12 = nodeList1.size();
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        boolean boolean17 = nodeList15.isEmpty();
        int int19 = nodeList15.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        boolean boolean25 = false; // flaky: nodeList23.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node27 = null;
        javafx.scene.Node node28 = null; // flaky: nodeList23.set((int) (byte) 1, node27);
        boolean boolean29 = nodeList15.add(node28);
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.add((int) (byte) 10, node28);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: woodTotalValues2.getAll();
// flaky:         woodTotalValues2.redraw((double) 2, (double) 5);
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
// flaky:         addWood2.redraw(0.0d, (double) 1.0f);
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: addWood2.getAll();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node12 = null; // flaky: nodeList10.get((int) (byte) 10);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = nodeList23.remove(obj25);
        javafx.scene.Node node27 = null;
        boolean boolean28 = nodeList23.add(node27);
        boolean boolean29 = nodeList17.equals((java.lang.Object) boolean28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor31 = nodeList17.listIterator(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream20 = null; // flaky: nodeList8.stream();
        Interface.WoodTable woodTable22 = null;
        Interface.WoodTotalValues woodTotalValues23 = null;
        Interface.AddWood addWood24 = null; // flaky: new Interface.AddWood(woodTable22, woodTotalValues23);
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood24.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood24.getAll();
        javafx.scene.Node[] nodeArray27 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList28 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList28, nodeArray27);
        boolean boolean30 = nodeList28.isEmpty();
        int int32 = nodeList28.lastIndexOf((java.lang.Object) 100);
        int int34 = nodeList28.lastIndexOf((java.lang.Object) 10);
        boolean boolean35 = false; // flaky: nodeList26.retainAll((java.util.Collection<javafx.scene.Node>) nodeList28);
        boolean boolean37 = false; // flaky: nodeList26.contains((java.lang.Object) false);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList41.isEmpty();
        boolean boolean44 = false; // flaky: nodeList41.equals((java.lang.Object) 100);
        int int45 = 0; // flaky: nodeList26.lastIndexOf((java.lang.Object) nodeList41);
        int int46 = 0; // flaky: nodeList26.size();
        boolean boolean47 = false; // flaky: nodeList8.addAll((int) (byte) 0, (java.util.Collection<javafx.scene.Node>) nodeList26);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream20);
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = nodeList7.remove(obj9);
        boolean boolean11 = nodeList7.isEmpty();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray15 = nodeList7.toArray(strArray14);
        java.lang.CharSequence[] charSequenceArray16 = nodeList1.toArray((java.lang.CharSequence[]) strArray14);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node18 = nodeList1.remove((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(charSequenceArray16);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        boolean boolean6 = false; // flaky: nodeList3.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor7 = null; // flaky: nodeList3.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = null; // flaky: nodeList3.listIterator();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        Interface.WoodTable woodTable13 = null;
        Interface.WoodTotalValues woodTotalValues14 = null;
        Interface.AddWood addWood15 = null; // flaky: new Interface.AddWood(woodTable13, woodTotalValues14);
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood15.getAll();
        boolean boolean17 = false; // flaky: nodeList10.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList16);
        java.util.stream.Stream<javafx.scene.Node> nodeStream18 = null; // flaky: nodeList16.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator19 = null; // flaky: nodeList16.spliterator();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        boolean boolean25 = false; // flaky: nodeList16.removeAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        boolean boolean29 = nodeList27.isEmpty();
        int int31 = nodeList27.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable32 = null;
        Interface.WoodTotalValues woodTotalValues33 = null;
        Interface.AddWood addWood34 = null; // flaky: new Interface.AddWood(woodTable32, woodTotalValues33);
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood34.getAll();
        boolean boolean37 = false; // flaky: nodeList35.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node39 = null;
        javafx.scene.Node node40 = null; // flaky: nodeList35.set((int) (byte) 1, node39);
        boolean boolean41 = nodeList27.add(node40);
        boolean boolean42 = false; // flaky: nodeList16.add(node40);
        Interface.WoodTable woodTable43 = null;
        Interface.WoodTotalValues woodTotalValues44 = null;
        Interface.AddWood addWood45 = null; // flaky: new Interface.AddWood(woodTable43, woodTotalValues44);
        java.util.ArrayList<javafx.scene.Node> nodeList46 = null; // flaky: addWood45.getAll();
        boolean boolean47 = false; // flaky: nodeList46.isEmpty();
        boolean boolean48 = false; // flaky: nodeList16.addAll((java.util.Collection<javafx.scene.Node>) nodeList46);
        int int49 = 0; // flaky: nodeList46.size();
        boolean boolean50 = false; // flaky: nodeList3.retainAll((java.util.Collection<javafx.scene.Node>) nodeList46);
        javafx.scene.Node[] nodeArray52 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList53 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList53, nodeArray52);
        boolean boolean55 = nodeList53.isEmpty();
        int int57 = nodeList53.lastIndexOf((java.lang.Object) 100);
        boolean boolean58 = nodeList53.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream59 = nodeList53.stream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator60 = nodeList53.spliterator();
        java.util.stream.Stream<javafx.scene.Node> nodeStream61 = nodeList53.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = false; // flaky: nodeList3.addAll((-1), (java.util.Collection<javafx.scene.Node>) nodeList53);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor7);
// flaky:         org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream18);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator19);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeStream59);
        org.junit.Assert.assertNotNull(nodeSpliterator60);
        org.junit.Assert.assertNotNull(nodeStream61);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        boolean boolean19 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        javafx.scene.Node node25 = null;
        boolean boolean26 = nodeList21.add(node25);
        java.util.ListIterator<javafx.scene.Node> nodeItor27 = nodeList21.listIterator();
        boolean boolean28 = nodeList6.removeAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        java.util.stream.Stream<javafx.scene.Node> nodeStream29 = nodeList6.stream();
        java.util.stream.Stream<javafx.scene.Node> nodeStream30 = nodeList6.parallelStream();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeStream29);
        org.junit.Assert.assertNotNull(nodeStream30);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        boolean boolean34 = nodeList32.isEmpty();
        boolean boolean35 = nodeList32.isEmpty();
        nodeList32.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor38 = nodeList32.listIterator(0);
        Interface.WoodTable woodTable39 = null;
        Interface.WoodTotalValues woodTotalValues40 = null;
        Interface.AddWood addWood41 = null; // flaky: new Interface.AddWood(woodTable39, woodTotalValues40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: addWood41.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: addWood41.getAll();
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        int int51 = nodeList45.lastIndexOf((java.lang.Object) 10);
        boolean boolean52 = false; // flaky: nodeList43.retainAll((java.util.Collection<javafx.scene.Node>) nodeList45);
        boolean boolean54 = false; // flaky: nodeList43.contains((java.lang.Object) false);
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTotalValues woodTotalValues56 = null;
        Interface.AddWood addWood57 = null; // flaky: new Interface.AddWood(woodTable55, woodTotalValues56);
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood57.getAll();
        boolean boolean59 = false; // flaky: nodeList58.isEmpty();
        boolean boolean61 = false; // flaky: nodeList58.equals((java.lang.Object) 100);
        int int62 = 0; // flaky: nodeList43.lastIndexOf((java.lang.Object) nodeList58);
        java.lang.Object[] objArray63 = null; // flaky: nodeList43.toArray();
        int int64 = nodeList32.lastIndexOf((java.lang.Object) objArray63);
        java.util.stream.Stream<javafx.scene.Node> nodeStream65 = nodeList32.stream();
        int int66 = nodeList22.indexOf((java.lang.Object) nodeStream65);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator67 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList22.replaceAll(nodeUnaryOperator67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(nodeItor38);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(nodeStream65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        Interface.WoodTable woodTable3 = null;
        Interface.WoodTotalValues woodTotalValues4 = null;
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable3, woodTotalValues4);
        java.util.ArrayList<javafx.scene.Node> nodeList6 = null; // flaky: addWood5.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood5.getAll();
        int int8 = 0; // flaky: nodeList2.indexOf((java.lang.Object) addWood5);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood5.getAll();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor11 = null; // flaky: nodeList9.listIterator(11);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList6);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        boolean boolean6 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream7 = nodeList1.stream();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        java.lang.Object obj12 = null;
        boolean boolean13 = nodeList10.remove(obj12);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = nodeList15.remove(obj17);
        javafx.scene.Node[] nodeArray19 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList20 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList20, nodeArray19);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean27 = false; // flaky: nodeList20.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList26);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = nodeList30.add(node43);
// flaky:         nodeList20.add(1, node43);
        boolean boolean46 = nodeList15.retainAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        boolean boolean47 = nodeList10.retainAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        boolean boolean48 = nodeList1.addAll((int) (short) 0, (java.util.Collection<javafx.scene.Node>) nodeList20);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator49 = nodeList1.spliterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeStream7);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator49);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        Interface.WoodTable woodTable3 = null;
        Interface.WoodTotalValues woodTotalValues4 = null; // flaky: new Interface.WoodTotalValues(woodTable3);
// flaky:         woodTotalValues4.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: woodTotalValues4.getAll();
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        boolean boolean14 = false; // flaky: nodeList12.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        boolean boolean19 = nodeList17.isEmpty();
        int int21 = nodeList17.lastIndexOf((java.lang.Object) 100);
        int int23 = nodeList17.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood26.getAll();
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        int int36 = nodeList30.lastIndexOf((java.lang.Object) 10);
        boolean boolean37 = false; // flaky: nodeList28.retainAll((java.util.Collection<javafx.scene.Node>) nodeList30);
        boolean boolean38 = nodeList17.containsAll((java.util.Collection<javafx.scene.Node>) nodeList30);
        boolean boolean39 = false; // flaky: nodeList12.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList17);
        boolean boolean40 = false; // flaky: nodeList8.addAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean46 = false; // flaky: nodeList44.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray48 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList49 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList49, nodeArray48);
        boolean boolean51 = nodeList49.isEmpty();
        int int53 = nodeList49.lastIndexOf((java.lang.Object) 100);
        int int55 = nodeList49.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable56 = null;
        Interface.WoodTotalValues woodTotalValues57 = null;
        Interface.AddWood addWood58 = null; // flaky: new Interface.AddWood(woodTable56, woodTotalValues57);
        java.util.ArrayList<javafx.scene.Node> nodeList59 = null; // flaky: addWood58.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList60 = null; // flaky: addWood58.getAll();
        javafx.scene.Node[] nodeArray61 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList62 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList62, nodeArray61);
        boolean boolean64 = nodeList62.isEmpty();
        int int66 = nodeList62.lastIndexOf((java.lang.Object) 100);
        int int68 = nodeList62.lastIndexOf((java.lang.Object) 10);
        boolean boolean69 = false; // flaky: nodeList60.retainAll((java.util.Collection<javafx.scene.Node>) nodeList62);
        boolean boolean70 = nodeList49.containsAll((java.util.Collection<javafx.scene.Node>) nodeList62);
        boolean boolean71 = false; // flaky: nodeList44.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList49);
        boolean boolean72 = false; // flaky: nodeList12.contains((java.lang.Object) nodeList44);
        boolean boolean73 = false; // flaky: nodeList2.contains((java.lang.Object) nodeList44);
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList59);
// flaky:         org.junit.Assert.assertNotNull(nodeList60);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        java.lang.Object obj12 = null;
        boolean boolean13 = nodeList10.remove(obj12);
        javafx.scene.Node node14 = null;
        boolean boolean15 = nodeList10.add(node14);
        java.util.ListIterator<javafx.scene.Node> nodeItor16 = nodeList10.listIterator();
        boolean boolean17 = false; // flaky: nodeList8.contains((java.lang.Object) nodeList10);
        java.util.Iterator<javafx.scene.Node> nodeItor18 = nodeList10.iterator();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeItor18);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        int int10 = nodeList1.indexOf((java.lang.Object) true);
        javafx.scene.Node node12 = null; // flaky: nodeList1.get((int) (byte) 0);
        java.util.Iterator<javafx.scene.Node> nodeItor13 = nodeList1.iterator();
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = nodeList15.remove(obj17);
        javafx.scene.Node[] nodeArray19 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList20 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList20, nodeArray19);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean27 = false; // flaky: nodeList20.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList26);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = nodeList30.add(node43);
// flaky:         nodeList20.add(1, node43);
        boolean boolean46 = nodeList15.retainAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        javafx.scene.Node[] nodeArray47 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList48 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList48, nodeArray47);
        java.lang.Object obj50 = null;
        boolean boolean51 = nodeList48.remove(obj50);
        javafx.scene.Node[] nodeArray52 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList53 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList53, nodeArray52);
        Interface.WoodTable woodTable56 = null;
        Interface.WoodTotalValues woodTotalValues57 = null;
        Interface.AddWood addWood58 = null; // flaky: new Interface.AddWood(woodTable56, woodTotalValues57);
        java.util.ArrayList<javafx.scene.Node> nodeList59 = null; // flaky: addWood58.getAll();
        boolean boolean60 = false; // flaky: nodeList53.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList59);
        javafx.scene.Node[] nodeArray62 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList63 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList63, nodeArray62);
        boolean boolean65 = nodeList63.isEmpty();
        int int67 = nodeList63.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable68 = null;
        Interface.WoodTotalValues woodTotalValues69 = null;
        Interface.AddWood addWood70 = null; // flaky: new Interface.AddWood(woodTable68, woodTotalValues69);
        java.util.ArrayList<javafx.scene.Node> nodeList71 = null; // flaky: addWood70.getAll();
        boolean boolean73 = false; // flaky: nodeList71.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node75 = null;
        javafx.scene.Node node76 = null; // flaky: nodeList71.set((int) (byte) 1, node75);
        boolean boolean77 = nodeList63.add(node76);
// flaky:         nodeList53.add(1, node76);
        boolean boolean79 = nodeList48.retainAll((java.util.Collection<javafx.scene.Node>) nodeList53);
        boolean boolean80 = nodeList15.retainAll((java.util.Collection<javafx.scene.Node>) nodeList48);
        int int81 = nodeList1.lastIndexOf((java.lang.Object) nodeList15);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
// flaky:         org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(nodeItor13);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList59);
// flaky:         org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        int int19 = nodeList13.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood22.getAll();
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        boolean boolean28 = nodeList26.isEmpty();
        int int30 = nodeList26.lastIndexOf((java.lang.Object) 100);
        int int32 = nodeList26.lastIndexOf((java.lang.Object) 10);
        boolean boolean33 = false; // flaky: nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        boolean boolean34 = nodeList13.containsAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = false; // flaky: nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        int int45 = nodeList1.lastIndexOf((java.lang.Object) nodeList13);
        Interface.WoodTable woodTable46 = null;
        Interface.WoodTotalValues woodTotalValues47 = null; // flaky: new Interface.WoodTotalValues(woodTable46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: woodTotalValues47.getAll();
        int int49 = nodeList13.lastIndexOf((java.lang.Object) woodTotalValues47);
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: woodTotalValues47.getAll();
        javafx.scene.Node node51 = null;
        boolean boolean52 = false; // flaky: nodeList50.add(node51);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean5 = false; // flaky: nodeList3.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray7 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList8 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList8, nodeArray7);
        boolean boolean10 = nodeList8.isEmpty();
        int int12 = nodeList8.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable13 = null;
        Interface.WoodTotalValues woodTotalValues14 = null;
        Interface.AddWood addWood15 = null; // flaky: new Interface.AddWood(woodTable13, woodTotalValues14);
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood15.getAll();
        boolean boolean18 = false; // flaky: nodeList16.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node20 = null;
        javafx.scene.Node node21 = null; // flaky: nodeList16.set((int) (byte) 1, node20);
        boolean boolean22 = nodeList8.add(node21);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        java.lang.Object obj26 = null;
        boolean boolean27 = nodeList24.remove(obj26);
        boolean boolean28 = nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        Interface.WoodTable woodTable33 = null;
        Interface.WoodTotalValues woodTotalValues34 = null;
        Interface.AddWood addWood35 = null; // flaky: new Interface.AddWood(woodTable33, woodTotalValues34);
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood35.getAll();
        boolean boolean37 = false; // flaky: nodeList30.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList36);
        java.util.stream.Stream<javafx.scene.Node> nodeStream38 = null; // flaky: nodeList36.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator39 = null; // flaky: nodeList36.spliterator();
        boolean boolean40 = false; // flaky: nodeList8.addAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        java.util.Iterator<javafx.scene.Node> nodeItor41 = null; // flaky: nodeList36.iterator();
        javafx.scene.Node node43 = null; // flaky: nodeList36.remove(1);
        // The following exception was thrown during execution in test generation
        try {
// flaky:             nodeList3.add((int) '#', node43);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream38);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor41);
// flaky:         org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray9 = nodeList1.toArray(strArray8);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        int int15 = nodeList11.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean21 = false; // flaky: nodeList19.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node23 = null;
        javafx.scene.Node node24 = null; // flaky: nodeList19.set((int) (byte) 1, node23);
        boolean boolean25 = nodeList11.add(node24);
        javafx.scene.Node[] nodeArray27 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList28 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList28, nodeArray27);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        boolean boolean35 = false; // flaky: nodeList28.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList34);
        int int37 = nodeList28.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        int int44 = nodeList40.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable45 = null;
        Interface.WoodTotalValues woodTotalValues46 = null;
        Interface.AddWood addWood47 = null; // flaky: new Interface.AddWood(woodTable45, woodTotalValues46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: addWood47.getAll();
        boolean boolean50 = false; // flaky: nodeList48.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node52 = null;
        javafx.scene.Node node53 = null; // flaky: nodeList48.set((int) (byte) 1, node52);
        boolean boolean54 = nodeList40.add(node53);
        javafx.scene.Node node55 = null; // flaky: nodeList28.set((int) (short) 0, node53);
        javafx.scene.Node node56 = nodeList11.set((int) (byte) 0, node53);
        boolean boolean57 = nodeList1.add(node56);
        java.util.stream.Stream<javafx.scene.Node> nodeStream58 = nodeList1.parallelStream();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
// flaky:         org.junit.Assert.assertNotNull(node55);
// flaky:         org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(nodeStream58);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
// flaky:         woodTotalValues1.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: woodTotalValues1.getAll();
        int int6 = 0; // flaky: nodeList5.size();
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node node5 = null;
        boolean boolean6 = nodeList1.add(node5);
        java.util.ListIterator<javafx.scene.Node> nodeItor7 = nodeList1.listIterator();
        int int9 = nodeList1.lastIndexOf((java.lang.Object) (byte) 100);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        java.lang.Object obj13 = null;
        boolean boolean14 = nodeList11.remove(obj13);
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        boolean boolean18 = nodeList16.isEmpty();
        int int20 = nodeList16.lastIndexOf((java.lang.Object) 100);
        boolean boolean21 = nodeList11.equals((java.lang.Object) nodeList16);
        Interface.WoodTable woodTable22 = null;
        Interface.WoodTotalValues woodTotalValues23 = null;
        Interface.AddWood addWood24 = null; // flaky: new Interface.AddWood(woodTable22, woodTotalValues23);
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood24.getAll();
// flaky:         addWood24.redraw((double) 10.0f, (double) 0L);
        boolean boolean29 = nodeList11.contains((java.lang.Object) 10.0f);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList11);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node32 = nodeList1.remove(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList8.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor22 = null; // flaky: nodeList8.listIterator(0);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood29.getAll();
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        boolean boolean35 = nodeList33.isEmpty();
        int int37 = nodeList33.lastIndexOf((java.lang.Object) 100);
        int int39 = nodeList33.lastIndexOf((java.lang.Object) 10);
        boolean boolean40 = false; // flaky: nodeList31.retainAll((java.util.Collection<javafx.scene.Node>) nodeList33);
        boolean boolean41 = false; // flaky: nodeList24.removeAll((java.util.Collection<javafx.scene.Node>) nodeList31);
        java.util.List<javafx.scene.Node> nodeList44 = null; // flaky: nodeList31.subList(0, (int) (byte) 0);
        boolean boolean45 = false; // flaky: nodeList8.contains((java.lang.Object) nodeList44);
        javafx.scene.Node[] nodeArray47 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList48 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList48, nodeArray47);
        java.lang.Object obj50 = null;
        boolean boolean51 = nodeList48.remove(obj50);
        javafx.scene.Node[] nodeArray52 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList53 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList53, nodeArray52);
        boolean boolean55 = nodeList53.isEmpty();
        int int57 = nodeList53.lastIndexOf((java.lang.Object) 100);
        boolean boolean58 = nodeList53.isEmpty();
        nodeList53.clear();
        boolean boolean60 = nodeList48.removeAll((java.util.Collection<javafx.scene.Node>) nodeList53);
        Interface.WoodTable woodTable61 = null;
        Interface.WoodTotalValues woodTotalValues62 = null;
        Interface.AddWood addWood63 = null; // flaky: new Interface.AddWood(woodTable61, woodTotalValues62);
        java.util.ArrayList<javafx.scene.Node> nodeList64 = null; // flaky: addWood63.getAll();
// flaky:         addWood63.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList68 = null; // flaky: addWood63.getAll();
        boolean boolean69 = false; // flaky: nodeList53.addAll((java.util.Collection<javafx.scene.Node>) nodeList68);
        javafx.scene.Node[] nodeArray70 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList71 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList71, nodeArray70);
        boolean boolean73 = nodeList71.isEmpty();
        int int75 = nodeList71.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable76 = null;
        Interface.WoodTotalValues woodTotalValues77 = null;
        Interface.AddWood addWood78 = null; // flaky: new Interface.AddWood(woodTable76, woodTotalValues77);
        java.util.ArrayList<javafx.scene.Node> nodeList79 = null; // flaky: addWood78.getAll();
        boolean boolean81 = false; // flaky: nodeList79.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node83 = null;
        javafx.scene.Node node84 = null; // flaky: nodeList79.set((int) (byte) 1, node83);
        boolean boolean85 = nodeList71.add(node84);
        javafx.scene.Node[] nodeArray86 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList87 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList87, nodeArray86);
        java.lang.Object obj89 = null;
        boolean boolean90 = nodeList87.remove(obj89);
        boolean boolean91 = nodeList71.retainAll((java.util.Collection<javafx.scene.Node>) nodeList87);
        boolean boolean92 = nodeList71.isEmpty();
        boolean boolean93 = nodeList53.retainAll((java.util.Collection<javafx.scene.Node>) nodeList71);
        java.lang.Object[] objArray94 = nodeList71.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = false; // flaky: nodeList8.addAll((int) (short) 10, (java.util.Collection<javafx.scene.Node>) nodeList71);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
// flaky:         org.junit.Assert.assertNotNull(nodeItor22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList64);
// flaky:         org.junit.Assert.assertNotNull(nodeList68);
// flaky:         org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(nodeArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[]");
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable8 = null;
        Interface.WoodTotalValues woodTotalValues9 = null;
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable8, woodTotalValues9);
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood10.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood10.getAll();
        javafx.scene.Node[] nodeArray13 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList14 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList14, nodeArray13);
        boolean boolean16 = nodeList14.isEmpty();
        int int18 = nodeList14.lastIndexOf((java.lang.Object) 100);
        int int20 = nodeList14.lastIndexOf((java.lang.Object) 10);
        boolean boolean21 = false; // flaky: nodeList12.retainAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        boolean boolean22 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        java.util.ListIterator<javafx.scene.Node> nodeItor24 = nodeList1.listIterator(0);
        java.util.Iterator<javafx.scene.Node> nodeItor25 = nodeList1.iterator();
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.replaceAll(nodeUnaryOperator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeItor24);
        org.junit.Assert.assertNotNull(nodeItor25);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray7 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList8 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList8, nodeArray7);
        boolean boolean10 = nodeList8.isEmpty();
        int int12 = nodeList8.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable13 = null;
        Interface.WoodTotalValues woodTotalValues14 = null;
        Interface.AddWood addWood15 = null; // flaky: new Interface.AddWood(woodTable13, woodTotalValues14);
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood15.getAll();
        boolean boolean18 = false; // flaky: nodeList16.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node20 = null;
        javafx.scene.Node node21 = null; // flaky: nodeList16.set((int) (byte) 1, node20);
        boolean boolean22 = nodeList8.add(node21);
        javafx.scene.Node node23 = null; // flaky: nodeList5.set((int) (short) 0, node21);
        java.util.stream.Stream<javafx.scene.Node> nodeStream24 = null; // flaky: nodeList5.parallelStream();
        java.util.stream.Stream<javafx.scene.Node> nodeStream25 = null; // flaky: nodeList5.parallelStream();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertNotNull(node23);
// flaky:         org.junit.Assert.assertNotNull(nodeStream24);
// flaky:         org.junit.Assert.assertNotNull(nodeStream25);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues2.getAll();
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
// flaky:         woodTotalValues2.redraw((double) 0L, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues2.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        Interface.AddWood addWood3 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood3.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood11.getAll();
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        boolean boolean17 = nodeList15.isEmpty();
        int int19 = nodeList15.lastIndexOf((java.lang.Object) 100);
        int int21 = nodeList15.lastIndexOf((java.lang.Object) 10);
        boolean boolean22 = false; // flaky: nodeList13.retainAll((java.util.Collection<javafx.scene.Node>) nodeList15);
        boolean boolean23 = false; // flaky: nodeList6.removeAll((java.util.Collection<javafx.scene.Node>) nodeList13);
        boolean boolean24 = false; // flaky: nodeList13.isEmpty();
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        java.lang.Object obj28 = null;
        boolean boolean29 = nodeList26.remove(obj28);
        boolean boolean30 = nodeList26.isEmpty();
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean39 = false; // flaky: nodeList32.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList38);
        int int41 = nodeList32.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        boolean boolean46 = nodeList44.isEmpty();
        int int48 = nodeList44.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable49 = null;
        Interface.WoodTotalValues woodTotalValues50 = null;
        Interface.AddWood addWood51 = null; // flaky: new Interface.AddWood(woodTable49, woodTotalValues50);
        java.util.ArrayList<javafx.scene.Node> nodeList52 = null; // flaky: addWood51.getAll();
        boolean boolean54 = false; // flaky: nodeList52.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node56 = null;
        javafx.scene.Node node57 = null; // flaky: nodeList52.set((int) (byte) 1, node56);
        boolean boolean58 = nodeList44.add(node57);
        javafx.scene.Node node59 = null; // flaky: nodeList32.set((int) (short) 0, node57);
        boolean boolean60 = nodeList26.add(node59);
        boolean boolean62 = nodeList26.remove((java.lang.Object) 100L);
        int int63 = 0; // flaky: nodeList13.lastIndexOf((java.lang.Object) nodeList26);
        java.lang.Object[] objArray64 = nodeList26.toArray();
        java.util.stream.Stream<javafx.scene.Node> nodeStream65 = nodeList26.stream();
        boolean boolean66 = false; // flaky: nodeList4.contains((java.lang.Object) nodeStream65);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(nodeStream65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = nodeList23.remove(obj25);
        javafx.scene.Node[] nodeArray27 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList28 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList28, nodeArray27);
        boolean boolean30 = nodeList28.isEmpty();
        int int32 = nodeList28.lastIndexOf((java.lang.Object) 100);
        boolean boolean33 = nodeList28.isEmpty();
        nodeList28.clear();
        boolean boolean35 = nodeList23.removeAll((java.util.Collection<javafx.scene.Node>) nodeList28);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood38.getAll();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        boolean boolean44 = nodeList42.isEmpty();
        int int46 = nodeList42.lastIndexOf((java.lang.Object) 100);
        int int48 = nodeList42.lastIndexOf((java.lang.Object) 10);
        boolean boolean49 = false; // flaky: nodeList40.retainAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        javafx.scene.Node[] nodeArray50 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList51 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList51, nodeArray50);
        boolean boolean53 = nodeList51.isEmpty();
        int int55 = nodeList51.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable56 = null;
        Interface.WoodTotalValues woodTotalValues57 = null;
        Interface.AddWood addWood58 = null; // flaky: new Interface.AddWood(woodTable56, woodTotalValues57);
        java.util.ArrayList<javafx.scene.Node> nodeList59 = null; // flaky: addWood58.getAll();
        boolean boolean61 = false; // flaky: nodeList59.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node63 = null;
        javafx.scene.Node node64 = null; // flaky: nodeList59.set((int) (byte) 1, node63);
        boolean boolean65 = nodeList51.add(node64);
        java.util.stream.Stream<javafx.scene.Node> nodeStream66 = nodeList51.stream();
        boolean boolean67 = nodeList42.equals((java.lang.Object) nodeStream66);
        boolean boolean68 = nodeList42.isEmpty();
        boolean boolean69 = nodeList23.addAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        java.util.ListIterator<javafx.scene.Node> nodeItor70 = nodeList23.listIterator();
        java.lang.Object[] objArray71 = nodeList23.toArray();
        boolean boolean72 = nodeList17.contains((java.lang.Object) objArray71);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeStream66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeItor70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        boolean boolean37 = nodeList35.isEmpty();
        int int39 = nodeList35.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null;
        Interface.AddWood addWood42 = null; // flaky: new Interface.AddWood(woodTable40, woodTotalValues41);
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: addWood42.getAll();
        boolean boolean45 = false; // flaky: nodeList43.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node47 = null;
        javafx.scene.Node node48 = null; // flaky: nodeList43.set((int) (byte) 1, node47);
        boolean boolean49 = nodeList35.add(node48);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood52.getAll();
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        boolean boolean58 = nodeList56.isEmpty();
        int int60 = nodeList56.lastIndexOf((java.lang.Object) 100);
        int int62 = nodeList56.lastIndexOf((java.lang.Object) 10);
        boolean boolean63 = false; // flaky: nodeList54.retainAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        boolean boolean64 = nodeList35.removeAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        boolean boolean65 = false; // flaky: nodeList7.containsAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList68 = null; // flaky: nodeList7.subList((int) 'a', 100);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean30 = false; // flaky: nodeList23.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList29);
        java.util.stream.Stream<javafx.scene.Node> nodeStream31 = null; // flaky: nodeList29.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator32 = null; // flaky: nodeList29.spliterator();
        boolean boolean33 = false; // flaky: nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList29);
// flaky:         nodeList29.clear();
        javafx.scene.Node[] nodeArray35 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList36 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList36, nodeArray35);
        Interface.WoodTable woodTable39 = null;
        Interface.WoodTotalValues woodTotalValues40 = null;
        Interface.AddWood addWood41 = null; // flaky: new Interface.AddWood(woodTable39, woodTotalValues40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: addWood41.getAll();
        boolean boolean43 = false; // flaky: nodeList36.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList42);
        java.util.stream.Stream<javafx.scene.Node> nodeStream44 = null; // flaky: nodeList42.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator45 = null; // flaky: nodeList42.spliterator();
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        boolean boolean49 = nodeList47.isEmpty();
        int int51 = nodeList47.lastIndexOf((java.lang.Object) 100);
        boolean boolean52 = nodeList47.isEmpty();
        boolean boolean53 = false; // flaky: nodeList42.contains((java.lang.Object) boolean52);
        int int54 = 0; // flaky: nodeList29.indexOf((java.lang.Object) boolean53);
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        boolean boolean58 = nodeList56.isEmpty();
        int int60 = nodeList56.lastIndexOf((java.lang.Object) 100);
        int int62 = nodeList56.lastIndexOf((java.lang.Object) 10);
        boolean boolean63 = nodeList56.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream64 = nodeList56.stream();
        javafx.scene.Node[] nodeArray65 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList66 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList66, nodeArray65);
        Interface.WoodTable woodTable69 = null;
        Interface.WoodTotalValues woodTotalValues70 = null;
        Interface.AddWood addWood71 = null; // flaky: new Interface.AddWood(woodTable69, woodTotalValues70);
        java.util.ArrayList<javafx.scene.Node> nodeList72 = null; // flaky: addWood71.getAll();
        boolean boolean73 = false; // flaky: nodeList66.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList72);
        java.util.stream.Stream<javafx.scene.Node> nodeStream74 = null; // flaky: nodeList72.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator75 = null; // flaky: nodeList72.spliterator();
        Interface.WoodTable woodTable76 = null;
        Interface.WoodTotalValues woodTotalValues77 = null;
        Interface.AddWood addWood78 = null; // flaky: new Interface.AddWood(woodTable76, woodTotalValues77);
        java.util.ArrayList<javafx.scene.Node> nodeList79 = null; // flaky: addWood78.getAll();
        boolean boolean81 = false; // flaky: nodeList79.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node83 = null;
        javafx.scene.Node node84 = null; // flaky: nodeList79.set((int) (byte) 1, node83);
        java.util.ListIterator<javafx.scene.Node> nodeItor85 = null; // flaky: nodeList79.listIterator();
        int int86 = 0; // flaky: nodeList72.lastIndexOf((java.lang.Object) nodeList79);
        boolean boolean87 = false; // flaky: nodeList56.retainAll((java.util.Collection<javafx.scene.Node>) nodeList72);
        int int88 = 0; // flaky: nodeList29.lastIndexOf((java.lang.Object) nodeList72);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream31);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream44);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator45);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(nodeStream64);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList72);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream74);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator75);
// flaky:         org.junit.Assert.assertNotNull(nodeList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertNotNull(node84);
// flaky:         org.junit.Assert.assertNotNull(nodeItor85);
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood33.getAll();
        boolean boolean37 = false; // flaky: nodeList22.addAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator38 = nodeList22.spliterator();
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        boolean boolean43 = nodeList22.containsAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        int int44 = nodeList22.size();
        java.lang.Object[] objArray45 = nodeList22.toArray();
        nodeList22.clear();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(objArray45);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        boolean boolean25 = nodeList21.isEmpty();
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean34 = false; // flaky: nodeList27.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList33);
        int int36 = nodeList27.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray38 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList39 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList39, nodeArray38);
        boolean boolean41 = nodeList39.isEmpty();
        int int43 = nodeList39.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTotalValues woodTotalValues45 = null;
        Interface.AddWood addWood46 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood46.getAll();
        boolean boolean49 = false; // flaky: nodeList47.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node51 = null;
        javafx.scene.Node node52 = null; // flaky: nodeList47.set((int) (byte) 1, node51);
        boolean boolean53 = nodeList39.add(node52);
        javafx.scene.Node node54 = null; // flaky: nodeList27.set((int) (short) 0, node52);
        boolean boolean55 = nodeList21.add(node54);
        boolean boolean57 = nodeList21.remove((java.lang.Object) 100L);
        int int58 = 0; // flaky: nodeList8.lastIndexOf((java.lang.Object) nodeList21);
        java.lang.Object[] objArray59 = nodeList21.toArray();
        Interface.WoodTable woodTable60 = null;
        Interface.WoodTotalValues woodTotalValues61 = null;
        Interface.AddWood addWood62 = null; // flaky: new Interface.AddWood(woodTable60, woodTotalValues61);
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: addWood62.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList64 = null; // flaky: addWood62.getAll();
        javafx.scene.Node[] nodeArray65 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList66 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList66, nodeArray65);
        boolean boolean68 = nodeList66.isEmpty();
        int int70 = nodeList66.lastIndexOf((java.lang.Object) 100);
        int int72 = nodeList66.lastIndexOf((java.lang.Object) 10);
        boolean boolean73 = false; // flaky: nodeList64.retainAll((java.util.Collection<javafx.scene.Node>) nodeList66);
        Interface.WoodTable woodTable74 = null;
        Interface.WoodTotalValues woodTotalValues75 = null;
        Interface.AddWood addWood76 = null; // flaky: new Interface.AddWood(woodTable74, woodTotalValues75);
        java.util.ArrayList<javafx.scene.Node> nodeList77 = null; // flaky: addWood76.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList78 = null; // flaky: addWood76.getAll();
        boolean boolean79 = false; // flaky: nodeList66.addAll((java.util.Collection<javafx.scene.Node>) nodeList78);
        javafx.scene.Node[] nodeArray80 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList81 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList81, nodeArray80);
        java.lang.Object obj83 = null;
        boolean boolean84 = nodeList81.remove(obj83);
        javafx.scene.Node node85 = null;
        boolean boolean86 = nodeList81.add(node85);
        java.util.ListIterator<javafx.scene.Node> nodeItor87 = nodeList81.listIterator();
        boolean boolean88 = nodeList66.removeAll((java.util.Collection<javafx.scene.Node>) nodeList81);
        java.util.stream.Stream<javafx.scene.Node> nodeStream89 = nodeList66.parallelStream();
        boolean boolean90 = nodeList21.containsAll((java.util.Collection<javafx.scene.Node>) nodeList66);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(objArray59);
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
// flaky:         org.junit.Assert.assertNotNull(nodeList64);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList77);
// flaky:         org.junit.Assert.assertNotNull(nodeList78);
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(nodeItor87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(nodeStream89);
// flaky:         org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood33.getAll();
        boolean boolean37 = false; // flaky: nodeList22.addAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator38 = nodeList22.spliterator();
        java.lang.Class<?> wildcardClass39 = nodeSpliterator38.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        int int28 = nodeList24.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        boolean boolean34 = false; // flaky: nodeList32.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node36 = null;
        javafx.scene.Node node37 = null; // flaky: nodeList32.set((int) (byte) 1, node36);
        boolean boolean38 = nodeList24.add(node37);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        java.lang.Object obj42 = null;
        boolean boolean43 = nodeList40.remove(obj42);
        boolean boolean44 = nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        boolean boolean45 = nodeList24.isEmpty();
        boolean boolean46 = nodeList6.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator47 = nodeList6.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList50 = nodeList6.subList(0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(0) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator47);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        int int16 = nodeList7.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean29 = false; // flaky: nodeList27.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node31 = null;
        javafx.scene.Node node32 = null; // flaky: nodeList27.set((int) (byte) 1, node31);
        boolean boolean33 = nodeList19.add(node32);
        javafx.scene.Node node34 = null; // flaky: nodeList7.set((int) (short) 0, node32);
        boolean boolean35 = nodeList1.add(node34);
        boolean boolean37 = nodeList1.remove((java.lang.Object) 100L);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        java.lang.Object obj42 = null;
        boolean boolean43 = nodeList40.remove(obj42);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        boolean boolean50 = nodeList45.isEmpty();
        nodeList45.clear();
        boolean boolean52 = nodeList40.removeAll((java.util.Collection<javafx.scene.Node>) nodeList45);
        boolean boolean53 = nodeList40.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor54 = nodeList40.iterator();
        int int55 = nodeList40.size();
        boolean boolean56 = nodeList1.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList40);
        javafx.scene.Node[] nodeArray57 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList58 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList58, nodeArray57);
        java.lang.Object obj60 = null;
        boolean boolean61 = nodeList58.remove(obj60);
        boolean boolean62 = nodeList58.isEmpty();
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray66 = nodeList58.toArray(strArray65);
        java.lang.CharSequence[] charSequenceArray67 = nodeList40.toArray((java.lang.CharSequence[]) strArray66);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(nodeItor54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(charSequenceArray67);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        int int16 = nodeList7.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean29 = false; // flaky: nodeList27.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node31 = null;
        javafx.scene.Node node32 = null; // flaky: nodeList27.set((int) (byte) 1, node31);
        boolean boolean33 = nodeList19.add(node32);
        javafx.scene.Node node34 = null; // flaky: nodeList7.set((int) (short) 0, node32);
        boolean boolean35 = nodeList1.add(node34);
        nodeList1.clear();
        java.util.Iterator<javafx.scene.Node> nodeItor37 = nodeList1.iterator();
        javafx.scene.Node[] nodeArray38 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList39 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList39, nodeArray38);
        boolean boolean41 = nodeList39.isEmpty();
        int int43 = nodeList39.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTotalValues woodTotalValues45 = null;
        Interface.AddWood addWood46 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood46.getAll();
        boolean boolean49 = false; // flaky: nodeList47.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node51 = null;
        javafx.scene.Node node52 = null; // flaky: nodeList47.set((int) (byte) 1, node51);
        boolean boolean53 = nodeList39.add(node52);
        Interface.WoodTable woodTable54 = null;
        Interface.WoodTotalValues woodTotalValues55 = null;
        Interface.AddWood addWood56 = null; // flaky: new Interface.AddWood(woodTable54, woodTotalValues55);
        java.util.ArrayList<javafx.scene.Node> nodeList57 = null; // flaky: addWood56.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood56.getAll();
        javafx.scene.Node[] nodeArray59 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList60 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList60, nodeArray59);
        boolean boolean62 = nodeList60.isEmpty();
        int int64 = nodeList60.lastIndexOf((java.lang.Object) 100);
        int int66 = nodeList60.lastIndexOf((java.lang.Object) 10);
        boolean boolean67 = false; // flaky: nodeList58.retainAll((java.util.Collection<javafx.scene.Node>) nodeList60);
        boolean boolean68 = nodeList39.removeAll((java.util.Collection<javafx.scene.Node>) nodeList60);
        javafx.scene.Node[] nodeArray69 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList70 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList70, nodeArray69);
        boolean boolean72 = nodeList70.isEmpty();
        int int74 = nodeList70.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable75 = null;
        Interface.WoodTotalValues woodTotalValues76 = null;
        Interface.AddWood addWood77 = null; // flaky: new Interface.AddWood(woodTable75, woodTotalValues76);
        java.util.ArrayList<javafx.scene.Node> nodeList78 = null; // flaky: addWood77.getAll();
        boolean boolean80 = false; // flaky: nodeList78.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node82 = null;
        javafx.scene.Node node83 = null; // flaky: nodeList78.set((int) (byte) 1, node82);
        boolean boolean84 = nodeList70.add(node83);
        javafx.scene.Node[] nodeArray85 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList86 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList86, nodeArray85);
        java.lang.Object obj88 = null;
        boolean boolean89 = nodeList86.remove(obj88);
        boolean boolean90 = nodeList70.retainAll((java.util.Collection<javafx.scene.Node>) nodeList86);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator91 = nodeList86.spliterator();
        boolean boolean92 = nodeList60.remove((java.lang.Object) nodeSpliterator91);
        int int93 = nodeList1.indexOf((java.lang.Object) boolean92);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(nodeItor37);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList57);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        int int16 = nodeList7.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean29 = false; // flaky: nodeList27.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node31 = null;
        javafx.scene.Node node32 = null; // flaky: nodeList27.set((int) (byte) 1, node31);
        boolean boolean33 = nodeList19.add(node32);
        javafx.scene.Node node34 = null; // flaky: nodeList7.set((int) (short) 0, node32);
        boolean boolean35 = nodeList1.add(node34);
        java.util.Iterator<javafx.scene.Node> nodeItor36 = nodeList1.iterator();
        java.util.stream.Stream<javafx.scene.Node> nodeStream37 = nodeList1.parallelStream();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(nodeItor36);
        org.junit.Assert.assertNotNull(nodeStream37);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood33.getAll();
        boolean boolean37 = false; // flaky: nodeList22.addAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator38 = nodeList22.spliterator();
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        boolean boolean43 = nodeList22.containsAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTable woodTable45 = null;
        Interface.WoodTotalValues woodTotalValues46 = null; // flaky: new Interface.WoodTotalValues(woodTable45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: woodTotalValues46.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: woodTotalValues46.getAll();
// flaky:         woodTotalValues46.redraw((double) (short) 100, 10.0d);
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues46);
// flaky:         woodTotalValues46.redraw(10.0d, (double) 1.0f);
        java.util.ArrayList<javafx.scene.Node> nodeList56 = null; // flaky: woodTotalValues46.getAll();
        int int57 = nodeList40.indexOf((java.lang.Object) nodeList56);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
// flaky:         org.junit.Assert.assertNotNull(nodeList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        Interface.WoodTable woodTable17 = null;
        Interface.WoodTotalValues woodTotalValues18 = null;
        Interface.AddWood addWood19 = null; // flaky: new Interface.AddWood(woodTable17, woodTotalValues18);
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood19.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood19.getAll();
        int int22 = 0; // flaky: nodeList21.size();
        boolean boolean23 = false; // flaky: nodeList7.containsAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        boolean boolean27 = nodeList25.isEmpty();
        int int29 = nodeList25.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean35 = false; // flaky: nodeList33.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node37 = null;
        javafx.scene.Node node38 = null; // flaky: nodeList33.set((int) (byte) 1, node37);
        boolean boolean39 = nodeList25.add(node38);
        javafx.scene.Node[] nodeArray40 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList41 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList41, nodeArray40);
        java.lang.Object obj43 = null;
        boolean boolean44 = nodeList41.remove(obj43);
        boolean boolean45 = nodeList25.retainAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        nodeList41.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor47 = nodeList41.listIterator();
        boolean boolean48 = false; // flaky: nodeList21.containsAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean54 = false; // flaky: nodeList53.isEmpty();
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        Interface.WoodTable woodTable60 = null;
        Interface.WoodTotalValues woodTotalValues61 = null;
        Interface.AddWood addWood62 = null; // flaky: new Interface.AddWood(woodTable60, woodTotalValues61);
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: addWood62.getAll();
        boolean boolean64 = false; // flaky: nodeList57.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList63);
        javafx.scene.Node[] nodeArray66 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList67 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList67, nodeArray66);
        boolean boolean69 = nodeList67.isEmpty();
        int int71 = nodeList67.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable72 = null;
        Interface.WoodTotalValues woodTotalValues73 = null;
        Interface.AddWood addWood74 = null; // flaky: new Interface.AddWood(woodTable72, woodTotalValues73);
        java.util.ArrayList<javafx.scene.Node> nodeList75 = null; // flaky: addWood74.getAll();
        boolean boolean77 = false; // flaky: nodeList75.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node79 = null;
        javafx.scene.Node node80 = null; // flaky: nodeList75.set((int) (byte) 1, node79);
        boolean boolean81 = nodeList67.add(node80);
// flaky:         nodeList57.add(1, node80);
        javafx.scene.Node node83 = null; // flaky: nodeList53.set(0, node80);
// flaky:         nodeList21.add((int) (byte) 1, node80);
        java.util.ListIterator<javafx.scene.Node> nodeItor85 = null; // flaky: nodeList21.listIterator();
        javafx.scene.Node[] nodeArray87 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList88 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList88, nodeArray87);
        java.lang.Object obj90 = null;
        boolean boolean91 = nodeList88.remove(obj90);
        boolean boolean92 = nodeList88.isEmpty();
        java.lang.String[] strArray95 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray96 = nodeList88.toArray(strArray95);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator97 = nodeList88.spliterator();
        boolean boolean98 = false; // flaky: nodeList21.addAll((int) (byte) 0, (java.util.Collection<javafx.scene.Node>) nodeList88);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(nodeItor47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertNotNull(node83);
// flaky:         org.junit.Assert.assertNotNull(nodeItor85);
        org.junit.Assert.assertNotNull(nodeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(nodeSpliterator97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
// flaky:         woodTotalValues3.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        java.lang.Object[] objArray10 = null; // flaky: nodeList9.toArray();
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
// flaky:         org.junit.Assert.assertNotNull(objArray10);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = nodeList1.isEmpty();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        boolean boolean17 = nodeList15.isEmpty();
        int int19 = nodeList15.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        boolean boolean25 = false; // flaky: nodeList23.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node27 = null;
        javafx.scene.Node node28 = null; // flaky: nodeList23.set((int) (byte) 1, node27);
        boolean boolean29 = nodeList15.add(node28);
        java.util.stream.Stream<javafx.scene.Node> nodeStream30 = nodeList15.stream();
        boolean boolean31 = nodeList6.equals((java.lang.Object) nodeStream30);
        java.lang.Object obj32 = null;
        int int33 = nodeList6.indexOf(obj32);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
// flaky:         addWood14.redraw((double) 10.0f, (double) 0L);
        boolean boolean19 = nodeList1.contains((java.lang.Object) 10.0f);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        boolean boolean25 = false; // flaky: nodeList23.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray27 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList28 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList28, nodeArray27);
        boolean boolean30 = nodeList28.isEmpty();
        int int32 = nodeList28.lastIndexOf((java.lang.Object) 100);
        int int34 = nodeList28.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood37.getAll();
        javafx.scene.Node[] nodeArray40 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList41 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList41, nodeArray40);
        boolean boolean43 = nodeList41.isEmpty();
        int int45 = nodeList41.lastIndexOf((java.lang.Object) 100);
        int int47 = nodeList41.lastIndexOf((java.lang.Object) 10);
        boolean boolean48 = false; // flaky: nodeList39.retainAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        boolean boolean49 = nodeList28.containsAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        boolean boolean50 = false; // flaky: nodeList23.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList28);
        boolean boolean51 = false; // flaky: nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        javafx.scene.Node[] nodeArray52 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList53 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList53, nodeArray52);
        java.lang.Object obj55 = null;
        boolean boolean56 = nodeList53.remove(obj55);
        boolean boolean57 = nodeList53.isEmpty();
        javafx.scene.Node[] nodeArray58 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList59 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList59, nodeArray58);
        Interface.WoodTable woodTable62 = null;
        Interface.WoodTotalValues woodTotalValues63 = null;
        Interface.AddWood addWood64 = null; // flaky: new Interface.AddWood(woodTable62, woodTotalValues63);
        java.util.ArrayList<javafx.scene.Node> nodeList65 = null; // flaky: addWood64.getAll();
        boolean boolean66 = false; // flaky: nodeList59.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList65);
        int int68 = nodeList59.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray70 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList71 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList71, nodeArray70);
        boolean boolean73 = nodeList71.isEmpty();
        int int75 = nodeList71.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable76 = null;
        Interface.WoodTotalValues woodTotalValues77 = null;
        Interface.AddWood addWood78 = null; // flaky: new Interface.AddWood(woodTable76, woodTotalValues77);
        java.util.ArrayList<javafx.scene.Node> nodeList79 = null; // flaky: addWood78.getAll();
        boolean boolean81 = false; // flaky: nodeList79.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node83 = null;
        javafx.scene.Node node84 = null; // flaky: nodeList79.set((int) (byte) 1, node83);
        boolean boolean85 = nodeList71.add(node84);
        javafx.scene.Node node86 = null; // flaky: nodeList59.set((int) (short) 0, node84);
        boolean boolean87 = nodeList53.add(node86);
        boolean boolean88 = nodeList1.add(node86);
        javafx.scene.Node[] nodeArray89 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList90 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList90, nodeArray89);
        Interface.WoodTable woodTable93 = null;
        Interface.WoodTotalValues woodTotalValues94 = null;
        Interface.AddWood addWood95 = null; // flaky: new Interface.AddWood(woodTable93, woodTotalValues94);
        java.util.ArrayList<javafx.scene.Node> nodeList96 = null; // flaky: addWood95.getAll();
        boolean boolean97 = false; // flaky: nodeList90.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList96);
        java.util.stream.Stream<javafx.scene.Node> nodeStream98 = null; // flaky: nodeList96.parallelStream();
        boolean boolean99 = nodeList1.contains((java.lang.Object) nodeList96);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
// flaky:         org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(nodeArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList96);
// flaky:         org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream98);
// flaky:         org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        int int16 = nodeList7.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean29 = false; // flaky: nodeList27.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node31 = null;
        javafx.scene.Node node32 = null; // flaky: nodeList27.set((int) (byte) 1, node31);
        boolean boolean33 = nodeList19.add(node32);
        javafx.scene.Node node34 = null; // flaky: nodeList7.set((int) (short) 0, node32);
        boolean boolean35 = nodeList1.add(node34);
        boolean boolean37 = nodeList1.remove((java.lang.Object) 100L);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        java.lang.Object obj42 = null;
        boolean boolean43 = nodeList40.remove(obj42);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        boolean boolean50 = nodeList45.isEmpty();
        nodeList45.clear();
        boolean boolean52 = nodeList40.removeAll((java.util.Collection<javafx.scene.Node>) nodeList45);
        boolean boolean53 = nodeList40.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor54 = nodeList40.iterator();
        int int55 = nodeList40.size();
        boolean boolean56 = nodeList1.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList40);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator57 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList40.replaceAll(nodeUnaryOperator57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(nodeItor54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        int int19 = nodeList13.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood22.getAll();
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        boolean boolean28 = nodeList26.isEmpty();
        int int30 = nodeList26.lastIndexOf((java.lang.Object) 100);
        int int32 = nodeList26.lastIndexOf((java.lang.Object) 10);
        boolean boolean33 = false; // flaky: nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        boolean boolean34 = nodeList13.containsAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = false; // flaky: nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        int int45 = nodeList1.lastIndexOf((java.lang.Object) nodeList13);
        Interface.WoodTable woodTable46 = null;
        Interface.WoodTotalValues woodTotalValues47 = null; // flaky: new Interface.WoodTotalValues(woodTable46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: woodTotalValues47.getAll();
        int int49 = nodeList13.lastIndexOf((java.lang.Object) woodTotalValues47);
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: woodTotalValues47.getAll();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node52 = null; // flaky: nodeList50.get((int) (short) 100);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: woodTotalValues2.getAll();
// flaky:         woodTotalValues2.redraw((double) 2, (double) 5);
// flaky:         woodTotalValues2.redraw((double) (byte) 1, (double) 1);
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: woodTotalValues2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: woodTotalValues2.getAll();
// flaky:         woodTotalValues2.redraw((double) (short) 1, 1.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: woodTotalValues2.getAll();
        Interface.AddWood addWood17 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
// flaky:         addWood17.redraw((double) 1, (double) 10);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        int int14 = nodeList6.size();
        boolean boolean15 = nodeList6.isEmpty();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = nodeList18.remove(obj20);
        javafx.scene.Node node22 = null;
        boolean boolean23 = nodeList18.add(node22);
        java.util.ListIterator<javafx.scene.Node> nodeItor24 = nodeList18.listIterator();
        Interface.WoodTable woodTable25 = null;
        Interface.WoodTotalValues woodTotalValues26 = null;
        Interface.AddWood addWood27 = null; // flaky: new Interface.AddWood(woodTable25, woodTotalValues26);
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood27.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood27.getAll();
        javafx.scene.Node[] nodeArray30 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList31 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList31, nodeArray30);
        boolean boolean33 = nodeList31.isEmpty();
        int int35 = nodeList31.lastIndexOf((java.lang.Object) 100);
        int int37 = nodeList31.lastIndexOf((java.lang.Object) 10);
        boolean boolean38 = false; // flaky: nodeList29.retainAll((java.util.Collection<javafx.scene.Node>) nodeList31);
        boolean boolean40 = false; // flaky: nodeList29.contains((java.lang.Object) false);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean45 = false; // flaky: nodeList44.isEmpty();
        boolean boolean47 = false; // flaky: nodeList44.equals((java.lang.Object) 100);
        int int48 = 0; // flaky: nodeList29.lastIndexOf((java.lang.Object) nodeList44);
        javafx.scene.Node[] nodeArray49 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList50 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList50, nodeArray49);
        java.lang.Object obj52 = null;
        boolean boolean53 = nodeList50.remove(obj52);
        javafx.scene.Node[] nodeArray54 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList55 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList55, nodeArray54);
        boolean boolean57 = nodeList55.isEmpty();
        int int59 = nodeList55.lastIndexOf((java.lang.Object) 100);
        boolean boolean60 = nodeList50.equals((java.lang.Object) nodeList55);
        Interface.WoodTable woodTable61 = null;
        Interface.WoodTotalValues woodTotalValues62 = null;
        Interface.AddWood addWood63 = null; // flaky: new Interface.AddWood(woodTable61, woodTotalValues62);
        java.util.ArrayList<javafx.scene.Node> nodeList64 = null; // flaky: addWood63.getAll();
// flaky:         addWood63.redraw((double) 10.0f, (double) 0L);
        boolean boolean68 = nodeList50.contains((java.lang.Object) 10.0f);
        boolean boolean69 = false; // flaky: nodeList44.contains((java.lang.Object) 10.0f);
        boolean boolean70 = false; // flaky: nodeList18.removeAll((java.util.Collection<javafx.scene.Node>) nodeList44);
        Interface.WoodTable woodTable71 = null;
        Interface.WoodTotalValues woodTotalValues72 = null;
        Interface.AddWood addWood73 = null; // flaky: new Interface.AddWood(woodTable71, woodTotalValues72);
        java.util.ArrayList<javafx.scene.Node> nodeList74 = null; // flaky: addWood73.getAll();
        boolean boolean75 = false; // flaky: nodeList74.isEmpty();
        boolean boolean77 = false; // flaky: nodeList74.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor78 = null; // flaky: nodeList74.iterator();
        boolean boolean79 = false; // flaky: nodeList44.equals((java.lang.Object) nodeList74);
        javafx.scene.Node[] nodeArray81 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList82 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList82, nodeArray81);
        Interface.WoodTable woodTable85 = null;
        Interface.WoodTotalValues woodTotalValues86 = null;
        Interface.AddWood addWood87 = null; // flaky: new Interface.AddWood(woodTable85, woodTotalValues86);
        java.util.ArrayList<javafx.scene.Node> nodeList88 = null; // flaky: addWood87.getAll();
        boolean boolean89 = false; // flaky: nodeList82.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList88);
        int int91 = nodeList82.indexOf((java.lang.Object) true);
        javafx.scene.Node node93 = null; // flaky: nodeList82.get((int) (byte) 0);
        javafx.scene.Node node94 = null; // flaky: nodeList44.set((int) (short) 0, node93);
        nodeList6.add(0, node94);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeItor24);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList88);
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
// flaky:         org.junit.Assert.assertNotNull(node93);
// flaky:         org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        Interface.WoodTable woodTable11 = null;
        Interface.WoodTotalValues woodTotalValues12 = null; // flaky: new Interface.WoodTotalValues(woodTable11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: woodTotalValues12.getAll();
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        int int19 = 0; // flaky: nodeList13.indexOf((java.lang.Object) addWood16);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        boolean boolean23 = nodeList21.isEmpty();
        int int25 = nodeList21.lastIndexOf((java.lang.Object) 100);
        int int27 = nodeList21.lastIndexOf((java.lang.Object) 10);
        boolean boolean28 = nodeList21.isEmpty();
        boolean boolean29 = false; // flaky: nodeList13.contains((java.lang.Object) nodeList21);
        int int30 = nodeList21.size();
        boolean boolean31 = nodeList1.equals((java.lang.Object) int30);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        java.util.stream.Stream<javafx.scene.Node> nodeStream16 = nodeList1.stream();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood23.getAll();
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        boolean boolean29 = nodeList27.isEmpty();
        int int31 = nodeList27.lastIndexOf((java.lang.Object) 100);
        int int33 = nodeList27.lastIndexOf((java.lang.Object) 10);
        boolean boolean34 = false; // flaky: nodeList25.retainAll((java.util.Collection<javafx.scene.Node>) nodeList27);
        boolean boolean35 = false; // flaky: nodeList18.removeAll((java.util.Collection<javafx.scene.Node>) nodeList25);
        boolean boolean36 = false; // flaky: nodeList25.isEmpty();
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        java.lang.Object obj40 = null;
        boolean boolean41 = nodeList38.remove(obj40);
        boolean boolean42 = nodeList38.isEmpty();
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        Interface.WoodTable woodTable47 = null;
        Interface.WoodTotalValues woodTotalValues48 = null;
        Interface.AddWood addWood49 = null; // flaky: new Interface.AddWood(woodTable47, woodTotalValues48);
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: addWood49.getAll();
        boolean boolean51 = false; // flaky: nodeList44.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList50);
        int int53 = nodeList44.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        boolean boolean58 = nodeList56.isEmpty();
        int int60 = nodeList56.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable61 = null;
        Interface.WoodTotalValues woodTotalValues62 = null;
        Interface.AddWood addWood63 = null; // flaky: new Interface.AddWood(woodTable61, woodTotalValues62);
        java.util.ArrayList<javafx.scene.Node> nodeList64 = null; // flaky: addWood63.getAll();
        boolean boolean66 = false; // flaky: nodeList64.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node68 = null;
        javafx.scene.Node node69 = null; // flaky: nodeList64.set((int) (byte) 1, node68);
        boolean boolean70 = nodeList56.add(node69);
        javafx.scene.Node node71 = null; // flaky: nodeList44.set((int) (short) 0, node69);
        boolean boolean72 = nodeList38.add(node71);
        boolean boolean74 = nodeList38.remove((java.lang.Object) 100L);
        int int75 = 0; // flaky: nodeList25.lastIndexOf((java.lang.Object) nodeList38);
        java.lang.Object[] objArray76 = nodeList38.toArray();
        javafx.scene.Node node78 = nodeList38.remove(0);
        boolean boolean79 = nodeList1.add(node78);
        nodeList1.clear();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeStream16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(objArray76);
// flaky:         org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList35.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList41);
        java.util.stream.Stream<javafx.scene.Node> nodeStream43 = null; // flaky: nodeList41.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator44 = null; // flaky: nodeList41.spliterator();
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        boolean boolean51 = nodeList46.isEmpty();
        boolean boolean52 = false; // flaky: nodeList41.contains((java.lang.Object) boolean51);
        boolean boolean53 = false; // flaky: nodeList7.addAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        int int54 = 0; // flaky: nodeList7.size();
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTotalValues woodTotalValues56 = null;
        Interface.AddWood addWood57 = null; // flaky: new Interface.AddWood(woodTable55, woodTotalValues56);
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood57.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList59 = null; // flaky: addWood57.getAll();
        javafx.scene.Node[] nodeArray60 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList61 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList61, nodeArray60);
        boolean boolean63 = nodeList61.isEmpty();
        int int65 = nodeList61.lastIndexOf((java.lang.Object) 100);
        int int67 = nodeList61.lastIndexOf((java.lang.Object) 10);
        boolean boolean68 = false; // flaky: nodeList59.retainAll((java.util.Collection<javafx.scene.Node>) nodeList61);
        boolean boolean70 = false; // flaky: nodeList59.contains((java.lang.Object) false);
        Interface.WoodTable woodTable71 = null;
        Interface.WoodTotalValues woodTotalValues72 = null;
        Interface.AddWood addWood73 = null; // flaky: new Interface.AddWood(woodTable71, woodTotalValues72);
        java.util.ArrayList<javafx.scene.Node> nodeList74 = null; // flaky: addWood73.getAll();
        boolean boolean75 = false; // flaky: nodeList74.isEmpty();
        boolean boolean77 = false; // flaky: nodeList74.equals((java.lang.Object) 100);
        int int78 = 0; // flaky: nodeList59.lastIndexOf((java.lang.Object) nodeList74);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator79 = null; // flaky: nodeList74.spliterator();
        boolean boolean80 = false; // flaky: nodeList7.remove((java.lang.Object) nodeList74);
        java.util.stream.Stream<javafx.scene.Node> nodeStream81 = null; // flaky: nodeList74.parallelStream();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream43);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator44);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 11 + "'", int54 == 11);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
// flaky:         org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeStream81);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        java.lang.Object obj12 = null;
        boolean boolean13 = nodeList10.remove(obj12);
        boolean boolean14 = nodeList10.isEmpty();
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        Interface.WoodTable woodTable19 = null;
        Interface.WoodTotalValues woodTotalValues20 = null;
        Interface.AddWood addWood21 = null; // flaky: new Interface.AddWood(woodTable19, woodTotalValues20);
        java.util.ArrayList<javafx.scene.Node> nodeList22 = null; // flaky: addWood21.getAll();
        boolean boolean23 = false; // flaky: nodeList16.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList22);
        int int25 = nodeList16.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray27 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList28 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList28, nodeArray27);
        boolean boolean30 = nodeList28.isEmpty();
        int int32 = nodeList28.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable33 = null;
        Interface.WoodTotalValues woodTotalValues34 = null;
        Interface.AddWood addWood35 = null; // flaky: new Interface.AddWood(woodTable33, woodTotalValues34);
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood35.getAll();
        boolean boolean38 = false; // flaky: nodeList36.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node40 = null;
        javafx.scene.Node node41 = null; // flaky: nodeList36.set((int) (byte) 1, node40);
        boolean boolean42 = nodeList28.add(node41);
        javafx.scene.Node node43 = null; // flaky: nodeList16.set((int) (short) 0, node41);
        boolean boolean44 = nodeList10.add(node43);
        boolean boolean45 = false; // flaky: nodeList8.add(node43);
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        boolean boolean49 = nodeList47.isEmpty();
        int int51 = nodeList47.lastIndexOf((java.lang.Object) 100);
        boolean boolean52 = nodeList47.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream53 = nodeList47.stream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator54 = nodeList47.spliterator();
        int int55 = 0; // flaky: nodeList8.lastIndexOf((java.lang.Object) nodeSpliterator54);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList22);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(nodeStream53);
        org.junit.Assert.assertNotNull(nodeSpliterator54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        boolean boolean19 = nodeList17.isEmpty();
        int int21 = nodeList17.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable22 = null;
        Interface.WoodTotalValues woodTotalValues23 = null;
        Interface.AddWood addWood24 = null; // flaky: new Interface.AddWood(woodTable22, woodTotalValues23);
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood24.getAll();
        boolean boolean27 = false; // flaky: nodeList25.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node29 = null;
        javafx.scene.Node node30 = null; // flaky: nodeList25.set((int) (byte) 1, node29);
        boolean boolean31 = nodeList17.add(node30);
// flaky:         nodeList7.add(1, node30);
        javafx.scene.Node node33 = null; // flaky: nodeList3.set(0, node30);
        java.util.Iterator<javafx.scene.Node> nodeItor34 = null; // flaky: nodeList3.iterator();
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null; // flaky: new Interface.WoodTotalValues(woodTable35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: woodTotalValues36.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: woodTotalValues36.getAll();
        java.util.Iterator<javafx.scene.Node> nodeItor39 = null; // flaky: nodeList38.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor40 = null; // flaky: nodeList38.listIterator();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = nodeList42.remove(obj44);
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        boolean boolean49 = nodeList47.isEmpty();
        int int51 = nodeList47.lastIndexOf((java.lang.Object) 100);
        boolean boolean52 = nodeList42.equals((java.lang.Object) nodeList47);
        Interface.WoodTable woodTable53 = null;
        Interface.WoodTotalValues woodTotalValues54 = null;
        Interface.AddWood addWood55 = null; // flaky: new Interface.AddWood(woodTable53, woodTotalValues54);
        java.util.ArrayList<javafx.scene.Node> nodeList56 = null; // flaky: addWood55.getAll();
// flaky:         addWood55.redraw((double) 10.0f, (double) 0L);
        boolean boolean60 = nodeList42.contains((java.lang.Object) 10.0f);
        Interface.WoodTable woodTable61 = null;
        Interface.WoodTotalValues woodTotalValues62 = null;
        Interface.AddWood addWood63 = null; // flaky: new Interface.AddWood(woodTable61, woodTotalValues62);
        java.util.ArrayList<javafx.scene.Node> nodeList64 = null; // flaky: addWood63.getAll();
        boolean boolean66 = false; // flaky: nodeList64.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray68 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList69 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList69, nodeArray68);
        boolean boolean71 = nodeList69.isEmpty();
        int int73 = nodeList69.lastIndexOf((java.lang.Object) 100);
        int int75 = nodeList69.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable76 = null;
        Interface.WoodTotalValues woodTotalValues77 = null;
        Interface.AddWood addWood78 = null; // flaky: new Interface.AddWood(woodTable76, woodTotalValues77);
        java.util.ArrayList<javafx.scene.Node> nodeList79 = null; // flaky: addWood78.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList80 = null; // flaky: addWood78.getAll();
        javafx.scene.Node[] nodeArray81 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList82 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList82, nodeArray81);
        boolean boolean84 = nodeList82.isEmpty();
        int int86 = nodeList82.lastIndexOf((java.lang.Object) 100);
        int int88 = nodeList82.lastIndexOf((java.lang.Object) 10);
        boolean boolean89 = false; // flaky: nodeList80.retainAll((java.util.Collection<javafx.scene.Node>) nodeList82);
        boolean boolean90 = nodeList69.containsAll((java.util.Collection<javafx.scene.Node>) nodeList82);
        boolean boolean91 = false; // flaky: nodeList64.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList69);
        boolean boolean92 = false; // flaky: nodeList42.retainAll((java.util.Collection<javafx.scene.Node>) nodeList64);
        boolean boolean93 = false; // flaky: nodeList38.remove((java.lang.Object) nodeList64);
        boolean boolean94 = false; // flaky: nodeList3.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertNotNull(node33);
// flaky:         org.junit.Assert.assertNotNull(nodeItor34);
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
// flaky:         org.junit.Assert.assertNotNull(nodeItor39);
// flaky:         org.junit.Assert.assertNotNull(nodeItor40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList79);
// flaky:         org.junit.Assert.assertNotNull(nodeList80);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        int int10 = nodeList1.indexOf((java.lang.Object) true);
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node13 = nodeList1.get((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(nodeStream11);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean5 = false; // flaky: nodeList3.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray7 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList8 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList8, nodeArray7);
        boolean boolean10 = nodeList8.isEmpty();
        int int12 = nodeList8.lastIndexOf((java.lang.Object) 100);
        int int14 = nodeList8.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable15 = null;
        Interface.WoodTotalValues woodTotalValues16 = null;
        Interface.AddWood addWood17 = null; // flaky: new Interface.AddWood(woodTable15, woodTotalValues16);
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood17.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood17.getAll();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        boolean boolean23 = nodeList21.isEmpty();
        int int25 = nodeList21.lastIndexOf((java.lang.Object) 100);
        int int27 = nodeList21.lastIndexOf((java.lang.Object) 10);
        boolean boolean28 = false; // flaky: nodeList19.retainAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        boolean boolean29 = nodeList8.containsAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        boolean boolean30 = false; // flaky: nodeList3.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList8);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null; // flaky: new Interface.WoodTotalValues(woodTable31);
// flaky:         woodTotalValues32.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: woodTotalValues32.getAll();
        boolean boolean37 = false; // flaky: nodeList3.contains((java.lang.Object) woodTotalValues32);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        boolean boolean27 = nodeList24.isEmpty();
        nodeList24.clear();
        boolean boolean29 = nodeList6.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        java.util.List<javafx.scene.Node> nodeList32 = nodeList6.subList(0, 0);
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = nodeList34.remove(obj36);
        javafx.scene.Node node38 = null;
        boolean boolean39 = nodeList34.add(node38);
        int int41 = nodeList34.indexOf((java.lang.Object) (short) 10);
        java.lang.Class<?> wildcardClass42 = nodeList34.getClass();
        int int43 = nodeList6.indexOf((java.lang.Object) wildcardClass42);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood14.getAll();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        int int24 = nodeList18.lastIndexOf((java.lang.Object) 10);
        boolean boolean25 = false; // flaky: nodeList16.retainAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = nodeList27.remove(obj29);
        boolean boolean31 = nodeList27.isEmpty();
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        boolean boolean40 = false; // flaky: nodeList33.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList39);
        int int42 = nodeList33.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
        javafx.scene.Node node60 = null; // flaky: nodeList33.set((int) (short) 0, node58);
        boolean boolean61 = nodeList27.add(node60);
        boolean boolean63 = nodeList27.remove((java.lang.Object) 100L);
        boolean boolean64 = nodeList18.remove((java.lang.Object) boolean63);
        boolean boolean65 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        java.lang.Object[] objArray66 = nodeList1.toArray();
        java.util.stream.Stream<javafx.scene.Node> nodeStream67 = nodeList1.parallelStream();
        java.lang.Object[] objArray68 = nodeList1.toArray();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(nodeStream67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
// flaky:         addWood14.redraw((double) 10.0f, (double) 0L);
        boolean boolean19 = nodeList1.contains((java.lang.Object) 10.0f);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        boolean boolean25 = false; // flaky: nodeList23.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray27 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList28 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList28, nodeArray27);
        boolean boolean30 = nodeList28.isEmpty();
        int int32 = nodeList28.lastIndexOf((java.lang.Object) 100);
        int int34 = nodeList28.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood37.getAll();
        javafx.scene.Node[] nodeArray40 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList41 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList41, nodeArray40);
        boolean boolean43 = nodeList41.isEmpty();
        int int45 = nodeList41.lastIndexOf((java.lang.Object) 100);
        int int47 = nodeList41.lastIndexOf((java.lang.Object) 10);
        boolean boolean48 = false; // flaky: nodeList39.retainAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        boolean boolean49 = nodeList28.containsAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        boolean boolean50 = false; // flaky: nodeList23.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList28);
        boolean boolean51 = false; // flaky: nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        javafx.scene.Node node53 = null;
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node54 = nodeList1.set(11, node53);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        boolean boolean34 = nodeList32.isEmpty();
        int int36 = nodeList32.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        boolean boolean42 = false; // flaky: nodeList40.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node44 = null;
        javafx.scene.Node node45 = null; // flaky: nodeList40.set((int) (byte) 1, node44);
        boolean boolean46 = nodeList32.add(node45);
        javafx.scene.Node[] nodeArray47 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList48 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList48, nodeArray47);
        java.lang.Object obj50 = null;
        boolean boolean51 = nodeList48.remove(obj50);
        boolean boolean52 = nodeList32.retainAll((java.util.Collection<javafx.scene.Node>) nodeList48);
        javafx.scene.Node[] nodeArray53 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList54 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList54, nodeArray53);
        Interface.WoodTable woodTable57 = null;
        Interface.WoodTotalValues woodTotalValues58 = null;
        Interface.AddWood addWood59 = null; // flaky: new Interface.AddWood(woodTable57, woodTotalValues58);
        java.util.ArrayList<javafx.scene.Node> nodeList60 = null; // flaky: addWood59.getAll();
        boolean boolean61 = false; // flaky: nodeList54.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList60);
        java.util.stream.Stream<javafx.scene.Node> nodeStream62 = null; // flaky: nodeList60.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator63 = null; // flaky: nodeList60.spliterator();
        boolean boolean64 = false; // flaky: nodeList32.addAll((java.util.Collection<javafx.scene.Node>) nodeList60);
// flaky:         nodeList60.clear();
        boolean boolean66 = false; // flaky: nodeList22.containsAll((java.util.Collection<javafx.scene.Node>) nodeList60);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream62);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        Interface.WoodTable woodTable11 = null;
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null; // flaky: new Interface.WoodTotalValues(woodTable12);
        java.util.ArrayList<javafx.scene.Node> nodeList14 = null; // flaky: woodTotalValues13.getAll();
        Interface.AddWood addWood15 = null; // flaky: new Interface.AddWood(woodTable11, woodTotalValues13);
        boolean boolean16 = false; // flaky: nodeList7.contains((java.lang.Object) addWood15);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
// flaky:         org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
// flaky:         woodTotalValues3.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
// flaky:         addWood8.redraw((double) (short) 1, (double) 5);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray7 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList8 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList8, nodeArray7);
        boolean boolean10 = nodeList8.isEmpty();
        Interface.WoodTable woodTable11 = null;
        Interface.WoodTotalValues woodTotalValues12 = null;
        Interface.AddWood addWood13 = null; // flaky: new Interface.AddWood(woodTable11, woodTotalValues12);
        java.util.ArrayList<javafx.scene.Node> nodeList14 = null; // flaky: addWood13.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood13.getAll();
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        boolean boolean19 = nodeList17.isEmpty();
        int int21 = nodeList17.lastIndexOf((java.lang.Object) 100);
        int int23 = nodeList17.lastIndexOf((java.lang.Object) 10);
        boolean boolean24 = false; // flaky: nodeList15.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        boolean boolean25 = false; // flaky: nodeList8.removeAll((java.util.Collection<javafx.scene.Node>) nodeList15);
        boolean boolean26 = false; // flaky: nodeList15.isEmpty();
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
        boolean boolean31 = false; // flaky: nodeList30.isEmpty();
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        boolean boolean41 = false; // flaky: nodeList34.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList40);
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        boolean boolean46 = nodeList44.isEmpty();
        int int48 = nodeList44.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable49 = null;
        Interface.WoodTotalValues woodTotalValues50 = null;
        Interface.AddWood addWood51 = null; // flaky: new Interface.AddWood(woodTable49, woodTotalValues50);
        java.util.ArrayList<javafx.scene.Node> nodeList52 = null; // flaky: addWood51.getAll();
        boolean boolean54 = false; // flaky: nodeList52.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node56 = null;
        javafx.scene.Node node57 = null; // flaky: nodeList52.set((int) (byte) 1, node56);
        boolean boolean58 = nodeList44.add(node57);
// flaky:         nodeList34.add(1, node57);
        javafx.scene.Node node60 = null; // flaky: nodeList30.set(0, node57);
        boolean boolean61 = false; // flaky: nodeList15.add(node57);
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.add((int) ' ', node57);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList14);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertNotNull(node60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        int int5 = nodeList1.size();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        boolean boolean15 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream16 = nodeList1.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node18 = nodeList1.remove((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeStream16);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
        java.util.Iterator<javafx.scene.Node> nodeItor4 = null; // flaky: nodeList3.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor5 = null; // flaky: nodeList3.listIterator();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        boolean boolean9 = nodeList7.isEmpty();
        int int11 = nodeList7.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
        boolean boolean17 = false; // flaky: nodeList15.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node19 = null;
        javafx.scene.Node node20 = null; // flaky: nodeList15.set((int) (byte) 1, node19);
        boolean boolean21 = nodeList7.add(node20);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = nodeList23.remove(obj25);
        boolean boolean27 = nodeList7.retainAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        Interface.WoodTable woodTable32 = null;
        Interface.WoodTotalValues woodTotalValues33 = null;
        Interface.AddWood addWood34 = null; // flaky: new Interface.AddWood(woodTable32, woodTotalValues33);
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood34.getAll();
        boolean boolean36 = false; // flaky: nodeList29.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList35);
        java.util.stream.Stream<javafx.scene.Node> nodeStream37 = null; // flaky: nodeList35.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator38 = null; // flaky: nodeList35.spliterator();
        boolean boolean39 = false; // flaky: nodeList7.addAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        java.util.Iterator<javafx.scene.Node> nodeItor40 = null; // flaky: nodeList35.iterator();
        boolean boolean41 = false; // flaky: nodeList3.removeAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        javafx.scene.Node[] nodeArray42 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList43 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList43, nodeArray42);
        java.lang.Object obj45 = null;
        boolean boolean46 = nodeList43.remove(obj45);
        boolean boolean47 = nodeList43.isEmpty();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray51 = nodeList43.toArray(strArray50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable<java.lang.String>[] strComparableArray52 = null; // flaky: nodeList35.toArray((java.lang.Comparable<java.lang.String>[]) strArray51);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeItor4);
// flaky:         org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream37);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator38);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        boolean boolean25 = nodeList23.isEmpty();
        int int27 = nodeList23.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        boolean boolean33 = false; // flaky: nodeList31.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node35 = null;
        javafx.scene.Node node36 = null; // flaky: nodeList31.set((int) (byte) 1, node35);
        boolean boolean37 = nodeList23.add(node36);
        java.util.stream.Stream<javafx.scene.Node> nodeStream38 = nodeList23.stream();
        boolean boolean39 = nodeList1.equals((java.lang.Object) nodeList23);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null; // flaky: new Interface.WoodTotalValues(woodTable40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: woodTotalValues41.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: woodTotalValues41.getAll();
        boolean boolean44 = nodeList1.contains((java.lang.Object) nodeList43);
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        int int52 = nodeList46.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor53 = nodeList46.listIterator();
        int int54 = nodeList46.size();
        boolean boolean55 = nodeList46.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream56 = nodeList46.parallelStream();
        javafx.scene.Node[] nodeArray57 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList58 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList58, nodeArray57);
        boolean boolean60 = nodeList58.isEmpty();
        int int62 = nodeList58.lastIndexOf((java.lang.Object) 100);
        int int64 = nodeList58.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable65 = null;
        Interface.WoodTotalValues woodTotalValues66 = null;
        Interface.AddWood addWood67 = null; // flaky: new Interface.AddWood(woodTable65, woodTotalValues66);
        java.util.ArrayList<javafx.scene.Node> nodeList68 = null; // flaky: addWood67.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList69 = null; // flaky: addWood67.getAll();
        javafx.scene.Node[] nodeArray70 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList71 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList71, nodeArray70);
        boolean boolean73 = nodeList71.isEmpty();
        int int75 = nodeList71.lastIndexOf((java.lang.Object) 100);
        int int77 = nodeList71.lastIndexOf((java.lang.Object) 10);
        boolean boolean78 = false; // flaky: nodeList69.retainAll((java.util.Collection<javafx.scene.Node>) nodeList71);
        boolean boolean79 = nodeList58.containsAll((java.util.Collection<javafx.scene.Node>) nodeList71);
        Interface.WoodTable woodTable80 = null;
        Interface.WoodTotalValues woodTotalValues81 = null;
        Interface.AddWood addWood82 = null; // flaky: new Interface.AddWood(woodTable80, woodTotalValues81);
        java.util.ArrayList<javafx.scene.Node> nodeList83 = null; // flaky: addWood82.getAll();
        boolean boolean85 = false; // flaky: nodeList83.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node87 = null;
        javafx.scene.Node node88 = null; // flaky: nodeList83.set((int) (byte) 1, node87);
        boolean boolean89 = false; // flaky: nodeList58.removeAll((java.util.Collection<javafx.scene.Node>) nodeList83);
        int int90 = nodeList46.lastIndexOf((java.lang.Object) nodeList58);
        Interface.WoodTable woodTable91 = null;
        Interface.WoodTotalValues woodTotalValues92 = null; // flaky: new Interface.WoodTotalValues(woodTable91);
        java.util.ArrayList<javafx.scene.Node> nodeList93 = null; // flaky: woodTotalValues92.getAll();
        int int94 = nodeList58.lastIndexOf((java.lang.Object) woodTotalValues92);
        boolean boolean95 = false; // flaky: nodeList43.remove((java.lang.Object) nodeList58);
        java.lang.Object[] objArray96 = nodeList58.toArray();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(nodeItor53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(nodeStream56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList68);
// flaky:         org.junit.Assert.assertNotNull(nodeList69);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(objArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray96), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray96), "[]");
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((double) '#', (double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues1.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        boolean boolean25 = nodeList21.isEmpty();
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean34 = false; // flaky: nodeList27.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList33);
        int int36 = nodeList27.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray38 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList39 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList39, nodeArray38);
        boolean boolean41 = nodeList39.isEmpty();
        int int43 = nodeList39.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTotalValues woodTotalValues45 = null;
        Interface.AddWood addWood46 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood46.getAll();
        boolean boolean49 = false; // flaky: nodeList47.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node51 = null;
        javafx.scene.Node node52 = null; // flaky: nodeList47.set((int) (byte) 1, node51);
        boolean boolean53 = nodeList39.add(node52);
        javafx.scene.Node node54 = null; // flaky: nodeList27.set((int) (short) 0, node52);
        boolean boolean55 = nodeList21.add(node54);
        boolean boolean57 = nodeList21.remove((java.lang.Object) 100L);
        int int58 = 0; // flaky: nodeList8.lastIndexOf((java.lang.Object) nodeList21);
        Interface.WoodTable woodTable59 = null;
        Interface.WoodTotalValues woodTotalValues60 = null; // flaky: new Interface.WoodTotalValues(woodTable59);
// flaky:         woodTotalValues60.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList64 = null; // flaky: woodTotalValues60.getAll();
        boolean boolean65 = false; // flaky: nodeList8.contains((java.lang.Object) woodTotalValues60);
        javafx.scene.Node node67 = null;
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node68 = null; // flaky: nodeList8.set(100, node67);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        boolean boolean17 = nodeList15.isEmpty();
        int int19 = nodeList15.lastIndexOf((java.lang.Object) 100);
        java.lang.Class<?> wildcardClass20 = nodeList15.getClass();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        java.lang.Class<?> wildcardClass27 = nodeList22.getClass();
        java.lang.reflect.AnnotatedElement[] annotatedElementArray28 = new java.lang.reflect.AnnotatedElement[] { wildcardClass20, wildcardClass27 };
        java.lang.reflect.AnnotatedElement[] annotatedElementArray29 = nodeList6.toArray(annotatedElementArray28);
        javafx.scene.Node[] nodeArray30 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList31 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList31, nodeArray30);
        java.lang.Object obj33 = null;
        boolean boolean34 = nodeList31.remove(obj33);
        javafx.scene.Node[] nodeArray35 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList36 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList36, nodeArray35);
        Interface.WoodTable woodTable39 = null;
        Interface.WoodTotalValues woodTotalValues40 = null;
        Interface.AddWood addWood41 = null; // flaky: new Interface.AddWood(woodTable39, woodTotalValues40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: addWood41.getAll();
        boolean boolean43 = false; // flaky: nodeList36.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList42);
        java.util.stream.Stream<javafx.scene.Node> nodeStream44 = null; // flaky: nodeList42.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator45 = null; // flaky: nodeList42.spliterator();
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        java.lang.Object obj49 = null;
        boolean boolean50 = nodeList47.remove(obj49);
        boolean boolean51 = false; // flaky: nodeList42.removeAll((java.util.Collection<javafx.scene.Node>) nodeList47);
        int int52 = nodeList31.lastIndexOf((java.lang.Object) nodeList47);
        javafx.scene.Node[] nodeArray53 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList54 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList54, nodeArray53);
        boolean boolean56 = nodeList54.isEmpty();
        int int58 = nodeList54.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable59 = null;
        Interface.WoodTotalValues woodTotalValues60 = null;
        Interface.AddWood addWood61 = null; // flaky: new Interface.AddWood(woodTable59, woodTotalValues60);
        java.util.ArrayList<javafx.scene.Node> nodeList62 = null; // flaky: addWood61.getAll();
        boolean boolean64 = false; // flaky: nodeList62.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node66 = null;
        javafx.scene.Node node67 = null; // flaky: nodeList62.set((int) (byte) 1, node66);
        boolean boolean68 = nodeList54.add(node67);
        javafx.scene.Node[] nodeArray69 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList70 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList70, nodeArray69);
        java.lang.Object obj72 = null;
        boolean boolean73 = nodeList70.remove(obj72);
        boolean boolean74 = nodeList54.retainAll((java.util.Collection<javafx.scene.Node>) nodeList70);
        javafx.scene.Node[] nodeArray75 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList76 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList76, nodeArray75);
        Interface.WoodTable woodTable79 = null;
        Interface.WoodTotalValues woodTotalValues80 = null;
        Interface.AddWood addWood81 = null; // flaky: new Interface.AddWood(woodTable79, woodTotalValues80);
        java.util.ArrayList<javafx.scene.Node> nodeList82 = null; // flaky: addWood81.getAll();
        boolean boolean83 = false; // flaky: nodeList76.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList82);
        java.util.stream.Stream<javafx.scene.Node> nodeStream84 = null; // flaky: nodeList82.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator85 = null; // flaky: nodeList82.spliterator();
        boolean boolean86 = false; // flaky: nodeList54.addAll((java.util.Collection<javafx.scene.Node>) nodeList82);
// flaky:         nodeList82.clear();
        boolean boolean88 = nodeList31.contains((java.lang.Object) nodeList82);
        boolean boolean89 = false; // flaky: nodeList6.containsAll((java.util.Collection<javafx.scene.Node>) nodeList82);
        boolean boolean90 = nodeList6.isEmpty();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(annotatedElementArray28);
        org.junit.Assert.assertNotNull(annotatedElementArray29);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream44);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator45);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList82);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream84);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator85);
// flaky:         org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
// flaky:         woodTotalValues1.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw(10.0d, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues1.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = nodeList6.remove(obj8);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        int int15 = nodeList11.lastIndexOf((java.lang.Object) 100);
        boolean boolean16 = nodeList11.isEmpty();
        nodeList11.clear();
        boolean boolean18 = nodeList6.removeAll((java.util.Collection<javafx.scene.Node>) nodeList11);
        boolean boolean19 = nodeList6.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor20 = nodeList6.iterator();
        java.lang.Object[] objArray21 = nodeList6.toArray();
        int int22 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList6);
        java.util.Iterator<javafx.scene.Node> nodeItor23 = null; // flaky: nodeList4.iterator();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeItor23);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean5 = false; // flaky: nodeList3.equals((java.lang.Object) (byte) 1);
        javafx.css.Styleable[] styleableArray6 = new javafx.css.Styleable[] {};
        javafx.css.Styleable[] styleableArray7 = null; // flaky: nodeList3.toArray(styleableArray6);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node9 = null; // flaky: nodeList3.get((int) (byte) 10);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(styleableArray6);
// flaky:         org.junit.Assert.assertNotNull(styleableArray7);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        boolean boolean13 = false; // flaky: nodeList6.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        boolean boolean18 = nodeList16.isEmpty();
        int int20 = nodeList16.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean26 = false; // flaky: nodeList24.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node28 = null;
        javafx.scene.Node node29 = null; // flaky: nodeList24.set((int) (byte) 1, node28);
        boolean boolean30 = nodeList16.add(node29);
// flaky:         nodeList6.add(1, node29);
        boolean boolean32 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = nodeList34.remove(obj36);
        int int38 = nodeList34.size();
        boolean boolean39 = nodeList1.contains((java.lang.Object) int38);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node41 = nodeList1.get(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList13.isEmpty();
        boolean boolean16 = false; // flaky: nodeList13.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor17 = null; // flaky: nodeList13.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor18 = null; // flaky: nodeList13.listIterator();
        javafx.scene.Node node20 = null; // flaky: nodeList13.get(1);
        // The following exception was thrown during execution in test generation
        try {
            nodeList1.add((int) '#', node20);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor17);
// flaky:         org.junit.Assert.assertNotNull(nodeItor18);
// flaky:         org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.Iterator<javafx.scene.Node> nodeItor8 = nodeList1.iterator();
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood11.getAll();
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = nodeList15.remove(obj17);
        javafx.scene.Node[] nodeArray19 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList20 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList20, nodeArray19);
        boolean boolean22 = nodeList20.isEmpty();
        int int24 = nodeList20.lastIndexOf((java.lang.Object) 100);
        boolean boolean25 = nodeList20.isEmpty();
        nodeList20.clear();
        boolean boolean27 = nodeList15.removeAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        boolean boolean28 = nodeList15.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor29 = nodeList15.iterator();
        java.lang.Object[] objArray30 = nodeList15.toArray();
        int int31 = 0; // flaky: nodeList13.lastIndexOf((java.lang.Object) nodeList15);
        java.util.stream.Stream<javafx.scene.Node> nodeStream32 = nodeList15.parallelStream();
        boolean boolean33 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList15);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(nodeItor29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(nodeStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
        java.util.ArrayList<javafx.scene.Node> nodeList6 = null; // flaky: addWood5.getAll();
        java.util.stream.Stream<javafx.scene.Node> nodeStream7 = null; // flaky: nodeList6.stream();
// flaky:         org.junit.Assert.assertNotNull(nodeList6);
// flaky:         org.junit.Assert.assertNotNull(nodeStream7);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        int int15 = nodeList11.lastIndexOf((java.lang.Object) 100);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        boolean boolean19 = nodeList17.isEmpty();
        int int21 = nodeList17.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable22 = null;
        Interface.WoodTotalValues woodTotalValues23 = null;
        Interface.AddWood addWood24 = null; // flaky: new Interface.AddWood(woodTable22, woodTotalValues23);
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood24.getAll();
        boolean boolean27 = false; // flaky: nodeList25.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node29 = null;
        javafx.scene.Node node30 = null; // flaky: nodeList25.set((int) (byte) 1, node29);
        boolean boolean31 = nodeList17.add(node30);
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        java.lang.Object obj35 = null;
        boolean boolean36 = nodeList33.remove(obj35);
        boolean boolean37 = nodeList17.retainAll((java.util.Collection<javafx.scene.Node>) nodeList33);
        boolean boolean38 = nodeList11.addAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        int int40 = nodeList11.lastIndexOf((java.lang.Object) (short) 0);
        int int42 = nodeList11.lastIndexOf((java.lang.Object) 10L);
        boolean boolean43 = nodeList1.equals((java.lang.Object) int42);
        Interface.WoodTable woodTable45 = null;
        Interface.WoodTotalValues woodTotalValues46 = null; // flaky: new Interface.WoodTotalValues(woodTable45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: woodTotalValues46.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: woodTotalValues46.getAll();
        java.util.Iterator<javafx.scene.Node> nodeItor49 = null; // flaky: nodeList48.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor50 = null; // flaky: nodeList48.listIterator();
        java.util.stream.Stream<javafx.scene.Node> nodeStream51 = null; // flaky: nodeList48.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = nodeList1.addAll(100, (java.util.Collection<javafx.scene.Node>) nodeList48);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
// flaky:         org.junit.Assert.assertNotNull(nodeItor49);
// flaky:         org.junit.Assert.assertNotNull(nodeItor50);
// flaky:         org.junit.Assert.assertNotNull(nodeStream51);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        boolean boolean6 = nodeList1.isEmpty();
        nodeList1.clear();
        java.lang.Object[] objArray8 = nodeList1.toArray();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((double) 0L, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues1.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        boolean boolean25 = nodeList21.isEmpty();
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean34 = false; // flaky: nodeList27.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList33);
        int int36 = nodeList27.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray38 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList39 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList39, nodeArray38);
        boolean boolean41 = nodeList39.isEmpty();
        int int43 = nodeList39.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTotalValues woodTotalValues45 = null;
        Interface.AddWood addWood46 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood46.getAll();
        boolean boolean49 = false; // flaky: nodeList47.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node51 = null;
        javafx.scene.Node node52 = null; // flaky: nodeList47.set((int) (byte) 1, node51);
        boolean boolean53 = nodeList39.add(node52);
        javafx.scene.Node node54 = null; // flaky: nodeList27.set((int) (short) 0, node52);
        boolean boolean55 = nodeList21.add(node54);
        boolean boolean57 = nodeList21.remove((java.lang.Object) 100L);
        int int58 = 0; // flaky: nodeList8.lastIndexOf((java.lang.Object) nodeList21);
        java.lang.Object[] objArray59 = nodeList21.toArray();
        java.util.stream.Stream<javafx.scene.Node> nodeStream60 = nodeList21.stream();
        java.util.stream.Stream<javafx.scene.Node> nodeStream61 = nodeList21.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList64 = nodeList21.subList(10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(nodeStream60);
        org.junit.Assert.assertNotNull(nodeStream61);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        java.lang.Object[] objArray24 = null; // flaky: nodeList4.toArray();
// flaky:         nodeList4.clear();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        Interface.WoodTable woodTable3 = null;
        Interface.WoodTotalValues woodTotalValues4 = null;
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable3, woodTotalValues4);
        java.util.ArrayList<javafx.scene.Node> nodeList6 = null; // flaky: addWood5.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood5.getAll();
        int int8 = 0; // flaky: nodeList2.indexOf((java.lang.Object) addWood5);
// flaky:         addWood5.redraw((double) 0L, (double) (short) 0);
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList6);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node13 = nodeList6.get(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood26.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood26.getAll();
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        boolean boolean34 = nodeList32.isEmpty();
        int int36 = nodeList32.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        boolean boolean42 = false; // flaky: nodeList40.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node44 = null;
        javafx.scene.Node node45 = null; // flaky: nodeList40.set((int) (byte) 1, node44);
        boolean boolean46 = nodeList32.add(node45);
        javafx.scene.Node node47 = null; // flaky: nodeList29.set((int) (short) 0, node45);
        javafx.scene.Node[] nodeArray48 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList49 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList49, nodeArray48);
        java.lang.Object obj51 = null;
        boolean boolean52 = nodeList49.remove(obj51);
        javafx.scene.Node[] nodeArray53 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList54 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList54, nodeArray53);
        java.lang.Object obj56 = null;
        boolean boolean57 = nodeList54.remove(obj56);
        javafx.scene.Node[] nodeArray58 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList59 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList59, nodeArray58);
        Interface.WoodTable woodTable62 = null;
        Interface.WoodTotalValues woodTotalValues63 = null;
        Interface.AddWood addWood64 = null; // flaky: new Interface.AddWood(woodTable62, woodTotalValues63);
        java.util.ArrayList<javafx.scene.Node> nodeList65 = null; // flaky: addWood64.getAll();
        boolean boolean66 = false; // flaky: nodeList59.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList65);
        javafx.scene.Node[] nodeArray68 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList69 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList69, nodeArray68);
        boolean boolean71 = nodeList69.isEmpty();
        int int73 = nodeList69.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable74 = null;
        Interface.WoodTotalValues woodTotalValues75 = null;
        Interface.AddWood addWood76 = null; // flaky: new Interface.AddWood(woodTable74, woodTotalValues75);
        java.util.ArrayList<javafx.scene.Node> nodeList77 = null; // flaky: addWood76.getAll();
        boolean boolean79 = false; // flaky: nodeList77.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node81 = null;
        javafx.scene.Node node82 = null; // flaky: nodeList77.set((int) (byte) 1, node81);
        boolean boolean83 = nodeList69.add(node82);
// flaky:         nodeList59.add(1, node82);
        boolean boolean85 = nodeList54.retainAll((java.util.Collection<javafx.scene.Node>) nodeList59);
        boolean boolean86 = nodeList49.retainAll((java.util.Collection<javafx.scene.Node>) nodeList59);
        boolean boolean87 = false; // flaky: nodeList29.retainAll((java.util.Collection<javafx.scene.Node>) nodeList49);
        boolean boolean88 = false; // flaky: nodeList19.addAll((java.util.Collection<javafx.scene.Node>) nodeList29);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        int int9 = 0; // flaky: nodeList8.size();
        Interface.WoodTable woodTable11 = null;
        Interface.WoodTotalValues woodTotalValues12 = null;
        Interface.AddWood addWood13 = null; // flaky: new Interface.AddWood(woodTable11, woodTotalValues12);
        java.util.ArrayList<javafx.scene.Node> nodeList14 = null; // flaky: addWood13.getAll();
        boolean boolean15 = false; // flaky: nodeList14.isEmpty();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList35.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList41);
        int int44 = nodeList35.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        boolean boolean49 = nodeList47.isEmpty();
        int int51 = nodeList47.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable52 = null;
        Interface.WoodTotalValues woodTotalValues53 = null;
        Interface.AddWood addWood54 = null; // flaky: new Interface.AddWood(woodTable52, woodTotalValues53);
        java.util.ArrayList<javafx.scene.Node> nodeList55 = null; // flaky: addWood54.getAll();
        boolean boolean57 = false; // flaky: nodeList55.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node59 = null;
        javafx.scene.Node node60 = null; // flaky: nodeList55.set((int) (byte) 1, node59);
        boolean boolean61 = nodeList47.add(node60);
        javafx.scene.Node node62 = null; // flaky: nodeList35.set((int) (short) 0, node60);
        javafx.scene.Node node63 = nodeList18.set((int) (byte) 0, node60);
// flaky:         nodeList14.add((int) (short) 0, node63);
        boolean boolean65 = false; // flaky: nodeList8.addAll((int) (byte) 0, (java.util.Collection<javafx.scene.Node>) nodeList14);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator66 = null; // flaky: nodeList14.spliterator();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
// flaky:         org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertNotNull(node62);
// flaky:         org.junit.Assert.assertNotNull(node63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator66);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node node5 = null;
        boolean boolean6 = nodeList1.add(node5);
        Interface.WoodTable woodTable8 = null;
        Interface.WoodTotalValues woodTotalValues9 = null;
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable8, woodTotalValues9);
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood10.getAll();
// flaky:         addWood10.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood10.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood10.getAll();
        java.util.stream.Stream<javafx.scene.Node> nodeStream17 = null; // flaky: nodeList16.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = nodeList1.addAll((int) (byte) 10, (java.util.Collection<javafx.scene.Node>) nodeList16);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
// flaky:         org.junit.Assert.assertNotNull(nodeStream17);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        int int15 = nodeList11.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean21 = false; // flaky: nodeList19.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node23 = null;
        javafx.scene.Node node24 = null; // flaky: nodeList19.set((int) (byte) 1, node23);
        boolean boolean25 = nodeList11.add(node24);
// flaky:         nodeList1.add(1, node24);
        java.util.Iterator<javafx.scene.Node> nodeItor27 = nodeList1.iterator();
        java.util.Iterator<javafx.scene.Node> nodeItor28 = nodeList1.iterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeItor27);
        org.junit.Assert.assertNotNull(nodeItor28);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray9 = nodeList1.toArray(strArray8);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        int int15 = nodeList11.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean21 = false; // flaky: nodeList19.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node23 = null;
        javafx.scene.Node node24 = null; // flaky: nodeList19.set((int) (byte) 1, node23);
        boolean boolean25 = nodeList11.add(node24);
        javafx.scene.Node[] nodeArray27 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList28 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList28, nodeArray27);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        boolean boolean35 = false; // flaky: nodeList28.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList34);
        int int37 = nodeList28.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        int int44 = nodeList40.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable45 = null;
        Interface.WoodTotalValues woodTotalValues46 = null;
        Interface.AddWood addWood47 = null; // flaky: new Interface.AddWood(woodTable45, woodTotalValues46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: addWood47.getAll();
        boolean boolean50 = false; // flaky: nodeList48.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node52 = null;
        javafx.scene.Node node53 = null; // flaky: nodeList48.set((int) (byte) 1, node52);
        boolean boolean54 = nodeList40.add(node53);
        javafx.scene.Node node55 = null; // flaky: nodeList28.set((int) (short) 0, node53);
        javafx.scene.Node node56 = nodeList11.set((int) (byte) 0, node53);
        boolean boolean57 = nodeList1.add(node56);
        int int58 = nodeList1.size();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
// flaky:         org.junit.Assert.assertNotNull(node55);
// flaky:         org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood14.getAll();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        int int24 = nodeList18.lastIndexOf((java.lang.Object) 10);
        boolean boolean25 = false; // flaky: nodeList16.retainAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = nodeList27.remove(obj29);
        boolean boolean31 = nodeList27.isEmpty();
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        boolean boolean40 = false; // flaky: nodeList33.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList39);
        int int42 = nodeList33.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
        javafx.scene.Node node60 = null; // flaky: nodeList33.set((int) (short) 0, node58);
        boolean boolean61 = nodeList27.add(node60);
        boolean boolean63 = nodeList27.remove((java.lang.Object) 100L);
        boolean boolean64 = nodeList18.remove((java.lang.Object) boolean63);
        boolean boolean65 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        java.lang.Class<?> wildcardClass66 = nodeList18.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        boolean boolean27 = nodeList24.isEmpty();
        nodeList24.clear();
        boolean boolean29 = nodeList6.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        java.util.List<javafx.scene.Node> nodeList32 = nodeList6.subList(0, 0);
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        boolean boolean36 = nodeList34.isEmpty();
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood39.getAll();
        javafx.scene.Node[] nodeArray42 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList43 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList43, nodeArray42);
        boolean boolean45 = nodeList43.isEmpty();
        int int47 = nodeList43.lastIndexOf((java.lang.Object) 100);
        int int49 = nodeList43.lastIndexOf((java.lang.Object) 10);
        boolean boolean50 = false; // flaky: nodeList41.retainAll((java.util.Collection<javafx.scene.Node>) nodeList43);
        boolean boolean51 = false; // flaky: nodeList34.removeAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        java.util.List<javafx.scene.Node> nodeList54 = null; // flaky: nodeList41.subList(0, (int) (byte) 0);
        int int55 = nodeList32.lastIndexOf((java.lang.Object) (byte) 0);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        int int19 = nodeList13.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood22.getAll();
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        boolean boolean28 = nodeList26.isEmpty();
        int int30 = nodeList26.lastIndexOf((java.lang.Object) 100);
        int int32 = nodeList26.lastIndexOf((java.lang.Object) 10);
        boolean boolean33 = false; // flaky: nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        boolean boolean34 = nodeList13.containsAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = false; // flaky: nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        int int45 = nodeList1.lastIndexOf((java.lang.Object) nodeList13);
        Interface.WoodTable woodTable46 = null;
        Interface.WoodTotalValues woodTotalValues47 = null; // flaky: new Interface.WoodTotalValues(woodTable46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: woodTotalValues47.getAll();
        int int49 = nodeList13.lastIndexOf((java.lang.Object) woodTotalValues47);
        javafx.scene.Node[] nodeArray50 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList51 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList51, nodeArray50);
        boolean boolean53 = nodeList51.isEmpty();
        int int55 = nodeList51.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable56 = null;
        Interface.WoodTotalValues woodTotalValues57 = null;
        Interface.AddWood addWood58 = null; // flaky: new Interface.AddWood(woodTable56, woodTotalValues57);
        java.util.ArrayList<javafx.scene.Node> nodeList59 = null; // flaky: addWood58.getAll();
        boolean boolean61 = false; // flaky: nodeList59.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node63 = null;
        javafx.scene.Node node64 = null; // flaky: nodeList59.set((int) (byte) 1, node63);
        boolean boolean65 = nodeList51.add(node64);
        javafx.scene.Node[] nodeArray66 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList67 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList67, nodeArray66);
        java.lang.Object obj69 = null;
        boolean boolean70 = nodeList67.remove(obj69);
        boolean boolean71 = nodeList51.retainAll((java.util.Collection<javafx.scene.Node>) nodeList67);
        javafx.scene.Node[] nodeArray72 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList73 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList73, nodeArray72);
        Interface.WoodTable woodTable76 = null;
        Interface.WoodTotalValues woodTotalValues77 = null;
        Interface.AddWood addWood78 = null; // flaky: new Interface.AddWood(woodTable76, woodTotalValues77);
        java.util.ArrayList<javafx.scene.Node> nodeList79 = null; // flaky: addWood78.getAll();
        boolean boolean80 = false; // flaky: nodeList73.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList79);
        java.util.stream.Stream<javafx.scene.Node> nodeStream81 = null; // flaky: nodeList79.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator82 = null; // flaky: nodeList79.spliterator();
        boolean boolean83 = false; // flaky: nodeList51.addAll((java.util.Collection<javafx.scene.Node>) nodeList79);
        java.util.Iterator<javafx.scene.Node> nodeItor84 = null; // flaky: nodeList79.iterator();
        javafx.scene.Node node86 = null; // flaky: nodeList79.remove(1);
        boolean boolean87 = nodeList13.add(node86);
        java.lang.Object[] objArray88 = nodeList13.toArray();
        java.lang.Class<?> wildcardClass89 = objArray88.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream81);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator82);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor84);
// flaky:         org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator24 = null; // flaky: nodeList4.spliterator();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator25 = null; // flaky: nodeList4.spliterator();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator24);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator25);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        boolean boolean6 = false; // flaky: nodeList3.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor7 = null; // flaky: nodeList3.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = null; // flaky: nodeList3.listIterator();
        javafx.scene.Node node10 = null; // flaky: nodeList3.get(1);
// flaky:         nodeList3.clear();
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList3.replaceAll(nodeUnaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor7);
// flaky:         org.junit.Assert.assertNotNull(nodeItor8);
// flaky:         org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        boolean boolean6 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream7 = nodeList1.stream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator8 = nodeList1.spliterator();
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = nodeList1.parallelStream();
        java.util.Iterator<javafx.scene.Node> nodeItor10 = nodeList1.iterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeStream7);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
        org.junit.Assert.assertNotNull(nodeStream9);
        org.junit.Assert.assertNotNull(nodeItor10);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        boolean boolean6 = false; // flaky: nodeList3.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor7 = null; // flaky: nodeList3.iterator();
        javafx.scene.Node[] nodeArray8 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList9 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList9, nodeArray8);
        boolean boolean11 = nodeList9.isEmpty();
        boolean boolean12 = nodeList9.isEmpty();
        nodeList9.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor15 = nodeList9.listIterator(0);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean21 = false; // flaky: nodeList19.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node23 = null;
        javafx.scene.Node node24 = null; // flaky: nodeList19.set((int) (byte) 1, node23);
        javafx.css.Styleable[] styleableArray25 = new javafx.css.Styleable[] { node24 };
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean31 = false; // flaky: nodeList29.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node33 = null;
        javafx.scene.Node node34 = null; // flaky: nodeList29.set((int) (byte) 1, node33);
        javafx.css.Styleable[] styleableArray35 = new javafx.css.Styleable[] { node34 };
        javafx.css.Styleable[][] styleableArray36 = new javafx.css.Styleable[][] { styleableArray25, styleableArray35 };
        javafx.css.Styleable[][] styleableArray37 = nodeList9.toArray(styleableArray36);
        boolean boolean38 = false; // flaky: nodeList3.addAll((java.util.Collection<javafx.scene.Node>) nodeList9);
        java.util.Collection<javafx.scene.Node> nodeCollection39 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = nodeList9.containsAll(nodeCollection39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeItor15);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(styleableArray25);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(styleableArray35);
        org.junit.Assert.assertNotNull(styleableArray36);
        org.junit.Assert.assertNotNull(styleableArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        boolean boolean19 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        javafx.scene.Node node25 = null;
        boolean boolean26 = nodeList21.add(node25);
        java.util.ListIterator<javafx.scene.Node> nodeItor27 = nodeList21.listIterator();
        boolean boolean28 = nodeList6.removeAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor30 = nodeList6.listIterator((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList8.iterator();
        java.util.stream.Stream<javafx.scene.Node> nodeStream21 = null; // flaky: nodeList8.parallelStream();
        java.util.Collection<javafx.scene.Node> nodeCollection22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = nodeList8.retainAll(nodeCollection22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
// flaky:         org.junit.Assert.assertNotNull(nodeStream21);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: addWood8.getAll();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        boolean boolean14 = nodeList12.isEmpty();
        int int16 = nodeList12.lastIndexOf((java.lang.Object) 100);
        int int18 = nodeList12.lastIndexOf((java.lang.Object) 10);
        boolean boolean19 = false; // flaky: nodeList10.retainAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        boolean boolean21 = false; // flaky: nodeList10.contains((java.lang.Object) false);
        Interface.WoodTable woodTable22 = null;
        Interface.WoodTotalValues woodTotalValues23 = null;
        Interface.AddWood addWood24 = null; // flaky: new Interface.AddWood(woodTable22, woodTotalValues23);
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood24.getAll();
        boolean boolean26 = false; // flaky: nodeList25.isEmpty();
        boolean boolean28 = false; // flaky: nodeList25.equals((java.lang.Object) 100);
        int int29 = 0; // flaky: nodeList10.lastIndexOf((java.lang.Object) nodeList25);
        java.lang.Object[] objArray30 = null; // flaky: nodeList10.toArray();
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        boolean boolean34 = nodeList32.isEmpty();
        int int36 = nodeList32.lastIndexOf((java.lang.Object) 100);
        int int38 = nodeList32.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor39 = nodeList32.listIterator();
        int int40 = nodeList32.size();
        boolean boolean41 = nodeList32.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream42 = nodeList32.parallelStream();
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        boolean boolean46 = nodeList44.isEmpty();
        int int48 = nodeList44.lastIndexOf((java.lang.Object) 100);
        int int50 = nodeList44.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable51 = null;
        Interface.WoodTotalValues woodTotalValues52 = null;
        Interface.AddWood addWood53 = null; // flaky: new Interface.AddWood(woodTable51, woodTotalValues52);
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood53.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList55 = null; // flaky: addWood53.getAll();
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        boolean boolean59 = nodeList57.isEmpty();
        int int61 = nodeList57.lastIndexOf((java.lang.Object) 100);
        int int63 = nodeList57.lastIndexOf((java.lang.Object) 10);
        boolean boolean64 = false; // flaky: nodeList55.retainAll((java.util.Collection<javafx.scene.Node>) nodeList57);
        boolean boolean65 = nodeList44.containsAll((java.util.Collection<javafx.scene.Node>) nodeList57);
        Interface.WoodTable woodTable66 = null;
        Interface.WoodTotalValues woodTotalValues67 = null;
        Interface.AddWood addWood68 = null; // flaky: new Interface.AddWood(woodTable66, woodTotalValues67);
        java.util.ArrayList<javafx.scene.Node> nodeList69 = null; // flaky: addWood68.getAll();
        boolean boolean71 = false; // flaky: nodeList69.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node73 = null;
        javafx.scene.Node node74 = null; // flaky: nodeList69.set((int) (byte) 1, node73);
        boolean boolean75 = false; // flaky: nodeList44.removeAll((java.util.Collection<javafx.scene.Node>) nodeList69);
        int int76 = nodeList32.lastIndexOf((java.lang.Object) nodeList44);
        Interface.WoodTable woodTable77 = null;
        Interface.WoodTotalValues woodTotalValues78 = null; // flaky: new Interface.WoodTotalValues(woodTable77);
        java.util.ArrayList<javafx.scene.Node> nodeList79 = null; // flaky: woodTotalValues78.getAll();
        int int80 = nodeList44.lastIndexOf((java.lang.Object) woodTotalValues78);
        boolean boolean81 = false; // flaky: nodeList10.contains((java.lang.Object) int80);
        boolean boolean82 = false; // flaky: nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(nodeItor39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(nodeStream42);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
// flaky:         org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = nodeList6.remove(obj8);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        int int15 = nodeList11.lastIndexOf((java.lang.Object) 100);
        boolean boolean16 = nodeList11.isEmpty();
        nodeList11.clear();
        boolean boolean18 = nodeList6.removeAll((java.util.Collection<javafx.scene.Node>) nodeList11);
        boolean boolean19 = nodeList6.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor20 = nodeList6.iterator();
        java.lang.Object[] objArray21 = nodeList6.toArray();
        int int22 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList6);
        java.util.stream.Stream<javafx.scene.Node> nodeStream23 = nodeList6.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node25 = nodeList6.remove((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(nodeStream23);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean14 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        boolean boolean18 = nodeList16.isEmpty();
        int int20 = nodeList16.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean26 = false; // flaky: nodeList24.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node28 = null;
        javafx.scene.Node node29 = null; // flaky: nodeList24.set((int) (byte) 1, node28);
        boolean boolean30 = nodeList16.add(node29);
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        boolean boolean40 = false; // flaky: nodeList33.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList39);
        int int42 = nodeList33.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
        javafx.scene.Node node60 = null; // flaky: nodeList33.set((int) (short) 0, node58);
        javafx.scene.Node node61 = nodeList16.set((int) (byte) 0, node58);
        boolean boolean62 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList16);
        javafx.scene.Node[] nodeArray63 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList64 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList64, nodeArray63);
        boolean boolean66 = nodeList64.isEmpty();
        int int68 = nodeList64.lastIndexOf((java.lang.Object) 100);
        javafx.scene.Node[] nodeArray69 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList70 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList70, nodeArray69);
        boolean boolean72 = nodeList70.isEmpty();
        int int74 = nodeList70.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable75 = null;
        Interface.WoodTotalValues woodTotalValues76 = null;
        Interface.AddWood addWood77 = null; // flaky: new Interface.AddWood(woodTable75, woodTotalValues76);
        java.util.ArrayList<javafx.scene.Node> nodeList78 = null; // flaky: addWood77.getAll();
        boolean boolean80 = false; // flaky: nodeList78.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node82 = null;
        javafx.scene.Node node83 = null; // flaky: nodeList78.set((int) (byte) 1, node82);
        boolean boolean84 = nodeList70.add(node83);
        javafx.scene.Node[] nodeArray85 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList86 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList86, nodeArray85);
        java.lang.Object obj88 = null;
        boolean boolean89 = nodeList86.remove(obj88);
        boolean boolean90 = nodeList70.retainAll((java.util.Collection<javafx.scene.Node>) nodeList86);
        boolean boolean91 = nodeList64.addAll((java.util.Collection<javafx.scene.Node>) nodeList70);
        int int93 = nodeList64.lastIndexOf((java.lang.Object) (short) 0);
        int int94 = nodeList1.lastIndexOf((java.lang.Object) nodeList64);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor96 = nodeList64.listIterator(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertNotNull(node60);
// flaky:         org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
// flaky:         woodTotalValues3.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
// flaky:         addWood8.redraw((double) (-1), (double) (byte) -1);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
        boolean boolean38 = false; // flaky: nodeList37.isEmpty();
        boolean boolean39 = false; // flaky: nodeList7.addAll((java.util.Collection<javafx.scene.Node>) nodeList37);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator40 = null; // flaky: nodeList7.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList43 = null; // flaky: nodeList7.subList((int) (short) -1, (int) (short) 10);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: fromIndex = -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator40);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        boolean boolean9 = false; // flaky: nodeList8.isEmpty();
        int int10 = 0; // flaky: nodeList8.size();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        boolean boolean34 = nodeList32.isEmpty();
        boolean boolean35 = nodeList32.isEmpty();
        nodeList32.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor38 = nodeList32.listIterator(0);
        Interface.WoodTable woodTable39 = null;
        Interface.WoodTotalValues woodTotalValues40 = null;
        Interface.AddWood addWood41 = null; // flaky: new Interface.AddWood(woodTable39, woodTotalValues40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: addWood41.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: addWood41.getAll();
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        int int51 = nodeList45.lastIndexOf((java.lang.Object) 10);
        boolean boolean52 = false; // flaky: nodeList43.retainAll((java.util.Collection<javafx.scene.Node>) nodeList45);
        boolean boolean54 = false; // flaky: nodeList43.contains((java.lang.Object) false);
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTotalValues woodTotalValues56 = null;
        Interface.AddWood addWood57 = null; // flaky: new Interface.AddWood(woodTable55, woodTotalValues56);
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood57.getAll();
        boolean boolean59 = false; // flaky: nodeList58.isEmpty();
        boolean boolean61 = false; // flaky: nodeList58.equals((java.lang.Object) 100);
        int int62 = 0; // flaky: nodeList43.lastIndexOf((java.lang.Object) nodeList58);
        java.lang.Object[] objArray63 = null; // flaky: nodeList43.toArray();
        int int64 = nodeList32.lastIndexOf((java.lang.Object) objArray63);
        java.util.stream.Stream<javafx.scene.Node> nodeStream65 = nodeList32.stream();
        int int66 = nodeList22.indexOf((java.lang.Object) nodeStream65);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList69 = nodeList22.subList((int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: fromIndex = -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(nodeItor38);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(nodeStream65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        nodeList17.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor23 = nodeList17.listIterator();
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean28 = false; // flaky: nodeList27.isEmpty();
        boolean boolean30 = false; // flaky: nodeList27.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor31 = null; // flaky: nodeList27.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor32 = null; // flaky: nodeList27.listIterator();
        javafx.scene.Node node34 = null; // flaky: nodeList27.get(1);
        boolean boolean35 = nodeList17.add(node34);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeItor23);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor31);
// flaky:         org.junit.Assert.assertNotNull(nodeItor32);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        boolean boolean13 = false; // flaky: nodeList6.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        boolean boolean18 = nodeList16.isEmpty();
        int int20 = nodeList16.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean26 = false; // flaky: nodeList24.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node28 = null;
        javafx.scene.Node node29 = null; // flaky: nodeList24.set((int) (byte) 1, node28);
        boolean boolean30 = nodeList16.add(node29);
// flaky:         nodeList6.add(1, node29);
        boolean boolean32 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = nodeList34.remove(obj36);
        int int38 = nodeList34.size();
        boolean boolean39 = nodeList1.contains((java.lang.Object) int38);
        java.lang.Object[] objArray40 = nodeList1.toArray();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        boolean boolean32 = false; // flaky: nodeList25.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList31);
        java.util.stream.Stream<javafx.scene.Node> nodeStream33 = null; // flaky: nodeList31.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator34 = null; // flaky: nodeList31.spliterator();
        javafx.scene.Node[] nodeArray35 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList36 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList36, nodeArray35);
        java.lang.Object obj38 = null;
        boolean boolean39 = nodeList36.remove(obj38);
        boolean boolean40 = false; // flaky: nodeList31.removeAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        boolean boolean44 = nodeList42.isEmpty();
        int int46 = nodeList42.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable47 = null;
        Interface.WoodTotalValues woodTotalValues48 = null;
        Interface.AddWood addWood49 = null; // flaky: new Interface.AddWood(woodTable47, woodTotalValues48);
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: addWood49.getAll();
        boolean boolean52 = false; // flaky: nodeList50.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node54 = null;
        javafx.scene.Node node55 = null; // flaky: nodeList50.set((int) (byte) 1, node54);
        boolean boolean56 = nodeList42.add(node55);
        boolean boolean57 = false; // flaky: nodeList31.add(node55);
        Interface.WoodTable woodTable59 = null;
        Interface.WoodTotalValues woodTotalValues60 = null;
        Interface.AddWood addWood61 = null; // flaky: new Interface.AddWood(woodTable59, woodTotalValues60);
        java.util.ArrayList<javafx.scene.Node> nodeList62 = null; // flaky: addWood61.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: addWood61.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList64 = null; // flaky: addWood61.getAll();
        javafx.scene.Node[] nodeArray66 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList67 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList67, nodeArray66);
        boolean boolean69 = nodeList67.isEmpty();
        int int71 = nodeList67.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable72 = null;
        Interface.WoodTotalValues woodTotalValues73 = null;
        Interface.AddWood addWood74 = null; // flaky: new Interface.AddWood(woodTable72, woodTotalValues73);
        java.util.ArrayList<javafx.scene.Node> nodeList75 = null; // flaky: addWood74.getAll();
        boolean boolean77 = false; // flaky: nodeList75.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node79 = null;
        javafx.scene.Node node80 = null; // flaky: nodeList75.set((int) (byte) 1, node79);
        boolean boolean81 = nodeList67.add(node80);
        javafx.scene.Node node82 = null; // flaky: nodeList64.set((int) (short) 0, node80);
// flaky:         nodeList31.add(5, node80);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node84 = nodeList6.set((int) '4', node80);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream33);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator34);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList62);
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
// flaky:         org.junit.Assert.assertNotNull(nodeList64);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        int int28 = nodeList24.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        boolean boolean34 = false; // flaky: nodeList32.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node36 = null;
        javafx.scene.Node node37 = null; // flaky: nodeList32.set((int) (byte) 1, node36);
        boolean boolean38 = nodeList24.add(node37);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        java.lang.Object obj42 = null;
        boolean boolean43 = nodeList40.remove(obj42);
        boolean boolean44 = nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        boolean boolean45 = nodeList24.isEmpty();
        boolean boolean46 = nodeList6.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        boolean boolean48 = nodeList24.contains((java.lang.Object) 1);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean22 = false; // flaky: nodeList15.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList21);
        int int24 = nodeList15.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        java.lang.Object obj28 = null;
        boolean boolean29 = nodeList26.remove(obj28);
        boolean boolean30 = nodeList26.isEmpty();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray34 = nodeList26.toArray(strArray33);
        boolean boolean35 = nodeList15.equals((java.lang.Object) strArray34);
        int int36 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) boolean35);
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean45 = false; // flaky: nodeList38.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList44);
        int int47 = nodeList38.indexOf((java.lang.Object) true);
        boolean boolean48 = false; // flaky: nodeList4.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        boolean boolean49 = nodeList38.isEmpty();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean30 = false; // flaky: nodeList23.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList29);
        java.util.stream.Stream<javafx.scene.Node> nodeStream31 = null; // flaky: nodeList29.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator32 = null; // flaky: nodeList29.spliterator();
        boolean boolean33 = false; // flaky: nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList29);
// flaky:         nodeList29.clear();
        javafx.scene.Node[] nodeArray35 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList36 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList36, nodeArray35);
        Interface.WoodTable woodTable39 = null;
        Interface.WoodTotalValues woodTotalValues40 = null;
        Interface.AddWood addWood41 = null; // flaky: new Interface.AddWood(woodTable39, woodTotalValues40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: addWood41.getAll();
        boolean boolean43 = false; // flaky: nodeList36.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList42);
        java.util.stream.Stream<javafx.scene.Node> nodeStream44 = null; // flaky: nodeList42.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator45 = null; // flaky: nodeList42.spliterator();
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        boolean boolean49 = nodeList47.isEmpty();
        int int51 = nodeList47.lastIndexOf((java.lang.Object) 100);
        boolean boolean52 = nodeList47.isEmpty();
        boolean boolean53 = false; // flaky: nodeList42.contains((java.lang.Object) boolean52);
        int int54 = 0; // flaky: nodeList29.indexOf((java.lang.Object) boolean53);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node56 = null; // flaky: nodeList29.get(10);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream31);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream44);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator45);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        boolean boolean25 = nodeList21.isEmpty();
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean34 = false; // flaky: nodeList27.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList33);
        int int36 = nodeList27.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray38 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList39 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList39, nodeArray38);
        boolean boolean41 = nodeList39.isEmpty();
        int int43 = nodeList39.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTotalValues woodTotalValues45 = null;
        Interface.AddWood addWood46 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood46.getAll();
        boolean boolean49 = false; // flaky: nodeList47.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node51 = null;
        javafx.scene.Node node52 = null; // flaky: nodeList47.set((int) (byte) 1, node51);
        boolean boolean53 = nodeList39.add(node52);
        javafx.scene.Node node54 = null; // flaky: nodeList27.set((int) (short) 0, node52);
        boolean boolean55 = nodeList21.add(node54);
        boolean boolean57 = nodeList21.remove((java.lang.Object) 100L);
        int int58 = 0; // flaky: nodeList8.lastIndexOf((java.lang.Object) nodeList21);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor60 = nodeList21.listIterator((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList6.replaceAll(nodeUnaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean5 = false; // flaky: nodeList3.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node7 = null;
        javafx.scene.Node node8 = null; // flaky: nodeList3.set((int) (byte) 1, node7);
        java.util.ListIterator<javafx.scene.Node> nodeItor9 = null; // flaky: nodeList3.listIterator();
// flaky:         nodeList3.clear();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node12 = null; // flaky: nodeList3.remove(0);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertNotNull(node8);
// flaky:         org.junit.Assert.assertNotNull(nodeItor9);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator9 = nodeList1.spliterator();
        java.util.stream.Stream<javafx.scene.Node> nodeStream10 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = nodeList12.isEmpty();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean25 = false; // flaky: nodeList18.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList24);
        int int27 = nodeList18.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = nodeList30.add(node43);
        javafx.scene.Node node45 = null; // flaky: nodeList18.set((int) (short) 0, node43);
        boolean boolean46 = nodeList12.add(node45);
        boolean boolean47 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor49 = nodeList12.listIterator((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator9);
        org.junit.Assert.assertNotNull(nodeStream10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
// flaky:         woodTotalValues2.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList6 = null; // flaky: woodTotalValues2.getAll();
// flaky:         woodTotalValues2.redraw(10.0d, 1.0d);
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
// flaky:         woodTotalValues2.redraw((double) ' ', (double) (short) 1);
        java.util.ArrayList<javafx.scene.Node> nodeList14 = null; // flaky: woodTotalValues2.getAll();
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues2.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList6);
// flaky:         org.junit.Assert.assertNotNull(nodeList14);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        int int19 = nodeList13.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood22.getAll();
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        boolean boolean28 = nodeList26.isEmpty();
        int int30 = nodeList26.lastIndexOf((java.lang.Object) 100);
        int int32 = nodeList26.lastIndexOf((java.lang.Object) 10);
        boolean boolean33 = false; // flaky: nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        boolean boolean34 = nodeList13.containsAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = false; // flaky: nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        int int45 = nodeList1.lastIndexOf((java.lang.Object) nodeList13);
        Interface.WoodTable woodTable46 = null;
        Interface.WoodTotalValues woodTotalValues47 = null; // flaky: new Interface.WoodTotalValues(woodTable46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: woodTotalValues47.getAll();
        int int49 = nodeList13.lastIndexOf((java.lang.Object) woodTotalValues47);
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: woodTotalValues47.getAll();
// flaky:         woodTotalValues47.redraw((double) (byte) 0, (double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues47.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean22 = false; // flaky: nodeList15.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList21);
        int int24 = nodeList15.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        java.lang.Object obj28 = null;
        boolean boolean29 = nodeList26.remove(obj28);
        boolean boolean30 = nodeList26.isEmpty();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray34 = nodeList26.toArray(strArray33);
        boolean boolean35 = nodeList15.equals((java.lang.Object) strArray34);
        int int36 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) boolean35);
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean45 = false; // flaky: nodeList38.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList44);
        int int47 = nodeList38.indexOf((java.lang.Object) true);
        javafx.scene.Node node49 = null; // flaky: nodeList38.get((int) (byte) 0);
        boolean boolean50 = false; // flaky: nodeList4.addAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        javafx.scene.Node[] nodeArray52 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList53 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList53, nodeArray52);
        Interface.WoodTable woodTable56 = null;
        Interface.WoodTotalValues woodTotalValues57 = null;
        Interface.AddWood addWood58 = null; // flaky: new Interface.AddWood(woodTable56, woodTotalValues57);
        java.util.ArrayList<javafx.scene.Node> nodeList59 = null; // flaky: addWood58.getAll();
        boolean boolean60 = false; // flaky: nodeList53.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList59);
        java.util.stream.Stream<javafx.scene.Node> nodeStream61 = null; // flaky: nodeList59.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator62 = null; // flaky: nodeList59.spliterator();
        javafx.scene.Node[] nodeArray63 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList64 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList64, nodeArray63);
        java.lang.Object obj66 = null;
        boolean boolean67 = nodeList64.remove(obj66);
        boolean boolean68 = false; // flaky: nodeList59.removeAll((java.util.Collection<javafx.scene.Node>) nodeList64);
        javafx.scene.Node[] nodeArray69 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList70 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList70, nodeArray69);
        boolean boolean72 = nodeList70.isEmpty();
        int int74 = nodeList70.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable75 = null;
        Interface.WoodTotalValues woodTotalValues76 = null;
        Interface.AddWood addWood77 = null; // flaky: new Interface.AddWood(woodTable75, woodTotalValues76);
        java.util.ArrayList<javafx.scene.Node> nodeList78 = null; // flaky: addWood77.getAll();
        boolean boolean80 = false; // flaky: nodeList78.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node82 = null;
        javafx.scene.Node node83 = null; // flaky: nodeList78.set((int) (byte) 1, node82);
        boolean boolean84 = nodeList70.add(node83);
        boolean boolean85 = false; // flaky: nodeList59.add(node83);
        // The following exception was thrown during execution in test generation
        try {
// flaky:             nodeList4.add(10, node83);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
// flaky:         org.junit.Assert.assertNotNull(node49);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList59);
// flaky:         org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream61);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator62);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList8.parallelStream();
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        int int15 = nodeList11.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean21 = false; // flaky: nodeList19.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node23 = null;
        javafx.scene.Node node24 = null; // flaky: nodeList19.set((int) (byte) 1, node23);
        boolean boolean25 = nodeList11.add(node24);
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = nodeList27.remove(obj29);
        boolean boolean31 = nodeList11.retainAll((java.util.Collection<javafx.scene.Node>) nodeList27);
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        java.lang.Object obj35 = null;
        boolean boolean36 = nodeList33.remove(obj35);
        javafx.scene.Node node37 = null;
        boolean boolean38 = nodeList33.add(node37);
        boolean boolean39 = nodeList27.equals((java.lang.Object) boolean38);
        boolean boolean40 = false; // flaky: nodeList8.removeAll((java.util.Collection<javafx.scene.Node>) nodeList27);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null; // flaky: new Interface.WoodTotalValues(woodTable41);
// flaky:         woodTotalValues42.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList46 = null; // flaky: woodTotalValues42.getAll();
        boolean boolean47 = false; // flaky: nodeList8.contains((java.lang.Object) nodeList46);
        javafx.scene.Node[] nodeArray49 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList50 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList50, nodeArray49);
        Interface.WoodTable woodTable53 = null;
        Interface.WoodTotalValues woodTotalValues54 = null;
        Interface.AddWood addWood55 = null; // flaky: new Interface.AddWood(woodTable53, woodTotalValues54);
        java.util.ArrayList<javafx.scene.Node> nodeList56 = null; // flaky: addWood55.getAll();
        boolean boolean57 = false; // flaky: nodeList50.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList56);
        int int59 = nodeList50.indexOf((java.lang.Object) true);
        javafx.scene.Node node61 = null; // flaky: nodeList50.get((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node62 = null; // flaky: nodeList8.set((int) (byte) 10, node61);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
// flaky:         org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        boolean boolean37 = nodeList35.isEmpty();
        int int39 = nodeList35.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null;
        Interface.AddWood addWood42 = null; // flaky: new Interface.AddWood(woodTable40, woodTotalValues41);
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: addWood42.getAll();
        boolean boolean45 = false; // flaky: nodeList43.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node47 = null;
        javafx.scene.Node node48 = null; // flaky: nodeList43.set((int) (byte) 1, node47);
        boolean boolean49 = nodeList35.add(node48);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood52.getAll();
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        boolean boolean58 = nodeList56.isEmpty();
        int int60 = nodeList56.lastIndexOf((java.lang.Object) 100);
        int int62 = nodeList56.lastIndexOf((java.lang.Object) 10);
        boolean boolean63 = false; // flaky: nodeList54.retainAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        boolean boolean64 = nodeList35.removeAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        boolean boolean65 = false; // flaky: nodeList7.containsAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        java.util.stream.Stream<javafx.scene.Node> nodeStream66 = null; // flaky: nodeList7.stream();
        int int67 = 0; // flaky: nodeList7.size();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
// flaky:         woodTotalValues3.redraw(100.0d, (double) 11);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        int int10 = nodeList1.indexOf((java.lang.Object) true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList13 = nodeList1.subList((int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(35) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator24 = null; // flaky: nodeList19.spliterator();
        java.util.stream.Stream<javafx.scene.Node> nodeStream25 = null; // flaky: nodeList19.parallelStream();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator24);
// flaky:         org.junit.Assert.assertNotNull(nodeStream25);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = nodeList25.remove(obj27);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        boolean boolean35 = nodeList25.equals((java.lang.Object) nodeList30);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood38.getAll();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        boolean boolean44 = nodeList42.isEmpty();
        int int46 = nodeList42.lastIndexOf((java.lang.Object) 100);
        int int48 = nodeList42.lastIndexOf((java.lang.Object) 10);
        boolean boolean49 = false; // flaky: nodeList40.retainAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        javafx.scene.Node[] nodeArray50 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList51 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList51, nodeArray50);
        java.lang.Object obj53 = null;
        boolean boolean54 = nodeList51.remove(obj53);
        boolean boolean55 = nodeList51.isEmpty();
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        Interface.WoodTable woodTable60 = null;
        Interface.WoodTotalValues woodTotalValues61 = null;
        Interface.AddWood addWood62 = null; // flaky: new Interface.AddWood(woodTable60, woodTotalValues61);
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: addWood62.getAll();
        boolean boolean64 = false; // flaky: nodeList57.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList63);
        int int66 = nodeList57.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray68 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList69 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList69, nodeArray68);
        boolean boolean71 = nodeList69.isEmpty();
        int int73 = nodeList69.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable74 = null;
        Interface.WoodTotalValues woodTotalValues75 = null;
        Interface.AddWood addWood76 = null; // flaky: new Interface.AddWood(woodTable74, woodTotalValues75);
        java.util.ArrayList<javafx.scene.Node> nodeList77 = null; // flaky: addWood76.getAll();
        boolean boolean79 = false; // flaky: nodeList77.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node81 = null;
        javafx.scene.Node node82 = null; // flaky: nodeList77.set((int) (byte) 1, node81);
        boolean boolean83 = nodeList69.add(node82);
        javafx.scene.Node node84 = null; // flaky: nodeList57.set((int) (short) 0, node82);
        boolean boolean85 = nodeList51.add(node84);
        boolean boolean87 = nodeList51.remove((java.lang.Object) 100L);
        boolean boolean88 = nodeList42.remove((java.lang.Object) boolean87);
        boolean boolean89 = nodeList25.addAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        boolean boolean90 = false; // flaky: nodeList4.equals((java.lang.Object) nodeList42);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator91 = nodeList42.spliterator();
        java.util.stream.Stream<javafx.scene.Node> nodeStream92 = nodeList42.parallelStream();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
// flaky:         org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator91);
        org.junit.Assert.assertNotNull(nodeStream92);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        boolean boolean19 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        javafx.scene.Node node25 = null;
        boolean boolean26 = nodeList21.add(node25);
        java.util.ListIterator<javafx.scene.Node> nodeItor27 = nodeList21.listIterator();
        boolean boolean28 = nodeList6.removeAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        int int29 = nodeList21.size();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        boolean boolean17 = nodeList15.isEmpty();
        int int19 = nodeList15.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        boolean boolean25 = false; // flaky: nodeList23.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node27 = null;
        javafx.scene.Node node28 = null; // flaky: nodeList23.set((int) (byte) 1, node27);
        boolean boolean29 = nodeList15.add(node28);
        java.util.stream.Stream<javafx.scene.Node> nodeStream30 = nodeList15.stream();
        boolean boolean31 = nodeList6.equals((java.lang.Object) nodeStream30);
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = nodeList34.remove(obj36);
        javafx.scene.Node[] nodeArray38 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList39 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList39, nodeArray38);
        boolean boolean41 = nodeList39.isEmpty();
        int int43 = nodeList39.lastIndexOf((java.lang.Object) 100);
        boolean boolean44 = nodeList39.isEmpty();
        nodeList39.clear();
        boolean boolean46 = nodeList34.removeAll((java.util.Collection<javafx.scene.Node>) nodeList39);
        Interface.WoodTable woodTable47 = null;
        Interface.WoodTotalValues woodTotalValues48 = null;
        Interface.AddWood addWood49 = null; // flaky: new Interface.AddWood(woodTable47, woodTotalValues48);
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: addWood49.getAll();
// flaky:         addWood49.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood49.getAll();
        boolean boolean55 = false; // flaky: nodeList39.addAll((java.util.Collection<javafx.scene.Node>) nodeList54);
        javafx.scene.Node node57 = null; // flaky: nodeList39.remove((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            nodeList6.add(11, node57);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
// flaky:         org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        java.lang.Object[] objArray24 = null; // flaky: nodeList4.toArray();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node26 = null; // flaky: nodeList4.remove((int) (short) 1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean5 = false; // flaky: nodeList3.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node7 = null;
        javafx.scene.Node node8 = null; // flaky: nodeList3.set((int) (byte) 1, node7);
        java.util.ListIterator<javafx.scene.Node> nodeItor9 = null; // flaky: nodeList3.listIterator();
// flaky:         nodeList3.clear();
        java.util.Iterator<javafx.scene.Node> nodeItor11 = null; // flaky: nodeList3.iterator();
        Interface.WoodTable woodTable13 = null;
        Interface.WoodTotalValues woodTotalValues14 = null;
        Interface.AddWood addWood15 = null; // flaky: new Interface.AddWood(woodTable13, woodTotalValues14);
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood15.getAll();
// flaky:         addWood15.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood15.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood15.getAll();
        int int22 = 0; // flaky: nodeList21.size();
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean28 = false; // flaky: nodeList27.isEmpty();
        javafx.scene.Node[] nodeArray30 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList31 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList31, nodeArray30);
        boolean boolean33 = nodeList31.isEmpty();
        int int35 = nodeList31.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        boolean boolean41 = false; // flaky: nodeList39.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node43 = null;
        javafx.scene.Node node44 = null; // flaky: nodeList39.set((int) (byte) 1, node43);
        boolean boolean45 = nodeList31.add(node44);
        javafx.scene.Node[] nodeArray47 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList48 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList48, nodeArray47);
        Interface.WoodTable woodTable51 = null;
        Interface.WoodTotalValues woodTotalValues52 = null;
        Interface.AddWood addWood53 = null; // flaky: new Interface.AddWood(woodTable51, woodTotalValues52);
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood53.getAll();
        boolean boolean55 = false; // flaky: nodeList48.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList54);
        int int57 = nodeList48.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray59 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList60 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList60, nodeArray59);
        boolean boolean62 = nodeList60.isEmpty();
        int int64 = nodeList60.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable65 = null;
        Interface.WoodTotalValues woodTotalValues66 = null;
        Interface.AddWood addWood67 = null; // flaky: new Interface.AddWood(woodTable65, woodTotalValues66);
        java.util.ArrayList<javafx.scene.Node> nodeList68 = null; // flaky: addWood67.getAll();
        boolean boolean70 = false; // flaky: nodeList68.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node72 = null;
        javafx.scene.Node node73 = null; // flaky: nodeList68.set((int) (byte) 1, node72);
        boolean boolean74 = nodeList60.add(node73);
        javafx.scene.Node node75 = null; // flaky: nodeList48.set((int) (short) 0, node73);
        javafx.scene.Node node76 = nodeList31.set((int) (byte) 0, node73);
// flaky:         nodeList27.add((int) (short) 0, node76);
        boolean boolean78 = false; // flaky: nodeList21.addAll((int) (byte) 0, (java.util.Collection<javafx.scene.Node>) nodeList27);
        javafx.scene.Node node80 = null; // flaky: nodeList21.remove((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node81 = null; // flaky: nodeList3.set(2, node80);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertNotNull(node8);
// flaky:         org.junit.Assert.assertNotNull(nodeItor9);
// flaky:         org.junit.Assert.assertNotNull(nodeItor11);
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
// flaky:         org.junit.Assert.assertNotNull(node75);
// flaky:         org.junit.Assert.assertNotNull(node76);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
// flaky:         org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        boolean boolean6 = false; // flaky: nodeList3.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor7 = null; // flaky: nodeList3.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = null; // flaky: nodeList3.listIterator();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        Interface.WoodTable woodTable13 = null;
        Interface.WoodTotalValues woodTotalValues14 = null;
        Interface.AddWood addWood15 = null; // flaky: new Interface.AddWood(woodTable13, woodTotalValues14);
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood15.getAll();
        boolean boolean17 = false; // flaky: nodeList10.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList16);
        java.util.stream.Stream<javafx.scene.Node> nodeStream18 = null; // flaky: nodeList16.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator19 = null; // flaky: nodeList16.spliterator();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        boolean boolean25 = false; // flaky: nodeList16.removeAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        boolean boolean29 = nodeList27.isEmpty();
        int int31 = nodeList27.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable32 = null;
        Interface.WoodTotalValues woodTotalValues33 = null;
        Interface.AddWood addWood34 = null; // flaky: new Interface.AddWood(woodTable32, woodTotalValues33);
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood34.getAll();
        boolean boolean37 = false; // flaky: nodeList35.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node39 = null;
        javafx.scene.Node node40 = null; // flaky: nodeList35.set((int) (byte) 1, node39);
        boolean boolean41 = nodeList27.add(node40);
        boolean boolean42 = false; // flaky: nodeList16.add(node40);
        Interface.WoodTable woodTable43 = null;
        Interface.WoodTotalValues woodTotalValues44 = null;
        Interface.AddWood addWood45 = null; // flaky: new Interface.AddWood(woodTable43, woodTotalValues44);
        java.util.ArrayList<javafx.scene.Node> nodeList46 = null; // flaky: addWood45.getAll();
        boolean boolean47 = false; // flaky: nodeList46.isEmpty();
        boolean boolean48 = false; // flaky: nodeList16.addAll((java.util.Collection<javafx.scene.Node>) nodeList46);
        int int49 = 0; // flaky: nodeList46.size();
        boolean boolean50 = false; // flaky: nodeList3.retainAll((java.util.Collection<javafx.scene.Node>) nodeList46);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator51 = null; // flaky: nodeList3.spliterator();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor7);
// flaky:         org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream18);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator19);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator51);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        java.lang.Object[] objArray23 = nodeList6.toArray();
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
// flaky:         addWood26.redraw((double) 10.0f, (double) (-1L));
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood26.getAll();
        int int32 = nodeList6.lastIndexOf((java.lang.Object) addWood26);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood26.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood26.getAll();
// flaky:         addWood26.redraw((double) (byte) 100, (double) (short) 100);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        boolean boolean6 = nodeList1.isEmpty();
        nodeList1.clear();
        java.util.stream.Stream<javafx.scene.Node> nodeStream8 = nodeList1.parallelStream();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeStream8);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
        java.util.Iterator<javafx.scene.Node> nodeItor4 = null; // flaky: nodeList3.iterator();
        Interface.WoodTable woodTable5 = null;
        Interface.WoodTotalValues woodTotalValues6 = null;
        Interface.AddWood addWood7 = null; // flaky: new Interface.AddWood(woodTable5, woodTotalValues6);
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood7.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood7.getAll();
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        java.lang.Object obj13 = null;
        boolean boolean14 = nodeList11.remove(obj13);
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        boolean boolean18 = nodeList16.isEmpty();
        int int20 = nodeList16.lastIndexOf((java.lang.Object) 100);
        boolean boolean21 = nodeList16.isEmpty();
        nodeList16.clear();
        boolean boolean23 = nodeList11.removeAll((java.util.Collection<javafx.scene.Node>) nodeList16);
        boolean boolean24 = nodeList11.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor25 = nodeList11.iterator();
        java.lang.Object[] objArray26 = nodeList11.toArray();
        int int27 = 0; // flaky: nodeList9.lastIndexOf((java.lang.Object) nodeList11);
        int int28 = 0; // flaky: nodeList3.lastIndexOf((java.lang.Object) int27);
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeItor4);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(nodeItor25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        java.lang.Object[] objArray24 = null; // flaky: nodeList4.toArray();
        int int26 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) (short) 0);
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
        boolean boolean32 = false; // flaky: nodeList30.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node34 = null;
        javafx.scene.Node node35 = null; // flaky: nodeList30.set((int) (byte) 1, node34);
        java.util.ListIterator<javafx.scene.Node> nodeItor36 = null; // flaky: nodeList30.listIterator();
        boolean boolean37 = false; // flaky: nodeList4.removeAll((java.util.Collection<javafx.scene.Node>) nodeList30);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertNotNull(node35);
// flaky:         org.junit.Assert.assertNotNull(nodeItor36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        int int4 = 0; // flaky: nodeList2.indexOf((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray5 = null; // flaky: nodeList2.toArray();
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = false; // flaky: nodeList2.addAll((java.util.Collection<javafx.scene.Node>) nodeList9);
        int int13 = 0; // flaky: nodeList9.size();
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray5);
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        int int5 = nodeList1.size();
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: addWood8.getAll();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        boolean boolean14 = nodeList12.isEmpty();
        int int16 = nodeList12.lastIndexOf((java.lang.Object) 100);
        int int18 = nodeList12.lastIndexOf((java.lang.Object) 10);
        boolean boolean19 = false; // flaky: nodeList10.retainAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood22.getAll();
        boolean boolean25 = false; // flaky: nodeList12.addAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = nodeList27.remove(obj29);
        javafx.scene.Node node31 = null;
        boolean boolean32 = nodeList27.add(node31);
        java.util.ListIterator<javafx.scene.Node> nodeItor33 = nodeList27.listIterator();
        boolean boolean34 = nodeList12.removeAll((java.util.Collection<javafx.scene.Node>) nodeList27);
        boolean boolean35 = nodeList1.equals((java.lang.Object) nodeList12);
        java.util.stream.Stream<javafx.scene.Node> nodeStream36 = nodeList1.parallelStream();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(nodeItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeStream36);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood33.getAll();
        boolean boolean37 = false; // flaky: nodeList22.addAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        int int38 = nodeList22.size();
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null;
        Interface.AddWood addWood42 = null; // flaky: new Interface.AddWood(woodTable40, woodTotalValues41);
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: addWood42.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood42.getAll();
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        int int52 = nodeList46.lastIndexOf((java.lang.Object) 10);
        boolean boolean53 = false; // flaky: nodeList44.retainAll((java.util.Collection<javafx.scene.Node>) nodeList46);
        boolean boolean55 = false; // flaky: nodeList44.contains((java.lang.Object) false);
        Interface.WoodTable woodTable56 = null;
        Interface.WoodTotalValues woodTotalValues57 = null;
        Interface.AddWood addWood58 = null; // flaky: new Interface.AddWood(woodTable56, woodTotalValues57);
        java.util.ArrayList<javafx.scene.Node> nodeList59 = null; // flaky: addWood58.getAll();
        boolean boolean60 = false; // flaky: nodeList59.isEmpty();
        boolean boolean62 = false; // flaky: nodeList59.equals((java.lang.Object) 100);
        int int63 = 0; // flaky: nodeList44.lastIndexOf((java.lang.Object) nodeList59);
        boolean boolean64 = false; // flaky: nodeList44.isEmpty();
        javafx.scene.Node[] nodeArray65 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList66 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList66, nodeArray65);
        Interface.WoodTable woodTable69 = null;
        Interface.WoodTotalValues woodTotalValues70 = null;
        Interface.AddWood addWood71 = null; // flaky: new Interface.AddWood(woodTable69, woodTotalValues70);
        java.util.ArrayList<javafx.scene.Node> nodeList72 = null; // flaky: addWood71.getAll();
        boolean boolean73 = false; // flaky: nodeList66.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList72);
        int int75 = nodeList66.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray77 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList78 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList78, nodeArray77);
        boolean boolean80 = nodeList78.isEmpty();
        int int82 = nodeList78.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable83 = null;
        Interface.WoodTotalValues woodTotalValues84 = null;
        Interface.AddWood addWood85 = null; // flaky: new Interface.AddWood(woodTable83, woodTotalValues84);
        java.util.ArrayList<javafx.scene.Node> nodeList86 = null; // flaky: addWood85.getAll();
        boolean boolean88 = false; // flaky: nodeList86.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node90 = null;
        javafx.scene.Node node91 = null; // flaky: nodeList86.set((int) (byte) 1, node90);
        boolean boolean92 = nodeList78.add(node91);
        javafx.scene.Node node93 = null; // flaky: nodeList66.set((int) (short) 0, node91);
        int int94 = 0; // flaky: nodeList44.lastIndexOf((java.lang.Object) nodeList66);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = nodeList22.addAll(11, (java.util.Collection<javafx.scene.Node>) nodeList66);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList72);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
// flaky:         org.junit.Assert.assertNotNull(node93);
// flaky:         org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = nodeList7.remove(obj9);
        boolean boolean11 = nodeList7.isEmpty();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray15 = nodeList7.toArray(strArray14);
        java.lang.CharSequence[] charSequenceArray16 = nodeList1.toArray((java.lang.CharSequence[]) strArray14);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean25 = false; // flaky: nodeList18.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList24);
        java.util.stream.Stream<javafx.scene.Node> nodeStream26 = null; // flaky: nodeList24.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator27 = null; // flaky: nodeList24.spliterator();
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        java.lang.Object obj31 = null;
        boolean boolean32 = nodeList29.remove(obj31);
        boolean boolean33 = false; // flaky: nodeList24.removeAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        boolean boolean37 = nodeList35.isEmpty();
        int int39 = nodeList35.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null;
        Interface.AddWood addWood42 = null; // flaky: new Interface.AddWood(woodTable40, woodTotalValues41);
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: addWood42.getAll();
        boolean boolean45 = false; // flaky: nodeList43.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node47 = null;
        javafx.scene.Node node48 = null; // flaky: nodeList43.set((int) (byte) 1, node47);
        boolean boolean49 = nodeList35.add(node48);
        boolean boolean50 = false; // flaky: nodeList24.add(node48);
        Interface.WoodTable woodTable51 = null;
        Interface.WoodTotalValues woodTotalValues52 = null;
        Interface.AddWood addWood53 = null; // flaky: new Interface.AddWood(woodTable51, woodTotalValues52);
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood53.getAll();
        boolean boolean55 = false; // flaky: nodeList54.isEmpty();
        boolean boolean56 = false; // flaky: nodeList24.addAll((java.util.Collection<javafx.scene.Node>) nodeList54);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator57 = null; // flaky: nodeList24.spliterator();
        boolean boolean58 = nodeList1.remove((java.lang.Object) nodeList24);
        Interface.WoodTable woodTable59 = null;
        Interface.WoodTable woodTable60 = null;
        Interface.WoodTable woodTable61 = null;
        Interface.WoodTotalValues woodTotalValues62 = null; // flaky: new Interface.WoodTotalValues(woodTable61);
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: woodTotalValues62.getAll();
        Interface.AddWood addWood64 = null; // flaky: new Interface.AddWood(woodTable60, woodTotalValues62);
        Interface.AddWood addWood65 = null; // flaky: new Interface.AddWood(woodTable59, woodTotalValues62);
        java.util.ArrayList<javafx.scene.Node> nodeList66 = null; // flaky: woodTotalValues62.getAll();
        boolean boolean67 = false; // flaky: nodeList24.containsAll((java.util.Collection<javafx.scene.Node>) nodeList66);
        javafx.scene.Node node69 = null; // flaky: nodeList24.get((int) (short) 10);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream26);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
// flaky:         org.junit.Assert.assertNotNull(nodeList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((double) 0L, (double) 100.0f);
        java.util.ArrayList<javafx.scene.Node> nodeList6 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: woodTotalValues1.getAll();
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList6);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = nodeList6.remove(obj8);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        boolean boolean18 = false; // flaky: nodeList11.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        boolean boolean23 = nodeList21.isEmpty();
        int int25 = nodeList21.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean31 = false; // flaky: nodeList29.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node33 = null;
        javafx.scene.Node node34 = null; // flaky: nodeList29.set((int) (byte) 1, node33);
        boolean boolean35 = nodeList21.add(node34);
// flaky:         nodeList11.add(1, node34);
        boolean boolean37 = nodeList6.retainAll((java.util.Collection<javafx.scene.Node>) nodeList11);
        boolean boolean38 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList11);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        int int44 = nodeList40.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable45 = null;
        Interface.WoodTotalValues woodTotalValues46 = null;
        Interface.AddWood addWood47 = null; // flaky: new Interface.AddWood(woodTable45, woodTotalValues46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: addWood47.getAll();
        boolean boolean50 = false; // flaky: nodeList48.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node52 = null;
        javafx.scene.Node node53 = null; // flaky: nodeList48.set((int) (byte) 1, node52);
        boolean boolean54 = nodeList40.add(node53);
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        java.lang.Object obj58 = null;
        boolean boolean59 = nodeList56.remove(obj58);
        boolean boolean60 = nodeList40.retainAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        javafx.scene.Node[] nodeArray61 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList62 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList62, nodeArray61);
        boolean boolean64 = nodeList62.isEmpty();
        int int66 = nodeList62.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable67 = null;
        Interface.WoodTotalValues woodTotalValues68 = null;
        Interface.AddWood addWood69 = null; // flaky: new Interface.AddWood(woodTable67, woodTotalValues68);
        java.util.ArrayList<javafx.scene.Node> nodeList70 = null; // flaky: addWood69.getAll();
        boolean boolean72 = false; // flaky: nodeList70.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node74 = null;
        javafx.scene.Node node75 = null; // flaky: nodeList70.set((int) (byte) 1, node74);
        boolean boolean76 = nodeList62.add(node75);
        java.util.stream.Stream<javafx.scene.Node> nodeStream77 = nodeList62.stream();
        boolean boolean78 = nodeList40.equals((java.lang.Object) nodeList62);
        boolean boolean79 = nodeList11.addAll((java.util.Collection<javafx.scene.Node>) nodeList62);
        java.lang.Object obj80 = null;
        int int81 = nodeList62.indexOf(obj80);
        Interface.WoodTable woodTable82 = null;
        Interface.WoodTotalValues woodTotalValues83 = null;
        Interface.AddWood addWood84 = null; // flaky: new Interface.AddWood(woodTable82, woodTotalValues83);
        java.util.ArrayList<javafx.scene.Node> nodeList85 = null; // flaky: addWood84.getAll();
// flaky:         addWood84.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList89 = null; // flaky: addWood84.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList90 = null; // flaky: addWood84.getAll();
        int int91 = nodeList62.lastIndexOf((java.lang.Object) nodeList90);
        java.util.ListIterator<javafx.scene.Node> nodeItor92 = nodeList62.listIterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(nodeStream77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList85);
// flaky:         org.junit.Assert.assertNotNull(nodeList89);
// flaky:         org.junit.Assert.assertNotNull(nodeList90);
// flaky:         org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(nodeItor92);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray9 = nodeList1.toArray(strArray8);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = nodeList1.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        boolean boolean19 = nodeList17.isEmpty();
        int int21 = nodeList17.lastIndexOf((java.lang.Object) 100);
        boolean boolean22 = nodeList12.equals((java.lang.Object) nodeList17);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood25.getAll();
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        boolean boolean31 = nodeList29.isEmpty();
        int int33 = nodeList29.lastIndexOf((java.lang.Object) 100);
        int int35 = nodeList29.lastIndexOf((java.lang.Object) 10);
        boolean boolean36 = false; // flaky: nodeList27.retainAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        java.lang.Object obj40 = null;
        boolean boolean41 = nodeList38.remove(obj40);
        boolean boolean42 = nodeList38.isEmpty();
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        Interface.WoodTable woodTable47 = null;
        Interface.WoodTotalValues woodTotalValues48 = null;
        Interface.AddWood addWood49 = null; // flaky: new Interface.AddWood(woodTable47, woodTotalValues48);
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: addWood49.getAll();
        boolean boolean51 = false; // flaky: nodeList44.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList50);
        int int53 = nodeList44.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        boolean boolean58 = nodeList56.isEmpty();
        int int60 = nodeList56.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable61 = null;
        Interface.WoodTotalValues woodTotalValues62 = null;
        Interface.AddWood addWood63 = null; // flaky: new Interface.AddWood(woodTable61, woodTotalValues62);
        java.util.ArrayList<javafx.scene.Node> nodeList64 = null; // flaky: addWood63.getAll();
        boolean boolean66 = false; // flaky: nodeList64.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node68 = null;
        javafx.scene.Node node69 = null; // flaky: nodeList64.set((int) (byte) 1, node68);
        boolean boolean70 = nodeList56.add(node69);
        javafx.scene.Node node71 = null; // flaky: nodeList44.set((int) (short) 0, node69);
        boolean boolean72 = nodeList38.add(node71);
        boolean boolean74 = nodeList38.remove((java.lang.Object) 100L);
        boolean boolean75 = nodeList29.remove((java.lang.Object) boolean74);
        boolean boolean76 = nodeList12.addAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        java.lang.Object[] objArray77 = nodeList12.toArray();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator78 = nodeList12.spliterator();
        boolean boolean79 = nodeList1.contains((java.lang.Object) nodeList12);
        javafx.scene.Node[] nodeArray80 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList81 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList81, nodeArray80);
        java.lang.Object obj83 = null;
        boolean boolean84 = nodeList81.remove(obj83);
        javafx.scene.Node[] nodeArray85 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList86 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList86, nodeArray85);
        boolean boolean88 = nodeList86.isEmpty();
        int int90 = nodeList86.lastIndexOf((java.lang.Object) 100);
        boolean boolean91 = nodeList81.equals((java.lang.Object) nodeList86);
        java.util.stream.Stream<javafx.scene.Node> nodeStream92 = nodeList81.stream();
        boolean boolean93 = nodeList1.equals((java.lang.Object) nodeList81);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(nodeSpliterator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(nodeStream92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        int int4 = 0; // flaky: nodeList2.indexOf((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray5 = null; // flaky: nodeList2.toArray();
        java.util.stream.Stream<javafx.scene.Node> nodeStream6 = null; // flaky: nodeList2.stream();
        javafx.scene.Node[] nodeArray7 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList8 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList8, nodeArray7);
        boolean boolean10 = nodeList8.isEmpty();
        int int12 = nodeList8.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable13 = null;
        Interface.WoodTotalValues woodTotalValues14 = null;
        Interface.AddWood addWood15 = null; // flaky: new Interface.AddWood(woodTable13, woodTotalValues14);
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood15.getAll();
        boolean boolean18 = false; // flaky: nodeList16.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node20 = null;
        javafx.scene.Node node21 = null; // flaky: nodeList16.set((int) (byte) 1, node20);
        boolean boolean22 = nodeList8.add(node21);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        java.lang.Object obj26 = null;
        boolean boolean27 = nodeList24.remove(obj26);
        boolean boolean28 = nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        Interface.WoodTable woodTable33 = null;
        Interface.WoodTotalValues woodTotalValues34 = null;
        Interface.AddWood addWood35 = null; // flaky: new Interface.AddWood(woodTable33, woodTotalValues34);
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood35.getAll();
        boolean boolean37 = false; // flaky: nodeList30.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList36);
        java.util.stream.Stream<javafx.scene.Node> nodeStream38 = null; // flaky: nodeList36.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator39 = null; // flaky: nodeList36.spliterator();
        boolean boolean40 = false; // flaky: nodeList8.addAll((java.util.Collection<javafx.scene.Node>) nodeList36);
// flaky:         nodeList36.clear();
        javafx.scene.Node[] nodeArray42 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList43 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList43, nodeArray42);
        Interface.WoodTable woodTable46 = null;
        Interface.WoodTotalValues woodTotalValues47 = null;
        Interface.AddWood addWood48 = null; // flaky: new Interface.AddWood(woodTable46, woodTotalValues47);
        java.util.ArrayList<javafx.scene.Node> nodeList49 = null; // flaky: addWood48.getAll();
        boolean boolean50 = false; // flaky: nodeList43.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList49);
        java.util.stream.Stream<javafx.scene.Node> nodeStream51 = null; // flaky: nodeList49.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator52 = null; // flaky: nodeList49.spliterator();
        javafx.scene.Node[] nodeArray53 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList54 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList54, nodeArray53);
        boolean boolean56 = nodeList54.isEmpty();
        int int58 = nodeList54.lastIndexOf((java.lang.Object) 100);
        boolean boolean59 = nodeList54.isEmpty();
        boolean boolean60 = false; // flaky: nodeList49.contains((java.lang.Object) boolean59);
        int int61 = 0; // flaky: nodeList36.indexOf((java.lang.Object) boolean60);
        boolean boolean62 = false; // flaky: nodeList2.containsAll((java.util.Collection<javafx.scene.Node>) nodeList36);
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray5);
// flaky:         org.junit.Assert.assertNotNull(nodeStream6);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream38);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList49);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream51);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator52);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray9 = nodeList1.toArray(strArray8);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = nodeList1.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        boolean boolean19 = nodeList17.isEmpty();
        int int21 = nodeList17.lastIndexOf((java.lang.Object) 100);
        boolean boolean22 = nodeList12.equals((java.lang.Object) nodeList17);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood25.getAll();
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        boolean boolean31 = nodeList29.isEmpty();
        int int33 = nodeList29.lastIndexOf((java.lang.Object) 100);
        int int35 = nodeList29.lastIndexOf((java.lang.Object) 10);
        boolean boolean36 = false; // flaky: nodeList27.retainAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        java.lang.Object obj40 = null;
        boolean boolean41 = nodeList38.remove(obj40);
        boolean boolean42 = nodeList38.isEmpty();
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        Interface.WoodTable woodTable47 = null;
        Interface.WoodTotalValues woodTotalValues48 = null;
        Interface.AddWood addWood49 = null; // flaky: new Interface.AddWood(woodTable47, woodTotalValues48);
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: addWood49.getAll();
        boolean boolean51 = false; // flaky: nodeList44.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList50);
        int int53 = nodeList44.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        boolean boolean58 = nodeList56.isEmpty();
        int int60 = nodeList56.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable61 = null;
        Interface.WoodTotalValues woodTotalValues62 = null;
        Interface.AddWood addWood63 = null; // flaky: new Interface.AddWood(woodTable61, woodTotalValues62);
        java.util.ArrayList<javafx.scene.Node> nodeList64 = null; // flaky: addWood63.getAll();
        boolean boolean66 = false; // flaky: nodeList64.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node68 = null;
        javafx.scene.Node node69 = null; // flaky: nodeList64.set((int) (byte) 1, node68);
        boolean boolean70 = nodeList56.add(node69);
        javafx.scene.Node node71 = null; // flaky: nodeList44.set((int) (short) 0, node69);
        boolean boolean72 = nodeList38.add(node71);
        boolean boolean74 = nodeList38.remove((java.lang.Object) 100L);
        boolean boolean75 = nodeList29.remove((java.lang.Object) boolean74);
        boolean boolean76 = nodeList12.addAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        java.lang.Object[] objArray77 = nodeList12.toArray();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator78 = nodeList12.spliterator();
        boolean boolean79 = nodeList1.contains((java.lang.Object) nodeList12);
        Interface.WoodTable woodTable80 = null;
        Interface.WoodTable woodTable81 = null;
        Interface.WoodTable woodTable82 = null;
        Interface.WoodTotalValues woodTotalValues83 = null; // flaky: new Interface.WoodTotalValues(woodTable82);
        java.util.ArrayList<javafx.scene.Node> nodeList84 = null; // flaky: woodTotalValues83.getAll();
        Interface.AddWood addWood85 = null; // flaky: new Interface.AddWood(woodTable81, woodTotalValues83);
        Interface.AddWood addWood86 = null; // flaky: new Interface.AddWood(woodTable80, woodTotalValues83);
        java.util.ArrayList<javafx.scene.Node> nodeList87 = null; // flaky: woodTotalValues83.getAll();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator88 = null; // flaky: nodeList87.spliterator();
        boolean boolean89 = false; // flaky: nodeList12.containsAll((java.util.Collection<javafx.scene.Node>) nodeList87);
        java.util.AbstractList[][] abstractListArray91 = new java.util.AbstractList[0][];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<javafx.scene.Node>[][] nodeListArray92 = (java.util.AbstractList<javafx.scene.Node>[][]) abstractListArray91;
        // The following exception was thrown during execution in test generation
        try {
            java.util.AbstractList<javafx.scene.Node>[][] nodeListArray93 = null; // flaky: nodeList87.toArray(nodeListArray92);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(nodeSpliterator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList84);
// flaky:         org.junit.Assert.assertNotNull(nodeList87);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(abstractListArray91);
        org.junit.Assert.assertNotNull(nodeListArray92);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        boolean boolean34 = nodeList32.isEmpty();
        boolean boolean35 = nodeList32.isEmpty();
        nodeList32.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor38 = nodeList32.listIterator(0);
        Interface.WoodTable woodTable39 = null;
        Interface.WoodTotalValues woodTotalValues40 = null;
        Interface.AddWood addWood41 = null; // flaky: new Interface.AddWood(woodTable39, woodTotalValues40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: addWood41.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: addWood41.getAll();
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        int int51 = nodeList45.lastIndexOf((java.lang.Object) 10);
        boolean boolean52 = false; // flaky: nodeList43.retainAll((java.util.Collection<javafx.scene.Node>) nodeList45);
        boolean boolean54 = false; // flaky: nodeList43.contains((java.lang.Object) false);
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTotalValues woodTotalValues56 = null;
        Interface.AddWood addWood57 = null; // flaky: new Interface.AddWood(woodTable55, woodTotalValues56);
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood57.getAll();
        boolean boolean59 = false; // flaky: nodeList58.isEmpty();
        boolean boolean61 = false; // flaky: nodeList58.equals((java.lang.Object) 100);
        int int62 = 0; // flaky: nodeList43.lastIndexOf((java.lang.Object) nodeList58);
        java.lang.Object[] objArray63 = null; // flaky: nodeList43.toArray();
        int int64 = nodeList32.lastIndexOf((java.lang.Object) objArray63);
        java.util.stream.Stream<javafx.scene.Node> nodeStream65 = nodeList32.stream();
        int int66 = nodeList22.indexOf((java.lang.Object) nodeStream65);
        javafx.scene.Node[] nodeArray67 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList68 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList68, nodeArray67);
        Interface.WoodTable woodTable71 = null;
        Interface.WoodTotalValues woodTotalValues72 = null;
        Interface.AddWood addWood73 = null; // flaky: new Interface.AddWood(woodTable71, woodTotalValues72);
        java.util.ArrayList<javafx.scene.Node> nodeList74 = null; // flaky: addWood73.getAll();
        boolean boolean75 = false; // flaky: nodeList68.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList74);
        javafx.scene.Node[] nodeArray77 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList78 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList78, nodeArray77);
        boolean boolean80 = nodeList78.isEmpty();
        int int82 = nodeList78.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable83 = null;
        Interface.WoodTotalValues woodTotalValues84 = null;
        Interface.AddWood addWood85 = null; // flaky: new Interface.AddWood(woodTable83, woodTotalValues84);
        java.util.ArrayList<javafx.scene.Node> nodeList86 = null; // flaky: addWood85.getAll();
        boolean boolean88 = false; // flaky: nodeList86.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node90 = null;
        javafx.scene.Node node91 = null; // flaky: nodeList86.set((int) (byte) 1, node90);
        boolean boolean92 = nodeList78.add(node91);
// flaky:         nodeList68.add(1, node91);
        java.util.Iterator<javafx.scene.Node> nodeItor94 = nodeList68.iterator();
        javafx.scene.Node node96 = null; // flaky: nodeList68.remove((int) (byte) 1);
        int int97 = nodeList22.indexOf((java.lang.Object) (byte) 1);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(nodeItor38);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(nodeStream65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList74);
// flaky:         org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(nodeItor94);
// flaky:         org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        int int19 = nodeList13.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood22.getAll();
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        boolean boolean28 = nodeList26.isEmpty();
        int int30 = nodeList26.lastIndexOf((java.lang.Object) 100);
        int int32 = nodeList26.lastIndexOf((java.lang.Object) 10);
        boolean boolean33 = false; // flaky: nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        boolean boolean34 = nodeList13.containsAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = false; // flaky: nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        int int45 = nodeList1.lastIndexOf((java.lang.Object) nodeList13);
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean54 = false; // flaky: nodeList47.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList53);
        int int56 = nodeList47.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray58 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList59 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList59, nodeArray58);
        boolean boolean61 = nodeList59.isEmpty();
        int int63 = nodeList59.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable64 = null;
        Interface.WoodTotalValues woodTotalValues65 = null;
        Interface.AddWood addWood66 = null; // flaky: new Interface.AddWood(woodTable64, woodTotalValues65);
        java.util.ArrayList<javafx.scene.Node> nodeList67 = null; // flaky: addWood66.getAll();
        boolean boolean69 = false; // flaky: nodeList67.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node71 = null;
        javafx.scene.Node node72 = null; // flaky: nodeList67.set((int) (byte) 1, node71);
        boolean boolean73 = nodeList59.add(node72);
        javafx.scene.Node node74 = null; // flaky: nodeList47.set((int) (short) 0, node72);
        boolean boolean75 = nodeList13.containsAll((java.util.Collection<javafx.scene.Node>) nodeList47);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator76 = nodeList13.spliterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertNotNull(node74);
// flaky:         org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator76);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable8 = null;
        Interface.WoodTotalValues woodTotalValues9 = null;
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable8, woodTotalValues9);
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood10.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood10.getAll();
        javafx.scene.Node[] nodeArray13 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList14 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList14, nodeArray13);
        boolean boolean16 = nodeList14.isEmpty();
        int int18 = nodeList14.lastIndexOf((java.lang.Object) 100);
        int int20 = nodeList14.lastIndexOf((java.lang.Object) 10);
        boolean boolean21 = false; // flaky: nodeList12.retainAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        boolean boolean22 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        java.util.ListIterator<javafx.scene.Node> nodeItor33 = nodeList1.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node35 = nodeList1.get((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeItor33);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        int int10 = nodeList1.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = nodeList12.isEmpty();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray20 = nodeList12.toArray(strArray19);
        boolean boolean21 = nodeList1.equals((java.lang.Object) strArray20);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        boolean boolean25 = nodeList23.isEmpty();
        int int27 = nodeList23.lastIndexOf((java.lang.Object) 100);
        int int29 = nodeList23.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor30 = nodeList23.listIterator();
        int int31 = nodeList23.size();
        boolean boolean32 = nodeList23.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream33 = nodeList23.parallelStream();
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        boolean boolean37 = nodeList35.isEmpty();
        int int39 = nodeList35.lastIndexOf((java.lang.Object) 100);
        int int41 = nodeList35.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable42 = null;
        Interface.WoodTotalValues woodTotalValues43 = null;
        Interface.AddWood addWood44 = null; // flaky: new Interface.AddWood(woodTable42, woodTotalValues43);
        java.util.ArrayList<javafx.scene.Node> nodeList45 = null; // flaky: addWood44.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList46 = null; // flaky: addWood44.getAll();
        javafx.scene.Node[] nodeArray47 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList48 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList48, nodeArray47);
        boolean boolean50 = nodeList48.isEmpty();
        int int52 = nodeList48.lastIndexOf((java.lang.Object) 100);
        int int54 = nodeList48.lastIndexOf((java.lang.Object) 10);
        boolean boolean55 = false; // flaky: nodeList46.retainAll((java.util.Collection<javafx.scene.Node>) nodeList48);
        boolean boolean56 = nodeList35.containsAll((java.util.Collection<javafx.scene.Node>) nodeList48);
        Interface.WoodTable woodTable57 = null;
        Interface.WoodTotalValues woodTotalValues58 = null;
        Interface.AddWood addWood59 = null; // flaky: new Interface.AddWood(woodTable57, woodTotalValues58);
        java.util.ArrayList<javafx.scene.Node> nodeList60 = null; // flaky: addWood59.getAll();
        boolean boolean62 = false; // flaky: nodeList60.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node64 = null;
        javafx.scene.Node node65 = null; // flaky: nodeList60.set((int) (byte) 1, node64);
        boolean boolean66 = false; // flaky: nodeList35.removeAll((java.util.Collection<javafx.scene.Node>) nodeList60);
        int int67 = nodeList23.lastIndexOf((java.lang.Object) nodeList35);
        javafx.scene.Node[] nodeArray68 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList69 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList69, nodeArray68);
        java.lang.Object obj71 = null;
        boolean boolean72 = nodeList69.remove(obj71);
        javafx.scene.Node[] nodeArray73 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList74 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList74, nodeArray73);
        boolean boolean76 = nodeList74.isEmpty();
        int int78 = nodeList74.lastIndexOf((java.lang.Object) 100);
        boolean boolean79 = nodeList74.isEmpty();
        nodeList74.clear();
        boolean boolean81 = nodeList69.removeAll((java.util.Collection<javafx.scene.Node>) nodeList74);
        javafx.scene.Node[] nodeArray82 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList83 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList83, nodeArray82);
        boolean boolean85 = nodeList83.isEmpty();
        int int87 = nodeList83.lastIndexOf((java.lang.Object) 100);
        java.lang.Class<?> wildcardClass88 = nodeList83.getClass();
        javafx.scene.Node[] nodeArray89 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList90 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList90, nodeArray89);
        boolean boolean92 = nodeList90.isEmpty();
        int int94 = nodeList90.lastIndexOf((java.lang.Object) 100);
        java.lang.Class<?> wildcardClass95 = nodeList90.getClass();
        java.lang.reflect.AnnotatedElement[] annotatedElementArray96 = new java.lang.reflect.AnnotatedElement[] { wildcardClass88, wildcardClass95 };
        java.lang.reflect.AnnotatedElement[] annotatedElementArray97 = nodeList74.toArray(annotatedElementArray96);
        java.lang.reflect.AnnotatedElement[] annotatedElementArray98 = nodeList35.toArray(annotatedElementArray96);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.AnnotatedElement[] annotatedElementArray99 = nodeList1.toArray(annotatedElementArray98);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(nodeItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(nodeStream33);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList45);
// flaky:         org.junit.Assert.assertNotNull(nodeList46);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(nodeArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(annotatedElementArray96);
        org.junit.Assert.assertNotNull(annotatedElementArray97);
        org.junit.Assert.assertNotNull(annotatedElementArray98);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        Interface.WoodTable woodTable17 = null;
        Interface.WoodTotalValues woodTotalValues18 = null;
        Interface.AddWood addWood19 = null; // flaky: new Interface.AddWood(woodTable17, woodTotalValues18);
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood19.getAll();
// flaky:         addWood19.redraw((double) 10.0f, (double) (-1L));
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood19.getAll();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator25 = null; // flaky: nodeList24.spliterator();
        int int26 = 0; // flaky: nodeList7.lastIndexOf((java.lang.Object) nodeSpliterator25);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
// flaky:         addWood30.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood30.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood30.getAll();
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList41.isEmpty();
        Interface.WoodTable woodTable43 = null;
        Interface.WoodTotalValues woodTotalValues44 = null;
        Interface.AddWood addWood45 = null; // flaky: new Interface.AddWood(woodTable43, woodTotalValues44);
        java.util.ArrayList<javafx.scene.Node> nodeList46 = null; // flaky: addWood45.getAll();
        boolean boolean47 = false; // flaky: nodeList46.isEmpty();
        javafx.scene.Node[] nodeArray49 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList50 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList50, nodeArray49);
        Interface.WoodTable woodTable53 = null;
        Interface.WoodTotalValues woodTotalValues54 = null;
        Interface.AddWood addWood55 = null; // flaky: new Interface.AddWood(woodTable53, woodTotalValues54);
        java.util.ArrayList<javafx.scene.Node> nodeList56 = null; // flaky: addWood55.getAll();
        boolean boolean57 = false; // flaky: nodeList50.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList56);
        javafx.scene.Node[] nodeArray59 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList60 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList60, nodeArray59);
        boolean boolean62 = nodeList60.isEmpty();
        int int64 = nodeList60.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable65 = null;
        Interface.WoodTotalValues woodTotalValues66 = null;
        Interface.AddWood addWood67 = null; // flaky: new Interface.AddWood(woodTable65, woodTotalValues66);
        java.util.ArrayList<javafx.scene.Node> nodeList68 = null; // flaky: addWood67.getAll();
        boolean boolean70 = false; // flaky: nodeList68.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node72 = null;
        javafx.scene.Node node73 = null; // flaky: nodeList68.set((int) (byte) 1, node72);
        boolean boolean74 = nodeList60.add(node73);
// flaky:         nodeList50.add(1, node73);
        javafx.scene.Node node76 = null; // flaky: nodeList46.set(0, node73);
        boolean boolean77 = false; // flaky: nodeList41.add(node76);
        javafx.scene.Node node78 = null; // flaky: nodeList36.set((int) (short) 1, node76);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node79 = null; // flaky: nodeList7.set((int) ' ', node78);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
// flaky:         org.junit.Assert.assertNotNull(node76);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertNotNull(node78);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
// flaky:         woodTotalValues3.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: addWood8.getAll();
        Interface.WoodTable woodTable11 = null;
        Interface.WoodTotalValues woodTotalValues12 = null;
        Interface.AddWood addWood13 = null; // flaky: new Interface.AddWood(woodTable11, woodTotalValues12);
        java.util.ArrayList<javafx.scene.Node> nodeList14 = null; // flaky: addWood13.getAll();
        boolean boolean15 = false; // flaky: nodeList14.isEmpty();
        boolean boolean17 = false; // flaky: nodeList14.equals((java.lang.Object) 100);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList22 = null; // flaky: addWood20.getAll();
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        int int28 = nodeList24.lastIndexOf((java.lang.Object) 100);
        int int30 = nodeList24.lastIndexOf((java.lang.Object) 10);
        boolean boolean31 = false; // flaky: nodeList22.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        boolean boolean40 = false; // flaky: nodeList33.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList39);
        int int42 = nodeList33.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        java.lang.Object obj46 = null;
        boolean boolean47 = nodeList44.remove(obj46);
        boolean boolean48 = nodeList44.isEmpty();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray52 = nodeList44.toArray(strArray51);
        boolean boolean53 = nodeList33.equals((java.lang.Object) strArray52);
        int int54 = 0; // flaky: nodeList22.lastIndexOf((java.lang.Object) boolean53);
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        Interface.WoodTable woodTable59 = null;
        Interface.WoodTotalValues woodTotalValues60 = null;
        Interface.AddWood addWood61 = null; // flaky: new Interface.AddWood(woodTable59, woodTotalValues60);
        java.util.ArrayList<javafx.scene.Node> nodeList62 = null; // flaky: addWood61.getAll();
        boolean boolean63 = false; // flaky: nodeList56.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList62);
        int int65 = nodeList56.indexOf((java.lang.Object) true);
        boolean boolean66 = false; // flaky: nodeList22.removeAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        javafx.scene.Node[] nodeArray67 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList68 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList68, nodeArray67);
        java.lang.Object obj70 = null;
        boolean boolean71 = nodeList68.remove(obj70);
        javafx.scene.Node node72 = null;
        boolean boolean73 = nodeList68.add(node72);
        int int75 = nodeList68.indexOf((java.lang.Object) (short) 10);
        Interface.WoodTable woodTable76 = null;
        Interface.WoodTotalValues woodTotalValues77 = null;
        Interface.AddWood addWood78 = null; // flaky: new Interface.AddWood(woodTable76, woodTotalValues77);
        java.util.ArrayList<javafx.scene.Node> nodeList79 = null; // flaky: addWood78.getAll();
// flaky:         addWood78.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList83 = null; // flaky: addWood78.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList84 = null; // flaky: addWood78.getAll();
        javafx.scene.Node[] nodeArray85 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList86 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList86, nodeArray85);
        java.lang.Object obj88 = null;
        boolean boolean89 = nodeList86.remove(obj88);
        javafx.scene.Node node90 = null;
        boolean boolean91 = nodeList86.add(node90);
        java.util.ListIterator<javafx.scene.Node> nodeItor92 = nodeList86.listIterator();
        boolean boolean93 = false; // flaky: nodeList84.contains((java.lang.Object) nodeList86);
        java.util.ListIterator<javafx.scene.Node> nodeItor94 = nodeList86.listIterator();
        boolean boolean95 = nodeList68.remove((java.lang.Object) nodeList86);
        boolean boolean96 = false; // flaky: nodeList22.removeAll((java.util.Collection<javafx.scene.Node>) nodeList86);
        boolean boolean97 = false; // flaky: nodeList14.addAll((java.util.Collection<javafx.scene.Node>) nodeList86);
        boolean boolean98 = false; // flaky: nodeList10.removeAll((java.util.Collection<javafx.scene.Node>) nodeList14);
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
// flaky:         org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertNotNull(nodeList22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList62);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList79);
// flaky:         org.junit.Assert.assertNotNull(nodeList83);
// flaky:         org.junit.Assert.assertNotNull(nodeList84);
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(nodeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(nodeItor94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        java.lang.Class<?> wildcardClass19 = nodeList1.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean22 = false; // flaky: nodeList15.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList21);
        int int24 = nodeList15.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        java.lang.Object obj28 = null;
        boolean boolean29 = nodeList26.remove(obj28);
        boolean boolean30 = nodeList26.isEmpty();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray34 = nodeList26.toArray(strArray33);
        boolean boolean35 = nodeList15.equals((java.lang.Object) strArray34);
        int int36 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) boolean35);
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        boolean boolean40 = nodeList38.isEmpty();
        boolean boolean41 = nodeList38.isEmpty();
        nodeList38.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor44 = nodeList38.listIterator(0);
        Interface.WoodTable woodTable45 = null;
        Interface.WoodTotalValues woodTotalValues46 = null;
        Interface.AddWood addWood47 = null; // flaky: new Interface.AddWood(woodTable45, woodTotalValues46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: addWood47.getAll();
        boolean boolean50 = false; // flaky: nodeList48.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node52 = null;
        javafx.scene.Node node53 = null; // flaky: nodeList48.set((int) (byte) 1, node52);
        javafx.css.Styleable[] styleableArray54 = new javafx.css.Styleable[] { node53 };
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTotalValues woodTotalValues56 = null;
        Interface.AddWood addWood57 = null; // flaky: new Interface.AddWood(woodTable55, woodTotalValues56);
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood57.getAll();
        boolean boolean60 = false; // flaky: nodeList58.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node62 = null;
        javafx.scene.Node node63 = null; // flaky: nodeList58.set((int) (byte) 1, node62);
        javafx.css.Styleable[] styleableArray64 = new javafx.css.Styleable[] { node63 };
        javafx.css.Styleable[][] styleableArray65 = new javafx.css.Styleable[][] { styleableArray54, styleableArray64 };
        javafx.css.Styleable[][] styleableArray66 = nodeList38.toArray(styleableArray65);
        boolean boolean67 = false; // flaky: nodeList4.equals((java.lang.Object) nodeList38);
// flaky:         nodeList4.clear();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(nodeItor44);
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(styleableArray54);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(styleableArray64);
        org.junit.Assert.assertNotNull(styleableArray65);
        org.junit.Assert.assertNotNull(styleableArray66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
// flaky:         woodTotalValues1.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw(10.0d, 1.0d);
// flaky:         woodTotalValues1.redraw((double) (byte) 0, (double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues1.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
        java.util.Iterator<javafx.scene.Node> nodeItor4 = null; // flaky: nodeList3.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor5 = null; // flaky: nodeList3.listIterator();
        java.util.stream.Stream<javafx.scene.Node> nodeStream6 = null; // flaky: nodeList3.parallelStream();
        javafx.scene.Node[] nodeArray7 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList8 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList8, nodeArray7);
        boolean boolean10 = nodeList8.isEmpty();
        int int12 = nodeList8.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable13 = null;
        Interface.WoodTotalValues woodTotalValues14 = null;
        Interface.AddWood addWood15 = null; // flaky: new Interface.AddWood(woodTable13, woodTotalValues14);
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood15.getAll();
        boolean boolean18 = false; // flaky: nodeList16.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node20 = null;
        javafx.scene.Node node21 = null; // flaky: nodeList16.set((int) (byte) 1, node20);
        boolean boolean22 = nodeList8.add(node21);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        java.lang.Object obj26 = null;
        boolean boolean27 = nodeList24.remove(obj26);
        boolean boolean28 = nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        nodeList24.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor30 = nodeList24.listIterator();
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null; // flaky: new Interface.WoodTotalValues(woodTable31);
// flaky:         woodTotalValues32.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: woodTotalValues32.getAll();
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        boolean boolean42 = false; // flaky: nodeList40.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        int int51 = nodeList45.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable52 = null;
        Interface.WoodTotalValues woodTotalValues53 = null;
        Interface.AddWood addWood54 = null; // flaky: new Interface.AddWood(woodTable52, woodTotalValues53);
        java.util.ArrayList<javafx.scene.Node> nodeList55 = null; // flaky: addWood54.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList56 = null; // flaky: addWood54.getAll();
        javafx.scene.Node[] nodeArray57 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList58 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList58, nodeArray57);
        boolean boolean60 = nodeList58.isEmpty();
        int int62 = nodeList58.lastIndexOf((java.lang.Object) 100);
        int int64 = nodeList58.lastIndexOf((java.lang.Object) 10);
        boolean boolean65 = false; // flaky: nodeList56.retainAll((java.util.Collection<javafx.scene.Node>) nodeList58);
        boolean boolean66 = nodeList45.containsAll((java.util.Collection<javafx.scene.Node>) nodeList58);
        boolean boolean67 = false; // flaky: nodeList40.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList45);
        boolean boolean68 = false; // flaky: nodeList36.addAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        boolean boolean69 = nodeList24.remove((java.lang.Object) boolean68);
        boolean boolean70 = false; // flaky: nodeList3.equals((java.lang.Object) boolean69);
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeItor4);
// flaky:         org.junit.Assert.assertNotNull(nodeItor5);
// flaky:         org.junit.Assert.assertNotNull(nodeStream6);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(nodeItor30);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList55);
// flaky:         org.junit.Assert.assertNotNull(nodeList56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
// flaky:         woodTotalValues1.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: woodTotalValues1.getAll();
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray13 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList14 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList14, nodeArray13);
        boolean boolean16 = nodeList14.isEmpty();
        int int18 = nodeList14.lastIndexOf((java.lang.Object) 100);
        int int20 = nodeList14.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood23.getAll();
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        boolean boolean29 = nodeList27.isEmpty();
        int int31 = nodeList27.lastIndexOf((java.lang.Object) 100);
        int int33 = nodeList27.lastIndexOf((java.lang.Object) 10);
        boolean boolean34 = false; // flaky: nodeList25.retainAll((java.util.Collection<javafx.scene.Node>) nodeList27);
        boolean boolean35 = nodeList14.containsAll((java.util.Collection<javafx.scene.Node>) nodeList27);
        boolean boolean36 = false; // flaky: nodeList9.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList14);
        boolean boolean37 = false; // flaky: nodeList5.addAll((java.util.Collection<javafx.scene.Node>) nodeList9);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean43 = false; // flaky: nodeList41.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        int int52 = nodeList46.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable53 = null;
        Interface.WoodTotalValues woodTotalValues54 = null;
        Interface.AddWood addWood55 = null; // flaky: new Interface.AddWood(woodTable53, woodTotalValues54);
        java.util.ArrayList<javafx.scene.Node> nodeList56 = null; // flaky: addWood55.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList57 = null; // flaky: addWood55.getAll();
        javafx.scene.Node[] nodeArray58 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList59 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList59, nodeArray58);
        boolean boolean61 = nodeList59.isEmpty();
        int int63 = nodeList59.lastIndexOf((java.lang.Object) 100);
        int int65 = nodeList59.lastIndexOf((java.lang.Object) 10);
        boolean boolean66 = false; // flaky: nodeList57.retainAll((java.util.Collection<javafx.scene.Node>) nodeList59);
        boolean boolean67 = nodeList46.containsAll((java.util.Collection<javafx.scene.Node>) nodeList59);
        boolean boolean68 = false; // flaky: nodeList41.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList46);
        boolean boolean69 = false; // flaky: nodeList9.contains((java.lang.Object) nodeList41);
// flaky:         nodeList9.clear();
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList56);
// flaky:         org.junit.Assert.assertNotNull(nodeList57);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = nodeList23.remove(obj25);
        javafx.scene.Node node27 = null;
        boolean boolean28 = nodeList23.add(node27);
        boolean boolean29 = nodeList17.equals((java.lang.Object) boolean28);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node31 = nodeList17.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean22 = false; // flaky: nodeList15.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList21);
        int int24 = nodeList15.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        java.lang.Object obj28 = null;
        boolean boolean29 = nodeList26.remove(obj28);
        boolean boolean30 = nodeList26.isEmpty();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray34 = nodeList26.toArray(strArray33);
        boolean boolean35 = nodeList15.equals((java.lang.Object) strArray34);
        int int36 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) boolean35);
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean45 = false; // flaky: nodeList38.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList44);
        int int47 = nodeList38.indexOf((java.lang.Object) true);
        boolean boolean48 = false; // flaky: nodeList4.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        javafx.scene.Node[] nodeArray49 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList50 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList50, nodeArray49);
        java.lang.Object obj52 = null;
        boolean boolean53 = nodeList50.remove(obj52);
        javafx.scene.Node node54 = null;
        boolean boolean55 = nodeList50.add(node54);
        int int57 = nodeList50.indexOf((java.lang.Object) (short) 10);
        Interface.WoodTable woodTable58 = null;
        Interface.WoodTotalValues woodTotalValues59 = null;
        Interface.AddWood addWood60 = null; // flaky: new Interface.AddWood(woodTable58, woodTotalValues59);
        java.util.ArrayList<javafx.scene.Node> nodeList61 = null; // flaky: addWood60.getAll();
// flaky:         addWood60.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList65 = null; // flaky: addWood60.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList66 = null; // flaky: addWood60.getAll();
        javafx.scene.Node[] nodeArray67 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList68 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList68, nodeArray67);
        java.lang.Object obj70 = null;
        boolean boolean71 = nodeList68.remove(obj70);
        javafx.scene.Node node72 = null;
        boolean boolean73 = nodeList68.add(node72);
        java.util.ListIterator<javafx.scene.Node> nodeItor74 = nodeList68.listIterator();
        boolean boolean75 = false; // flaky: nodeList66.contains((java.lang.Object) nodeList68);
        java.util.ListIterator<javafx.scene.Node> nodeItor76 = nodeList68.listIterator();
        boolean boolean77 = nodeList50.remove((java.lang.Object) nodeList68);
        boolean boolean78 = false; // flaky: nodeList4.removeAll((java.util.Collection<javafx.scene.Node>) nodeList68);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList81 = null; // flaky: nodeList4.subList((int) (byte) 1, 0);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList61);
// flaky:         org.junit.Assert.assertNotNull(nodeList65);
// flaky:         org.junit.Assert.assertNotNull(nodeList66);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(nodeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(nodeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        int int19 = nodeList13.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood22.getAll();
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        boolean boolean28 = nodeList26.isEmpty();
        int int30 = nodeList26.lastIndexOf((java.lang.Object) 100);
        int int32 = nodeList26.lastIndexOf((java.lang.Object) 10);
        boolean boolean33 = false; // flaky: nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        boolean boolean34 = nodeList13.containsAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = false; // flaky: nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        int int45 = nodeList1.lastIndexOf((java.lang.Object) nodeList13);
        Interface.WoodTable woodTable46 = null;
        Interface.WoodTotalValues woodTotalValues47 = null; // flaky: new Interface.WoodTotalValues(woodTable46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: woodTotalValues47.getAll();
        int int49 = nodeList13.lastIndexOf((java.lang.Object) woodTotalValues47);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator50 = nodeList13.spliterator();
        Interface.WoodTable woodTable51 = null;
        Interface.WoodTable woodTable52 = null;
        Interface.WoodTotalValues woodTotalValues53 = null; // flaky: new Interface.WoodTotalValues(woodTable52);
// flaky:         woodTotalValues53.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList57 = null; // flaky: woodTotalValues53.getAll();
// flaky:         woodTotalValues53.redraw(10.0d, 1.0d);
        Interface.AddWood addWood61 = null; // flaky: new Interface.AddWood(woodTable51, woodTotalValues53);
// flaky:         woodTotalValues53.redraw((double) ' ', (double) (short) 1);
        boolean boolean65 = nodeList13.remove((java.lang.Object) woodTotalValues53);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator50);
// flaky:         org.junit.Assert.assertNotNull(nodeList57);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        boolean boolean6 = false; // flaky: nodeList3.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor7 = null; // flaky: nodeList3.iterator();
        javafx.scene.Node[] nodeArray8 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList9 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList9, nodeArray8);
        boolean boolean11 = nodeList9.isEmpty();
        boolean boolean12 = nodeList9.isEmpty();
        nodeList9.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor15 = nodeList9.listIterator(0);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean21 = false; // flaky: nodeList19.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node23 = null;
        javafx.scene.Node node24 = null; // flaky: nodeList19.set((int) (byte) 1, node23);
        javafx.css.Styleable[] styleableArray25 = new javafx.css.Styleable[] { node24 };
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean31 = false; // flaky: nodeList29.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node33 = null;
        javafx.scene.Node node34 = null; // flaky: nodeList29.set((int) (byte) 1, node33);
        javafx.css.Styleable[] styleableArray35 = new javafx.css.Styleable[] { node34 };
        javafx.css.Styleable[][] styleableArray36 = new javafx.css.Styleable[][] { styleableArray25, styleableArray35 };
        javafx.css.Styleable[][] styleableArray37 = nodeList9.toArray(styleableArray36);
        boolean boolean38 = false; // flaky: nodeList3.addAll((java.util.Collection<javafx.scene.Node>) nodeList9);
        Interface.WoodTable woodTable39 = null;
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null; // flaky: new Interface.WoodTotalValues(woodTable40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: woodTotalValues41.getAll();
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable39, woodTotalValues41);
        boolean boolean44 = nodeList9.equals((java.lang.Object) woodTotalValues41);
        java.lang.Object[] objArray45 = nodeList9.toArray();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeItor15);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(styleableArray25);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(styleableArray35);
        org.junit.Assert.assertNotNull(styleableArray36);
        org.junit.Assert.assertNotNull(styleableArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray7 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList8 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList8, nodeArray7);
        boolean boolean10 = nodeList8.isEmpty();
        int int12 = nodeList8.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable13 = null;
        Interface.WoodTotalValues woodTotalValues14 = null;
        Interface.AddWood addWood15 = null; // flaky: new Interface.AddWood(woodTable13, woodTotalValues14);
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood15.getAll();
        boolean boolean18 = false; // flaky: nodeList16.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node20 = null;
        javafx.scene.Node node21 = null; // flaky: nodeList16.set((int) (byte) 1, node20);
        boolean boolean22 = nodeList8.add(node21);
        javafx.scene.Node node23 = null; // flaky: nodeList5.set((int) (short) 0, node21);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = nodeList25.remove(obj27);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        java.lang.Object obj32 = null;
        boolean boolean33 = nodeList30.remove(obj32);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList35.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList41);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
// flaky:         nodeList35.add(1, node58);
        boolean boolean61 = nodeList30.retainAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        boolean boolean62 = nodeList25.retainAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        boolean boolean63 = false; // flaky: nodeList5.retainAll((java.util.Collection<javafx.scene.Node>) nodeList25);
        javafx.scene.Node[] nodeArray64 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList65 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList65, nodeArray64);
        java.lang.Object obj67 = null;
        boolean boolean68 = nodeList65.remove(obj67);
        javafx.scene.Node node69 = null;
        boolean boolean70 = nodeList65.add(node69);
        int int72 = nodeList65.indexOf((java.lang.Object) (short) 10);
        Interface.WoodTable woodTable73 = null;
        Interface.WoodTotalValues woodTotalValues74 = null;
        Interface.AddWood addWood75 = null; // flaky: new Interface.AddWood(woodTable73, woodTotalValues74);
        java.util.ArrayList<javafx.scene.Node> nodeList76 = null; // flaky: addWood75.getAll();
// flaky:         addWood75.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList80 = null; // flaky: addWood75.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList81 = null; // flaky: addWood75.getAll();
        javafx.scene.Node[] nodeArray82 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList83 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList83, nodeArray82);
        java.lang.Object obj85 = null;
        boolean boolean86 = nodeList83.remove(obj85);
        javafx.scene.Node node87 = null;
        boolean boolean88 = nodeList83.add(node87);
        java.util.ListIterator<javafx.scene.Node> nodeItor89 = nodeList83.listIterator();
        boolean boolean90 = false; // flaky: nodeList81.contains((java.lang.Object) nodeList83);
        java.util.ListIterator<javafx.scene.Node> nodeItor91 = nodeList83.listIterator();
        boolean boolean92 = nodeList65.remove((java.lang.Object) nodeList83);
        boolean boolean93 = nodeList25.containsAll((java.util.Collection<javafx.scene.Node>) nodeList83);
        java.util.stream.Stream<javafx.scene.Node> nodeStream94 = nodeList83.stream();
        java.util.stream.Stream<javafx.scene.Node> nodeStream95 = nodeList83.parallelStream();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList76);
// flaky:         org.junit.Assert.assertNotNull(nodeList80);
// flaky:         org.junit.Assert.assertNotNull(nodeList81);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(nodeItor89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(nodeItor91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(nodeStream94);
        org.junit.Assert.assertNotNull(nodeStream95);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable8 = null;
        Interface.WoodTotalValues woodTotalValues9 = null;
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable8, woodTotalValues9);
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood10.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood10.getAll();
        javafx.scene.Node[] nodeArray13 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList14 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList14, nodeArray13);
        boolean boolean16 = nodeList14.isEmpty();
        int int18 = nodeList14.lastIndexOf((java.lang.Object) 100);
        int int20 = nodeList14.lastIndexOf((java.lang.Object) 10);
        boolean boolean21 = false; // flaky: nodeList12.retainAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        boolean boolean23 = false; // flaky: nodeList12.contains((java.lang.Object) false);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean28 = false; // flaky: nodeList27.isEmpty();
        boolean boolean30 = false; // flaky: nodeList27.equals((java.lang.Object) 100);
        int int31 = 0; // flaky: nodeList12.lastIndexOf((java.lang.Object) nodeList27);
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        boolean boolean35 = nodeList33.isEmpty();
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood38.getAll();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        boolean boolean44 = nodeList42.isEmpty();
        int int46 = nodeList42.lastIndexOf((java.lang.Object) 100);
        int int48 = nodeList42.lastIndexOf((java.lang.Object) 10);
        boolean boolean49 = false; // flaky: nodeList40.retainAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        boolean boolean50 = false; // flaky: nodeList33.removeAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        javafx.scene.Node[] nodeArray51 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList52 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList52, nodeArray51);
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTotalValues woodTotalValues56 = null;
        Interface.AddWood addWood57 = null; // flaky: new Interface.AddWood(woodTable55, woodTotalValues56);
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood57.getAll();
        boolean boolean59 = false; // flaky: nodeList52.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList58);
        java.util.stream.Stream<javafx.scene.Node> nodeStream60 = null; // flaky: nodeList58.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator61 = null; // flaky: nodeList58.spliterator();
        int int62 = 0; // flaky: nodeList40.indexOf((java.lang.Object) nodeList58);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator63 = null; // flaky: nodeList40.spliterator();
        boolean boolean64 = false; // flaky: nodeList12.removeAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        boolean boolean65 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList68 = null; // flaky: nodeList40.subList((int) '4', 2);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream60);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        java.util.stream.Stream<javafx.scene.Node> nodeStream12 = nodeList1.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList15 = nodeList1.subList(2, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeStream12);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
        java.util.Iterator<javafx.scene.Node> nodeItor4 = null; // flaky: nodeList3.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor5 = null; // flaky: nodeList3.listIterator();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        boolean boolean9 = nodeList7.isEmpty();
        int int11 = nodeList7.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
        boolean boolean17 = false; // flaky: nodeList15.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node19 = null;
        javafx.scene.Node node20 = null; // flaky: nodeList15.set((int) (byte) 1, node19);
        boolean boolean21 = nodeList7.add(node20);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = nodeList23.remove(obj25);
        boolean boolean27 = nodeList7.retainAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        Interface.WoodTable woodTable32 = null;
        Interface.WoodTotalValues woodTotalValues33 = null;
        Interface.AddWood addWood34 = null; // flaky: new Interface.AddWood(woodTable32, woodTotalValues33);
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood34.getAll();
        boolean boolean36 = false; // flaky: nodeList29.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList35);
        java.util.stream.Stream<javafx.scene.Node> nodeStream37 = null; // flaky: nodeList35.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator38 = null; // flaky: nodeList35.spliterator();
        boolean boolean39 = false; // flaky: nodeList7.addAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        java.util.Iterator<javafx.scene.Node> nodeItor40 = null; // flaky: nodeList35.iterator();
        boolean boolean41 = false; // flaky: nodeList3.removeAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        java.lang.Object obj46 = null;
        boolean boolean47 = nodeList44.remove(obj46);
        javafx.scene.Node[] nodeArray48 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList49 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList49, nodeArray48);
        boolean boolean51 = nodeList49.isEmpty();
        int int53 = nodeList49.lastIndexOf((java.lang.Object) 100);
        boolean boolean54 = nodeList49.isEmpty();
        nodeList49.clear();
        boolean boolean56 = nodeList44.removeAll((java.util.Collection<javafx.scene.Node>) nodeList49);
        Interface.WoodTable woodTable57 = null;
        Interface.WoodTotalValues woodTotalValues58 = null;
        Interface.AddWood addWood59 = null; // flaky: new Interface.AddWood(woodTable57, woodTotalValues58);
        java.util.ArrayList<javafx.scene.Node> nodeList60 = null; // flaky: addWood59.getAll();
// flaky:         addWood59.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList64 = null; // flaky: addWood59.getAll();
        boolean boolean65 = false; // flaky: nodeList49.addAll((java.util.Collection<javafx.scene.Node>) nodeList64);
        javafx.scene.Node node67 = null; // flaky: nodeList49.remove((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node68 = null; // flaky: nodeList35.set((int) (byte) 10, node67);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeItor4);
// flaky:         org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream37);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator38);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList60);
// flaky:         org.junit.Assert.assertNotNull(nodeList64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertNotNull(node67);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        int int19 = nodeList13.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood22.getAll();
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        boolean boolean28 = nodeList26.isEmpty();
        int int30 = nodeList26.lastIndexOf((java.lang.Object) 100);
        int int32 = nodeList26.lastIndexOf((java.lang.Object) 10);
        boolean boolean33 = false; // flaky: nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        boolean boolean34 = nodeList13.containsAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = false; // flaky: nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        int int45 = nodeList1.lastIndexOf((java.lang.Object) nodeList13);
        Interface.WoodTable woodTable46 = null;
        Interface.WoodTotalValues woodTotalValues47 = null; // flaky: new Interface.WoodTotalValues(woodTable46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: woodTotalValues47.getAll();
        int int49 = nodeList13.lastIndexOf((java.lang.Object) woodTotalValues47);
        java.lang.Class<?> wildcardClass50 = null; // flaky: woodTotalValues47.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        int int9 = 0; // flaky: nodeList8.size();
        Interface.WoodTable woodTable11 = null;
        Interface.WoodTotalValues woodTotalValues12 = null;
        Interface.AddWood addWood13 = null; // flaky: new Interface.AddWood(woodTable11, woodTotalValues12);
        java.util.ArrayList<javafx.scene.Node> nodeList14 = null; // flaky: addWood13.getAll();
        boolean boolean15 = false; // flaky: nodeList14.isEmpty();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList35.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList41);
        int int44 = nodeList35.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        boolean boolean49 = nodeList47.isEmpty();
        int int51 = nodeList47.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable52 = null;
        Interface.WoodTotalValues woodTotalValues53 = null;
        Interface.AddWood addWood54 = null; // flaky: new Interface.AddWood(woodTable52, woodTotalValues53);
        java.util.ArrayList<javafx.scene.Node> nodeList55 = null; // flaky: addWood54.getAll();
        boolean boolean57 = false; // flaky: nodeList55.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node59 = null;
        javafx.scene.Node node60 = null; // flaky: nodeList55.set((int) (byte) 1, node59);
        boolean boolean61 = nodeList47.add(node60);
        javafx.scene.Node node62 = null; // flaky: nodeList35.set((int) (short) 0, node60);
        javafx.scene.Node node63 = nodeList18.set((int) (byte) 0, node60);
// flaky:         nodeList14.add((int) (short) 0, node63);
        boolean boolean65 = false; // flaky: nodeList8.addAll((int) (byte) 0, (java.util.Collection<javafx.scene.Node>) nodeList14);
        java.util.stream.Stream<javafx.scene.Node> nodeStream66 = null; // flaky: nodeList8.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList69 = null; // flaky: nodeList8.subList(0, (int) (byte) -1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(0) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
// flaky:         org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertNotNull(node62);
// flaky:         org.junit.Assert.assertNotNull(node63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream66);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList13.isEmpty();
        Interface.WoodTable woodTable15 = null;
        Interface.WoodTotalValues woodTotalValues16 = null;
        Interface.AddWood addWood17 = null; // flaky: new Interface.AddWood(woodTable15, woodTotalValues16);
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood17.getAll();
        boolean boolean19 = false; // flaky: nodeList18.isEmpty();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        Interface.WoodTable woodTable25 = null;
        Interface.WoodTotalValues woodTotalValues26 = null;
        Interface.AddWood addWood27 = null; // flaky: new Interface.AddWood(woodTable25, woodTotalValues26);
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood27.getAll();
        boolean boolean29 = false; // flaky: nodeList22.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList28);
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        boolean boolean34 = nodeList32.isEmpty();
        int int36 = nodeList32.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        boolean boolean42 = false; // flaky: nodeList40.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node44 = null;
        javafx.scene.Node node45 = null; // flaky: nodeList40.set((int) (byte) 1, node44);
        boolean boolean46 = nodeList32.add(node45);
// flaky:         nodeList22.add(1, node45);
        javafx.scene.Node node48 = null; // flaky: nodeList18.set(0, node45);
        boolean boolean49 = false; // flaky: nodeList13.add(node48);
        javafx.scene.Node node50 = null; // flaky: nodeList8.set((int) (short) 1, node48);
        javafx.scene.Node[] nodeArray51 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList52 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList52, nodeArray51);
        java.lang.Object obj54 = null;
        boolean boolean55 = nodeList52.remove(obj54);
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        boolean boolean59 = nodeList57.isEmpty();
        int int61 = nodeList57.lastIndexOf((java.lang.Object) 100);
        boolean boolean62 = nodeList57.isEmpty();
        nodeList57.clear();
        boolean boolean64 = nodeList52.removeAll((java.util.Collection<javafx.scene.Node>) nodeList57);
        Interface.WoodTable woodTable65 = null;
        Interface.WoodTotalValues woodTotalValues66 = null;
        Interface.AddWood addWood67 = null; // flaky: new Interface.AddWood(woodTable65, woodTotalValues66);
        java.util.ArrayList<javafx.scene.Node> nodeList68 = null; // flaky: addWood67.getAll();
// flaky:         addWood67.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList72 = null; // flaky: addWood67.getAll();
        boolean boolean73 = false; // flaky: nodeList57.addAll((java.util.Collection<javafx.scene.Node>) nodeList72);
        javafx.scene.Node node75 = null; // flaky: nodeList57.remove((int) (short) 1);
        boolean boolean76 = false; // flaky: nodeList8.add(node75);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertNotNull(node48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList68);
// flaky:         org.junit.Assert.assertNotNull(nodeList72);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertNotNull(node75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        boolean boolean6 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray7 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList8 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList8, nodeArray7);
        boolean boolean10 = nodeList8.isEmpty();
        int int12 = nodeList8.lastIndexOf((java.lang.Object) 100);
        boolean boolean13 = nodeList8.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream14 = nodeList8.stream();
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        java.lang.Object obj24 = null;
        boolean boolean25 = nodeList22.remove(obj24);
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean34 = false; // flaky: nodeList27.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList33);
        javafx.scene.Node[] nodeArray36 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList37 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList37, nodeArray36);
        boolean boolean39 = nodeList37.isEmpty();
        int int41 = nodeList37.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable42 = null;
        Interface.WoodTotalValues woodTotalValues43 = null;
        Interface.AddWood addWood44 = null; // flaky: new Interface.AddWood(woodTable42, woodTotalValues43);
        java.util.ArrayList<javafx.scene.Node> nodeList45 = null; // flaky: addWood44.getAll();
        boolean boolean47 = false; // flaky: nodeList45.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node49 = null;
        javafx.scene.Node node50 = null; // flaky: nodeList45.set((int) (byte) 1, node49);
        boolean boolean51 = nodeList37.add(node50);
// flaky:         nodeList27.add(1, node50);
        boolean boolean53 = nodeList22.retainAll((java.util.Collection<javafx.scene.Node>) nodeList27);
        boolean boolean54 = nodeList17.retainAll((java.util.Collection<javafx.scene.Node>) nodeList27);
        boolean boolean55 = nodeList8.addAll((int) (short) 0, (java.util.Collection<javafx.scene.Node>) nodeList27);
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        boolean boolean59 = nodeList57.isEmpty();
        int int61 = nodeList57.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable62 = null;
        Interface.WoodTotalValues woodTotalValues63 = null;
        Interface.AddWood addWood64 = null; // flaky: new Interface.AddWood(woodTable62, woodTotalValues63);
        java.util.ArrayList<javafx.scene.Node> nodeList65 = null; // flaky: addWood64.getAll();
        boolean boolean67 = false; // flaky: nodeList65.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node69 = null;
        javafx.scene.Node node70 = null; // flaky: nodeList65.set((int) (byte) 1, node69);
        boolean boolean71 = nodeList57.add(node70);
        javafx.scene.Node[] nodeArray72 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList73 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList73, nodeArray72);
        java.lang.Object obj75 = null;
        boolean boolean76 = nodeList73.remove(obj75);
        boolean boolean77 = nodeList57.retainAll((java.util.Collection<javafx.scene.Node>) nodeList73);
        javafx.scene.Node[] nodeArray78 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList79 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList79, nodeArray78);
        Interface.WoodTable woodTable82 = null;
        Interface.WoodTotalValues woodTotalValues83 = null;
        Interface.AddWood addWood84 = null; // flaky: new Interface.AddWood(woodTable82, woodTotalValues83);
        java.util.ArrayList<javafx.scene.Node> nodeList85 = null; // flaky: addWood84.getAll();
        boolean boolean86 = false; // flaky: nodeList79.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList85);
        java.util.stream.Stream<javafx.scene.Node> nodeStream87 = null; // flaky: nodeList85.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator88 = null; // flaky: nodeList85.spliterator();
        boolean boolean89 = false; // flaky: nodeList57.addAll((java.util.Collection<javafx.scene.Node>) nodeList85);
        java.util.Iterator<javafx.scene.Node> nodeItor90 = null; // flaky: nodeList85.iterator();
        javafx.scene.Node node92 = null; // flaky: nodeList85.remove(1);
        boolean boolean93 = nodeList8.add(node92);
        int int94 = nodeList1.lastIndexOf((java.lang.Object) nodeList8);
        java.util.Iterator<javafx.scene.Node> nodeItor95 = nodeList1.iterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeStream14);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList85);
// flaky:         org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream87);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator88);
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor90);
// flaky:         org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(nodeItor95);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
        java.util.Iterator<javafx.scene.Node> nodeItor4 = null; // flaky: nodeList3.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor5 = null; // flaky: nodeList3.listIterator();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = nodeList7.remove(obj9);
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        boolean boolean14 = nodeList12.isEmpty();
        int int16 = nodeList12.lastIndexOf((java.lang.Object) 100);
        boolean boolean17 = nodeList7.equals((java.lang.Object) nodeList12);
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean29 = false; // flaky: nodeList27.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node31 = null;
        javafx.scene.Node node32 = null; // flaky: nodeList27.set((int) (byte) 1, node31);
        boolean boolean33 = nodeList19.add(node32);
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood36.getAll();
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        int int44 = nodeList40.lastIndexOf((java.lang.Object) 100);
        int int46 = nodeList40.lastIndexOf((java.lang.Object) 10);
        boolean boolean47 = false; // flaky: nodeList38.retainAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        boolean boolean48 = nodeList19.removeAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        javafx.scene.Node[] nodeArray49 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList50 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList50, nodeArray49);
        boolean boolean52 = nodeList50.isEmpty();
        int int54 = nodeList50.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTotalValues woodTotalValues56 = null;
        Interface.AddWood addWood57 = null; // flaky: new Interface.AddWood(woodTable55, woodTotalValues56);
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood57.getAll();
        boolean boolean60 = false; // flaky: nodeList58.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node62 = null;
        javafx.scene.Node node63 = null; // flaky: nodeList58.set((int) (byte) 1, node62);
        boolean boolean64 = nodeList50.add(node63);
        javafx.scene.Node[] nodeArray65 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList66 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList66, nodeArray65);
        java.lang.Object obj68 = null;
        boolean boolean69 = nodeList66.remove(obj68);
        boolean boolean70 = nodeList50.retainAll((java.util.Collection<javafx.scene.Node>) nodeList66);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator71 = nodeList66.spliterator();
        boolean boolean72 = nodeList40.remove((java.lang.Object) nodeSpliterator71);
        int int73 = nodeList7.lastIndexOf((java.lang.Object) nodeSpliterator71);
        nodeList7.clear();
        boolean boolean75 = false; // flaky: nodeList3.contains((java.lang.Object) nodeList7);
        boolean boolean76 = false; // flaky: nodeList3.isEmpty();
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeItor4);
// flaky:         org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        boolean boolean34 = nodeList32.isEmpty();
        int int36 = nodeList32.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        boolean boolean42 = false; // flaky: nodeList40.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node44 = null;
        javafx.scene.Node node45 = null; // flaky: nodeList40.set((int) (byte) 1, node44);
        boolean boolean46 = nodeList32.add(node45);
        javafx.scene.Node[] nodeArray47 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList48 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList48, nodeArray47);
        java.lang.Object obj50 = null;
        boolean boolean51 = nodeList48.remove(obj50);
        boolean boolean52 = nodeList32.retainAll((java.util.Collection<javafx.scene.Node>) nodeList48);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator53 = nodeList48.spliterator();
        boolean boolean54 = nodeList22.remove((java.lang.Object) nodeSpliterator53);
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTable woodTable56 = null;
        Interface.WoodTable woodTable57 = null;
        Interface.WoodTotalValues woodTotalValues58 = null; // flaky: new Interface.WoodTotalValues(woodTable57);
        Interface.AddWood addWood59 = null; // flaky: new Interface.AddWood(woodTable56, woodTotalValues58);
// flaky:         woodTotalValues58.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood63 = null; // flaky: new Interface.AddWood(woodTable55, woodTotalValues58);
        java.util.ArrayList<javafx.scene.Node> nodeList64 = null; // flaky: addWood63.getAll();
        int int65 = nodeList22.indexOf((java.lang.Object) addWood63);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        boolean boolean4 = nodeList1.isEmpty();
        nodeList1.clear();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = nodeList7.remove(obj9);
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        boolean boolean14 = nodeList12.isEmpty();
        int int16 = nodeList12.lastIndexOf((java.lang.Object) 100);
        boolean boolean17 = nodeList12.isEmpty();
        nodeList12.clear();
        boolean boolean19 = nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
// flaky:         addWood22.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood22.getAll();
        boolean boolean28 = false; // flaky: nodeList12.addAll((java.util.Collection<javafx.scene.Node>) nodeList27);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = nodeList30.add(node43);
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        java.lang.Object obj48 = null;
        boolean boolean49 = nodeList46.remove(obj48);
        boolean boolean50 = nodeList30.retainAll((java.util.Collection<javafx.scene.Node>) nodeList46);
        boolean boolean51 = nodeList30.isEmpty();
        boolean boolean52 = nodeList12.retainAll((java.util.Collection<javafx.scene.Node>) nodeList30);
        boolean boolean53 = nodeList1.equals((java.lang.Object) boolean52);
        java.lang.Object[] objArray54 = nodeList1.toArray();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        int int10 = nodeList1.indexOf((java.lang.Object) true);
        javafx.scene.Node node12 = null; // flaky: nodeList1.get((int) (byte) 0);
        Interface.WoodTable woodTable13 = null;
        Interface.WoodTotalValues woodTotalValues14 = null;
        Interface.AddWood addWood15 = null; // flaky: new Interface.AddWood(woodTable13, woodTotalValues14);
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood15.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood15.getAll();
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        int int25 = nodeList19.lastIndexOf((java.lang.Object) 10);
        boolean boolean26 = false; // flaky: nodeList17.retainAll((java.util.Collection<javafx.scene.Node>) nodeList19);
        javafx.scene.Node[] nodeArray27 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList28 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList28, nodeArray27);
        boolean boolean30 = nodeList28.isEmpty();
        int int32 = nodeList28.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable33 = null;
        Interface.WoodTotalValues woodTotalValues34 = null;
        Interface.AddWood addWood35 = null; // flaky: new Interface.AddWood(woodTable33, woodTotalValues34);
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood35.getAll();
        boolean boolean38 = false; // flaky: nodeList36.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node40 = null;
        javafx.scene.Node node41 = null; // flaky: nodeList36.set((int) (byte) 1, node40);
        boolean boolean42 = nodeList28.add(node41);
        java.util.stream.Stream<javafx.scene.Node> nodeStream43 = nodeList28.stream();
        boolean boolean44 = nodeList19.equals((java.lang.Object) nodeStream43);
        boolean boolean45 = nodeList19.isEmpty();
        boolean boolean46 = nodeList1.remove((java.lang.Object) nodeList19);
        java.util.Iterator<javafx.scene.Node> nodeItor47 = nodeList1.iterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
// flaky:         org.junit.Assert.assertNotNull(node12);
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(nodeStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeItor47);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.ListIterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList8.listIterator();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        Interface.WoodTable woodTable25 = null;
        Interface.WoodTotalValues woodTotalValues26 = null;
        Interface.AddWood addWood27 = null; // flaky: new Interface.AddWood(woodTable25, woodTotalValues26);
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood27.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood27.getAll();
        javafx.scene.Node[] nodeArray30 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList31 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList31, nodeArray30);
        boolean boolean33 = nodeList31.isEmpty();
        int int35 = nodeList31.lastIndexOf((java.lang.Object) 100);
        int int37 = nodeList31.lastIndexOf((java.lang.Object) 10);
        boolean boolean38 = false; // flaky: nodeList29.retainAll((java.util.Collection<javafx.scene.Node>) nodeList31);
        boolean boolean39 = false; // flaky: nodeList22.removeAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        boolean boolean40 = false; // flaky: nodeList29.isEmpty();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = nodeList42.remove(obj44);
        boolean boolean46 = nodeList42.isEmpty();
        javafx.scene.Node[] nodeArray47 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList48 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList48, nodeArray47);
        Interface.WoodTable woodTable51 = null;
        Interface.WoodTotalValues woodTotalValues52 = null;
        Interface.AddWood addWood53 = null; // flaky: new Interface.AddWood(woodTable51, woodTotalValues52);
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood53.getAll();
        boolean boolean55 = false; // flaky: nodeList48.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList54);
        int int57 = nodeList48.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray59 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList60 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList60, nodeArray59);
        boolean boolean62 = nodeList60.isEmpty();
        int int64 = nodeList60.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable65 = null;
        Interface.WoodTotalValues woodTotalValues66 = null;
        Interface.AddWood addWood67 = null; // flaky: new Interface.AddWood(woodTable65, woodTotalValues66);
        java.util.ArrayList<javafx.scene.Node> nodeList68 = null; // flaky: addWood67.getAll();
        boolean boolean70 = false; // flaky: nodeList68.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node72 = null;
        javafx.scene.Node node73 = null; // flaky: nodeList68.set((int) (byte) 1, node72);
        boolean boolean74 = nodeList60.add(node73);
        javafx.scene.Node node75 = null; // flaky: nodeList48.set((int) (short) 0, node73);
        boolean boolean76 = nodeList42.add(node75);
        boolean boolean78 = nodeList42.remove((java.lang.Object) 100L);
        int int79 = 0; // flaky: nodeList29.lastIndexOf((java.lang.Object) nodeList42);
        boolean boolean80 = false; // flaky: nodeList8.addAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator81 = nodeList42.spliterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
// flaky:         org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator81);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList8.iterator();
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood23.getAll();
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        boolean boolean29 = nodeList27.isEmpty();
        int int31 = nodeList27.lastIndexOf((java.lang.Object) 100);
        int int33 = nodeList27.lastIndexOf((java.lang.Object) 10);
        boolean boolean34 = false; // flaky: nodeList25.retainAll((java.util.Collection<javafx.scene.Node>) nodeList27);
        javafx.scene.Node[] nodeArray35 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList36 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList36, nodeArray35);
        boolean boolean38 = nodeList36.isEmpty();
        int int40 = nodeList36.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean46 = false; // flaky: nodeList44.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node48 = null;
        javafx.scene.Node node49 = null; // flaky: nodeList44.set((int) (byte) 1, node48);
        boolean boolean50 = nodeList36.add(node49);
        java.util.stream.Stream<javafx.scene.Node> nodeStream51 = nodeList36.stream();
        boolean boolean52 = nodeList27.equals((java.lang.Object) nodeStream51);
        int int53 = 0; // flaky: nodeList8.indexOf((java.lang.Object) nodeStream51);
        java.util.ListIterator<javafx.scene.Node> nodeItor54 = null; // flaky: nodeList8.listIterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeStream51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeItor54);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        java.util.stream.Stream<javafx.scene.Node> nodeStream16 = nodeList1.stream();
        javafx.scene.Node node17 = null;
        boolean boolean18 = nodeList1.add(node17);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        javafx.scene.Node node25 = null;
        boolean boolean26 = nodeList21.add(node25);
        java.util.ListIterator<javafx.scene.Node> nodeItor27 = nodeList21.listIterator();
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood30.getAll();
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        boolean boolean36 = nodeList34.isEmpty();
        int int38 = nodeList34.lastIndexOf((java.lang.Object) 100);
        int int40 = nodeList34.lastIndexOf((java.lang.Object) 10);
        boolean boolean41 = false; // flaky: nodeList32.retainAll((java.util.Collection<javafx.scene.Node>) nodeList34);
        boolean boolean43 = false; // flaky: nodeList32.contains((java.lang.Object) false);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTotalValues woodTotalValues45 = null;
        Interface.AddWood addWood46 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood46.getAll();
        boolean boolean48 = false; // flaky: nodeList47.isEmpty();
        boolean boolean50 = false; // flaky: nodeList47.equals((java.lang.Object) 100);
        int int51 = 0; // flaky: nodeList32.lastIndexOf((java.lang.Object) nodeList47);
        javafx.scene.Node[] nodeArray52 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList53 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList53, nodeArray52);
        java.lang.Object obj55 = null;
        boolean boolean56 = nodeList53.remove(obj55);
        javafx.scene.Node[] nodeArray57 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList58 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList58, nodeArray57);
        boolean boolean60 = nodeList58.isEmpty();
        int int62 = nodeList58.lastIndexOf((java.lang.Object) 100);
        boolean boolean63 = nodeList53.equals((java.lang.Object) nodeList58);
        Interface.WoodTable woodTable64 = null;
        Interface.WoodTotalValues woodTotalValues65 = null;
        Interface.AddWood addWood66 = null; // flaky: new Interface.AddWood(woodTable64, woodTotalValues65);
        java.util.ArrayList<javafx.scene.Node> nodeList67 = null; // flaky: addWood66.getAll();
// flaky:         addWood66.redraw((double) 10.0f, (double) 0L);
        boolean boolean71 = nodeList53.contains((java.lang.Object) 10.0f);
        boolean boolean72 = false; // flaky: nodeList47.contains((java.lang.Object) 10.0f);
        boolean boolean73 = false; // flaky: nodeList21.removeAll((java.util.Collection<javafx.scene.Node>) nodeList47);
        Interface.WoodTable woodTable74 = null;
        Interface.WoodTotalValues woodTotalValues75 = null;
        Interface.AddWood addWood76 = null; // flaky: new Interface.AddWood(woodTable74, woodTotalValues75);
        java.util.ArrayList<javafx.scene.Node> nodeList77 = null; // flaky: addWood76.getAll();
        boolean boolean78 = false; // flaky: nodeList77.isEmpty();
        boolean boolean80 = false; // flaky: nodeList77.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor81 = null; // flaky: nodeList77.iterator();
        boolean boolean82 = false; // flaky: nodeList47.equals((java.lang.Object) nodeList77);
        javafx.scene.Node[] nodeArray84 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList85 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList85, nodeArray84);
        Interface.WoodTable woodTable88 = null;
        Interface.WoodTotalValues woodTotalValues89 = null;
        Interface.AddWood addWood90 = null; // flaky: new Interface.AddWood(woodTable88, woodTotalValues89);
        java.util.ArrayList<javafx.scene.Node> nodeList91 = null; // flaky: addWood90.getAll();
        boolean boolean92 = false; // flaky: nodeList85.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList91);
        int int94 = nodeList85.indexOf((java.lang.Object) true);
        javafx.scene.Node node96 = null; // flaky: nodeList85.get((int) (byte) 0);
        javafx.scene.Node node97 = null; // flaky: nodeList47.set((int) (short) 0, node96);
        javafx.scene.Node node98 = nodeList1.set((int) (byte) 1, node97);
        int int99 = nodeList1.size();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeStream16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeItor27);
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList91);
// flaky:         org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
// flaky:         org.junit.Assert.assertNotNull(node96);
// flaky:         org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertNull(node98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 2 + "'", int99 == 2);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.ListIterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList8.listIterator();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        Interface.WoodTable woodTable25 = null;
        Interface.WoodTotalValues woodTotalValues26 = null;
        Interface.AddWood addWood27 = null; // flaky: new Interface.AddWood(woodTable25, woodTotalValues26);
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood27.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood27.getAll();
        javafx.scene.Node[] nodeArray30 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList31 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList31, nodeArray30);
        boolean boolean33 = nodeList31.isEmpty();
        int int35 = nodeList31.lastIndexOf((java.lang.Object) 100);
        int int37 = nodeList31.lastIndexOf((java.lang.Object) 10);
        boolean boolean38 = false; // flaky: nodeList29.retainAll((java.util.Collection<javafx.scene.Node>) nodeList31);
        boolean boolean39 = false; // flaky: nodeList22.removeAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        boolean boolean40 = false; // flaky: nodeList29.isEmpty();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = nodeList42.remove(obj44);
        boolean boolean46 = nodeList42.isEmpty();
        javafx.scene.Node[] nodeArray47 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList48 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList48, nodeArray47);
        Interface.WoodTable woodTable51 = null;
        Interface.WoodTotalValues woodTotalValues52 = null;
        Interface.AddWood addWood53 = null; // flaky: new Interface.AddWood(woodTable51, woodTotalValues52);
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood53.getAll();
        boolean boolean55 = false; // flaky: nodeList48.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList54);
        int int57 = nodeList48.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray59 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList60 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList60, nodeArray59);
        boolean boolean62 = nodeList60.isEmpty();
        int int64 = nodeList60.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable65 = null;
        Interface.WoodTotalValues woodTotalValues66 = null;
        Interface.AddWood addWood67 = null; // flaky: new Interface.AddWood(woodTable65, woodTotalValues66);
        java.util.ArrayList<javafx.scene.Node> nodeList68 = null; // flaky: addWood67.getAll();
        boolean boolean70 = false; // flaky: nodeList68.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node72 = null;
        javafx.scene.Node node73 = null; // flaky: nodeList68.set((int) (byte) 1, node72);
        boolean boolean74 = nodeList60.add(node73);
        javafx.scene.Node node75 = null; // flaky: nodeList48.set((int) (short) 0, node73);
        boolean boolean76 = nodeList42.add(node75);
        boolean boolean78 = nodeList42.remove((java.lang.Object) 100L);
        int int79 = 0; // flaky: nodeList29.lastIndexOf((java.lang.Object) nodeList42);
        boolean boolean80 = false; // flaky: nodeList8.addAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator81 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList42.replaceAll(nodeUnaryOperator81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
// flaky:         org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean22 = false; // flaky: nodeList15.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList21);
        int int24 = nodeList15.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        java.lang.Object obj28 = null;
        boolean boolean29 = nodeList26.remove(obj28);
        boolean boolean30 = nodeList26.isEmpty();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray34 = nodeList26.toArray(strArray33);
        boolean boolean35 = nodeList15.equals((java.lang.Object) strArray34);
        int int36 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) boolean35);
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean45 = false; // flaky: nodeList38.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList44);
        int int47 = nodeList38.indexOf((java.lang.Object) true);
        boolean boolean48 = false; // flaky: nodeList4.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        javafx.scene.Node[] nodeArray49 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList50 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList50, nodeArray49);
        boolean boolean52 = nodeList50.isEmpty();
        int int54 = nodeList50.lastIndexOf((java.lang.Object) 100);
        int int56 = nodeList50.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor57 = nodeList50.listIterator();
        int int58 = nodeList50.size();
        boolean boolean59 = nodeList50.isEmpty();
        boolean boolean60 = false; // flaky: nodeList4.removeAll((java.util.Collection<javafx.scene.Node>) nodeList50);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator61 = null; // flaky: nodeList4.spliterator();
        Interface.WoodTable woodTable62 = null;
        Interface.WoodTotalValues woodTotalValues63 = null;
        Interface.AddWood addWood64 = null; // flaky: new Interface.AddWood(woodTable62, woodTotalValues63);
        java.util.ArrayList<javafx.scene.Node> nodeList65 = null; // flaky: addWood64.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList66 = null; // flaky: addWood64.getAll();
        int int67 = 0; // flaky: nodeList66.size();
        java.util.stream.Stream<javafx.scene.Node> nodeStream68 = null; // flaky: nodeList66.parallelStream();
        boolean boolean69 = false; // flaky: nodeList4.remove((java.lang.Object) nodeStream68);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(nodeItor57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator61);
// flaky:         org.junit.Assert.assertNotNull(nodeList65);
// flaky:         org.junit.Assert.assertNotNull(nodeList66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
// flaky:         org.junit.Assert.assertNotNull(nodeStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = nodeList25.remove(obj27);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        boolean boolean35 = nodeList25.equals((java.lang.Object) nodeList30);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood38.getAll();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        boolean boolean44 = nodeList42.isEmpty();
        int int46 = nodeList42.lastIndexOf((java.lang.Object) 100);
        int int48 = nodeList42.lastIndexOf((java.lang.Object) 10);
        boolean boolean49 = false; // flaky: nodeList40.retainAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        javafx.scene.Node[] nodeArray50 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList51 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList51, nodeArray50);
        java.lang.Object obj53 = null;
        boolean boolean54 = nodeList51.remove(obj53);
        boolean boolean55 = nodeList51.isEmpty();
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        Interface.WoodTable woodTable60 = null;
        Interface.WoodTotalValues woodTotalValues61 = null;
        Interface.AddWood addWood62 = null; // flaky: new Interface.AddWood(woodTable60, woodTotalValues61);
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: addWood62.getAll();
        boolean boolean64 = false; // flaky: nodeList57.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList63);
        int int66 = nodeList57.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray68 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList69 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList69, nodeArray68);
        boolean boolean71 = nodeList69.isEmpty();
        int int73 = nodeList69.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable74 = null;
        Interface.WoodTotalValues woodTotalValues75 = null;
        Interface.AddWood addWood76 = null; // flaky: new Interface.AddWood(woodTable74, woodTotalValues75);
        java.util.ArrayList<javafx.scene.Node> nodeList77 = null; // flaky: addWood76.getAll();
        boolean boolean79 = false; // flaky: nodeList77.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node81 = null;
        javafx.scene.Node node82 = null; // flaky: nodeList77.set((int) (byte) 1, node81);
        boolean boolean83 = nodeList69.add(node82);
        javafx.scene.Node node84 = null; // flaky: nodeList57.set((int) (short) 0, node82);
        boolean boolean85 = nodeList51.add(node84);
        boolean boolean87 = nodeList51.remove((java.lang.Object) 100L);
        boolean boolean88 = nodeList42.remove((java.lang.Object) boolean87);
        boolean boolean89 = nodeList25.addAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        boolean boolean90 = false; // flaky: nodeList4.equals((java.lang.Object) nodeList42);
        boolean boolean91 = nodeList42.isEmpty();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
// flaky:         org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        int int28 = nodeList24.lastIndexOf((java.lang.Object) 100);
        int int30 = nodeList24.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood33.getAll();
        javafx.scene.Node[] nodeArray36 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList37 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList37, nodeArray36);
        boolean boolean39 = nodeList37.isEmpty();
        int int41 = nodeList37.lastIndexOf((java.lang.Object) 100);
        int int43 = nodeList37.lastIndexOf((java.lang.Object) 10);
        boolean boolean44 = false; // flaky: nodeList35.retainAll((java.util.Collection<javafx.scene.Node>) nodeList37);
        boolean boolean45 = nodeList24.containsAll((java.util.Collection<javafx.scene.Node>) nodeList37);
        java.util.ListIterator<javafx.scene.Node> nodeItor47 = nodeList24.listIterator(0);
        java.util.Iterator<javafx.scene.Node> nodeItor48 = nodeList24.iterator();
        int int49 = 0; // flaky: nodeList21.lastIndexOf((java.lang.Object) nodeItor48);
        boolean boolean50 = false; // flaky: nodeList21.isEmpty();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(nodeItor47);
        org.junit.Assert.assertNotNull(nodeItor48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        javafx.scene.Node[] nodeArray19 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList20 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList20, nodeArray19);
        boolean boolean22 = nodeList20.isEmpty();
        int int24 = nodeList20.lastIndexOf((java.lang.Object) 100);
        int int26 = nodeList20.lastIndexOf((java.lang.Object) 10);
        boolean boolean27 = false; // flaky: nodeList18.retainAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        boolean boolean31 = nodeList29.isEmpty();
        int int33 = nodeList29.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
        boolean boolean39 = false; // flaky: nodeList37.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node41 = null;
        javafx.scene.Node node42 = null; // flaky: nodeList37.set((int) (byte) 1, node41);
        boolean boolean43 = nodeList29.add(node42);
        java.util.stream.Stream<javafx.scene.Node> nodeStream44 = nodeList29.stream();
        boolean boolean45 = nodeList20.equals((java.lang.Object) nodeStream44);
        boolean boolean46 = nodeList20.isEmpty();
        boolean boolean47 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        java.util.ListIterator<javafx.scene.Node> nodeItor48 = nodeList1.listIterator();
        java.lang.Object[] objArray49 = nodeList1.toArray();
        java.lang.Class<?> wildcardClass50 = objArray49.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeItor48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
// flaky:         woodTotalValues1.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw(10.0d, 1.0d);
// flaky:         woodTotalValues1.redraw((double) 10, (double) 10);
// flaky:         woodTotalValues1.redraw((double) (short) -1, (double) 100.0f);
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        java.lang.Object obj12 = null;
        boolean boolean13 = nodeList10.remove(obj12);
        javafx.scene.Node node14 = null;
        boolean boolean15 = nodeList10.add(node14);
        java.util.ListIterator<javafx.scene.Node> nodeItor16 = nodeList10.listIterator();
        boolean boolean17 = false; // flaky: nodeList8.contains((java.lang.Object) nodeList10);
        java.util.ListIterator<javafx.scene.Node> nodeItor18 = nodeList10.listIterator();
        java.util.Iterator<javafx.scene.Node> nodeItor19 = nodeList10.iterator();
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null; // flaky: new Interface.WoodTotalValues(woodTable20);
        java.util.ArrayList<javafx.scene.Node> nodeList22 = null; // flaky: woodTotalValues21.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: woodTotalValues21.getAll();
        java.util.Iterator<javafx.scene.Node> nodeItor24 = null; // flaky: nodeList23.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor25 = null; // flaky: nodeList23.listIterator();
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = nodeList27.remove(obj29);
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        boolean boolean34 = nodeList32.isEmpty();
        int int36 = nodeList32.lastIndexOf((java.lang.Object) 100);
        boolean boolean37 = nodeList27.equals((java.lang.Object) nodeList32);
        javafx.scene.Node[] nodeArray38 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList39 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList39, nodeArray38);
        boolean boolean41 = nodeList39.isEmpty();
        int int43 = nodeList39.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTotalValues woodTotalValues45 = null;
        Interface.AddWood addWood46 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood46.getAll();
        boolean boolean49 = false; // flaky: nodeList47.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node51 = null;
        javafx.scene.Node node52 = null; // flaky: nodeList47.set((int) (byte) 1, node51);
        boolean boolean53 = nodeList39.add(node52);
        Interface.WoodTable woodTable54 = null;
        Interface.WoodTotalValues woodTotalValues55 = null;
        Interface.AddWood addWood56 = null; // flaky: new Interface.AddWood(woodTable54, woodTotalValues55);
        java.util.ArrayList<javafx.scene.Node> nodeList57 = null; // flaky: addWood56.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood56.getAll();
        javafx.scene.Node[] nodeArray59 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList60 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList60, nodeArray59);
        boolean boolean62 = nodeList60.isEmpty();
        int int64 = nodeList60.lastIndexOf((java.lang.Object) 100);
        int int66 = nodeList60.lastIndexOf((java.lang.Object) 10);
        boolean boolean67 = false; // flaky: nodeList58.retainAll((java.util.Collection<javafx.scene.Node>) nodeList60);
        boolean boolean68 = nodeList39.removeAll((java.util.Collection<javafx.scene.Node>) nodeList60);
        javafx.scene.Node[] nodeArray69 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList70 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList70, nodeArray69);
        boolean boolean72 = nodeList70.isEmpty();
        int int74 = nodeList70.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable75 = null;
        Interface.WoodTotalValues woodTotalValues76 = null;
        Interface.AddWood addWood77 = null; // flaky: new Interface.AddWood(woodTable75, woodTotalValues76);
        java.util.ArrayList<javafx.scene.Node> nodeList78 = null; // flaky: addWood77.getAll();
        boolean boolean80 = false; // flaky: nodeList78.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node82 = null;
        javafx.scene.Node node83 = null; // flaky: nodeList78.set((int) (byte) 1, node82);
        boolean boolean84 = nodeList70.add(node83);
        javafx.scene.Node[] nodeArray85 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList86 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList86, nodeArray85);
        java.lang.Object obj88 = null;
        boolean boolean89 = nodeList86.remove(obj88);
        boolean boolean90 = nodeList70.retainAll((java.util.Collection<javafx.scene.Node>) nodeList86);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator91 = nodeList86.spliterator();
        boolean boolean92 = nodeList60.remove((java.lang.Object) nodeSpliterator91);
        int int93 = nodeList27.lastIndexOf((java.lang.Object) nodeSpliterator91);
        nodeList27.clear();
        boolean boolean95 = false; // flaky: nodeList23.contains((java.lang.Object) nodeList27);
        boolean boolean96 = nodeList10.equals((java.lang.Object) boolean95);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator97 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList10.replaceAll(nodeUnaryOperator97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeItor18);
        org.junit.Assert.assertNotNull(nodeItor19);
// flaky:         org.junit.Assert.assertNotNull(nodeList22);
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeItor24);
// flaky:         org.junit.Assert.assertNotNull(nodeItor25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList57);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        Interface.WoodTable woodTable17 = null;
        Interface.WoodTotalValues woodTotalValues18 = null;
        Interface.AddWood addWood19 = null; // flaky: new Interface.AddWood(woodTable17, woodTotalValues18);
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood19.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood19.getAll();
        int int22 = 0; // flaky: nodeList21.size();
        boolean boolean23 = false; // flaky: nodeList7.containsAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        java.util.stream.Stream<javafx.scene.Node> nodeStream24 = null; // flaky: nodeList7.stream();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeStream24);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
        java.util.Iterator<javafx.scene.Node> nodeItor4 = null; // flaky: nodeList3.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor5 = null; // flaky: nodeList3.listIterator();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = nodeList7.remove(obj9);
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        boolean boolean14 = nodeList12.isEmpty();
        int int16 = nodeList12.lastIndexOf((java.lang.Object) 100);
        boolean boolean17 = nodeList7.equals((java.lang.Object) nodeList12);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
// flaky:         addWood20.redraw((double) 10.0f, (double) 0L);
        boolean boolean25 = nodeList7.contains((java.lang.Object) 10.0f);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean31 = false; // flaky: nodeList29.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        boolean boolean36 = nodeList34.isEmpty();
        int int38 = nodeList34.lastIndexOf((java.lang.Object) 100);
        int int40 = nodeList34.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList45 = null; // flaky: addWood43.getAll();
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        boolean boolean49 = nodeList47.isEmpty();
        int int51 = nodeList47.lastIndexOf((java.lang.Object) 100);
        int int53 = nodeList47.lastIndexOf((java.lang.Object) 10);
        boolean boolean54 = false; // flaky: nodeList45.retainAll((java.util.Collection<javafx.scene.Node>) nodeList47);
        boolean boolean55 = nodeList34.containsAll((java.util.Collection<javafx.scene.Node>) nodeList47);
        boolean boolean56 = false; // flaky: nodeList29.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList34);
        boolean boolean57 = false; // flaky: nodeList7.retainAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        boolean boolean58 = false; // flaky: nodeList3.remove((java.lang.Object) nodeList29);
// flaky:         nodeList3.clear();
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeItor4);
// flaky:         org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
// flaky:         org.junit.Assert.assertNotNull(nodeList45);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((double) 0L, (double) 100.0f);
        java.util.ArrayList<javafx.scene.Node> nodeList6 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((-1.0d), (double) (-1.0f));
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList6);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        Interface.WoodTable woodTable17 = null;
        Interface.WoodTotalValues woodTotalValues18 = null;
        Interface.AddWood addWood19 = null; // flaky: new Interface.AddWood(woodTable17, woodTotalValues18);
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood19.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood19.getAll();
        int int22 = 0; // flaky: nodeList21.size();
        boolean boolean23 = false; // flaky: nodeList7.containsAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        boolean boolean27 = nodeList25.isEmpty();
        int int29 = nodeList25.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean35 = false; // flaky: nodeList33.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node37 = null;
        javafx.scene.Node node38 = null; // flaky: nodeList33.set((int) (byte) 1, node37);
        boolean boolean39 = nodeList25.add(node38);
        javafx.scene.Node[] nodeArray40 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList41 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList41, nodeArray40);
        java.lang.Object obj43 = null;
        boolean boolean44 = nodeList41.remove(obj43);
        boolean boolean45 = nodeList25.retainAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        nodeList41.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor47 = nodeList41.listIterator();
        boolean boolean48 = false; // flaky: nodeList21.containsAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        javafx.scene.Node[] nodeArray49 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList50 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList50, nodeArray49);
        java.lang.Object obj52 = null;
        boolean boolean53 = nodeList50.remove(obj52);
        javafx.scene.Node[] nodeArray54 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList55 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList55, nodeArray54);
        boolean boolean57 = nodeList55.isEmpty();
        int int59 = nodeList55.lastIndexOf((java.lang.Object) 100);
        boolean boolean60 = nodeList55.isEmpty();
        nodeList55.clear();
        boolean boolean62 = nodeList50.removeAll((java.util.Collection<javafx.scene.Node>) nodeList55);
        Interface.WoodTable woodTable63 = null;
        Interface.WoodTotalValues woodTotalValues64 = null;
        Interface.AddWood addWood65 = null; // flaky: new Interface.AddWood(woodTable63, woodTotalValues64);
        java.util.ArrayList<javafx.scene.Node> nodeList66 = null; // flaky: addWood65.getAll();
// flaky:         addWood65.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList70 = null; // flaky: addWood65.getAll();
        boolean boolean71 = false; // flaky: nodeList55.addAll((java.util.Collection<javafx.scene.Node>) nodeList70);
        javafx.scene.Node[] nodeArray72 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList73 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList73, nodeArray72);
        boolean boolean75 = nodeList73.isEmpty();
        int int77 = nodeList73.lastIndexOf((java.lang.Object) 100);
        int int79 = nodeList73.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable80 = null;
        Interface.WoodTotalValues woodTotalValues81 = null;
        Interface.AddWood addWood82 = null; // flaky: new Interface.AddWood(woodTable80, woodTotalValues81);
        java.util.ArrayList<javafx.scene.Node> nodeList83 = null; // flaky: addWood82.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList84 = null; // flaky: addWood82.getAll();
        javafx.scene.Node[] nodeArray85 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList86 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList86, nodeArray85);
        boolean boolean88 = nodeList86.isEmpty();
        int int90 = nodeList86.lastIndexOf((java.lang.Object) 100);
        int int92 = nodeList86.lastIndexOf((java.lang.Object) 10);
        boolean boolean93 = false; // flaky: nodeList84.retainAll((java.util.Collection<javafx.scene.Node>) nodeList86);
        boolean boolean94 = nodeList73.containsAll((java.util.Collection<javafx.scene.Node>) nodeList86);
        java.util.ListIterator<javafx.scene.Node> nodeItor96 = nodeList73.listIterator(0);
        java.util.Iterator<javafx.scene.Node> nodeItor97 = nodeList73.iterator();
        int int98 = 0; // flaky: nodeList70.lastIndexOf((java.lang.Object) nodeItor97);
        boolean boolean99 = nodeList41.equals((java.lang.Object) nodeItor97);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(nodeItor47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList66);
// flaky:         org.junit.Assert.assertNotNull(nodeList70);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList83);
// flaky:         org.junit.Assert.assertNotNull(nodeList84);
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(nodeItor96);
        org.junit.Assert.assertNotNull(nodeItor97);
// flaky:         org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator24 = null; // flaky: nodeList19.spliterator();
        java.lang.Object[] objArray25 = null; // flaky: nodeList19.toArray();
        java.util.ListIterator<javafx.scene.Node> nodeItor27 = null; // flaky: nodeList19.listIterator(2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator24);
// flaky:         org.junit.Assert.assertNotNull(objArray25);
// flaky:         org.junit.Assert.assertNotNull(nodeItor27);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        boolean boolean19 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        javafx.scene.Node node25 = null;
        boolean boolean26 = nodeList21.add(node25);
        java.util.ListIterator<javafx.scene.Node> nodeItor27 = nodeList21.listIterator();
        boolean boolean28 = nodeList6.removeAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        boolean boolean33 = false; // flaky: nodeList21.removeAll((java.util.Collection<javafx.scene.Node>) nodeList32);
        java.util.Collection<javafx.scene.Node> nodeCollection35 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = nodeList21.addAll((int) (byte) 0, nodeCollection35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node24 = nodeList6.get((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
        boolean boolean38 = false; // flaky: nodeList37.isEmpty();
        boolean boolean39 = false; // flaky: nodeList7.addAll((java.util.Collection<javafx.scene.Node>) nodeList37);
        java.util.ListIterator<javafx.scene.Node> nodeItor40 = null; // flaky: nodeList7.listIterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor40);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        int int4 = 0; // flaky: nodeList2.indexOf((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray5 = null; // flaky: nodeList2.toArray();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        boolean boolean9 = nodeList7.isEmpty();
        boolean boolean10 = nodeList7.isEmpty();
        nodeList7.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor13 = nodeList7.listIterator(0);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        javafx.scene.Node[] nodeArray19 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList20 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList20, nodeArray19);
        boolean boolean22 = nodeList20.isEmpty();
        int int24 = nodeList20.lastIndexOf((java.lang.Object) 100);
        int int26 = nodeList20.lastIndexOf((java.lang.Object) 10);
        boolean boolean27 = false; // flaky: nodeList18.retainAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        boolean boolean29 = false; // flaky: nodeList18.contains((java.lang.Object) false);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean34 = false; // flaky: nodeList33.isEmpty();
        boolean boolean36 = false; // flaky: nodeList33.equals((java.lang.Object) 100);
        int int37 = 0; // flaky: nodeList18.lastIndexOf((java.lang.Object) nodeList33);
        java.lang.Object[] objArray38 = null; // flaky: nodeList18.toArray();
        int int39 = nodeList7.lastIndexOf((java.lang.Object) objArray38);
        java.util.stream.Stream<javafx.scene.Node> nodeStream40 = nodeList7.stream();
        boolean boolean41 = false; // flaky: nodeList2.removeAll((java.util.Collection<javafx.scene.Node>) nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeItor13);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(nodeStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        int int10 = nodeList1.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean23 = false; // flaky: nodeList21.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node25 = null;
        javafx.scene.Node node26 = null; // flaky: nodeList21.set((int) (byte) 1, node25);
        boolean boolean27 = nodeList13.add(node26);
        javafx.scene.Node node28 = null; // flaky: nodeList1.set((int) (short) 0, node26);
        java.util.Iterator<javafx.scene.Node> nodeItor29 = nodeList1.iterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeItor29);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        boolean boolean8 = nodeList1.isEmpty();
        java.util.ListIterator<javafx.scene.Node> nodeItor9 = nodeList1.listIterator();
        java.lang.Class<?> wildcardClass10 = nodeItor9.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean25 = false; // flaky: nodeList18.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList24);
        int int27 = nodeList18.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = nodeList30.add(node43);
        javafx.scene.Node node45 = null; // flaky: nodeList18.set((int) (short) 0, node43);
        javafx.scene.Node node46 = nodeList1.set((int) (byte) 0, node43);
        javafx.scene.Node[] nodeArray47 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList48 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList48, nodeArray47);
        boolean boolean50 = nodeList48.isEmpty();
        int int52 = nodeList48.lastIndexOf((java.lang.Object) 100);
        int int54 = nodeList48.lastIndexOf((java.lang.Object) 10);
        boolean boolean55 = nodeList48.isEmpty();
        java.util.ListIterator<javafx.scene.Node> nodeItor56 = nodeList48.listIterator();
        boolean boolean57 = nodeList1.equals((java.lang.Object) nodeItor56);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertNotNull(node45);
// flaky:         org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(nodeItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        java.util.stream.Stream<javafx.scene.Node> nodeStream16 = nodeList1.parallelStream();
        boolean boolean17 = nodeList1.isEmpty();
        java.lang.Object[] objArray18 = nodeList1.toArray();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        boolean boolean6 = false; // flaky: nodeList3.equals((java.lang.Object) 100);
        java.util.ListIterator<javafx.scene.Node> nodeItor7 = null; // flaky: nodeList3.listIterator();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor7);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        boolean boolean19 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean28 = false; // flaky: nodeList21.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList27);
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        boolean boolean33 = false; // flaky: nodeList32.isEmpty();
        boolean boolean34 = false; // flaky: nodeList21.removeAll((java.util.Collection<javafx.scene.Node>) nodeList32);
        boolean boolean35 = nodeList6.equals((java.lang.Object) boolean34);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        boolean boolean19 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        javafx.scene.Node node25 = null;
        boolean boolean26 = nodeList21.add(node25);
        java.util.ListIterator<javafx.scene.Node> nodeItor27 = nodeList21.listIterator();
        boolean boolean28 = nodeList6.removeAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        java.util.stream.Stream<javafx.scene.Node> nodeStream29 = nodeList6.parallelStream();
        java.lang.Object obj30 = null;
        boolean boolean31 = nodeList6.contains(obj30);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeStream29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        java.util.ListIterator<javafx.scene.Node> nodeItor22 = nodeList17.listIterator();
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        int int28 = nodeList24.lastIndexOf((java.lang.Object) 100);
        int int30 = nodeList24.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor31 = nodeList24.listIterator();
        int int32 = nodeList24.size();
        boolean boolean33 = nodeList24.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream34 = nodeList24.parallelStream();
        javafx.scene.Node[] nodeArray35 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList36 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList36, nodeArray35);
        boolean boolean38 = nodeList36.isEmpty();
        int int40 = nodeList36.lastIndexOf((java.lang.Object) 100);
        int int42 = nodeList36.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable43 = null;
        Interface.WoodTotalValues woodTotalValues44 = null;
        Interface.AddWood addWood45 = null; // flaky: new Interface.AddWood(woodTable43, woodTotalValues44);
        java.util.ArrayList<javafx.scene.Node> nodeList46 = null; // flaky: addWood45.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood45.getAll();
        javafx.scene.Node[] nodeArray48 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList49 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList49, nodeArray48);
        boolean boolean51 = nodeList49.isEmpty();
        int int53 = nodeList49.lastIndexOf((java.lang.Object) 100);
        int int55 = nodeList49.lastIndexOf((java.lang.Object) 10);
        boolean boolean56 = false; // flaky: nodeList47.retainAll((java.util.Collection<javafx.scene.Node>) nodeList49);
        boolean boolean57 = nodeList36.containsAll((java.util.Collection<javafx.scene.Node>) nodeList49);
        Interface.WoodTable woodTable58 = null;
        Interface.WoodTotalValues woodTotalValues59 = null;
        Interface.AddWood addWood60 = null; // flaky: new Interface.AddWood(woodTable58, woodTotalValues59);
        java.util.ArrayList<javafx.scene.Node> nodeList61 = null; // flaky: addWood60.getAll();
        boolean boolean63 = false; // flaky: nodeList61.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node65 = null;
        javafx.scene.Node node66 = null; // flaky: nodeList61.set((int) (byte) 1, node65);
        boolean boolean67 = false; // flaky: nodeList36.removeAll((java.util.Collection<javafx.scene.Node>) nodeList61);
        int int68 = nodeList24.lastIndexOf((java.lang.Object) nodeList36);
        Interface.WoodTable woodTable69 = null;
        Interface.WoodTotalValues woodTotalValues70 = null; // flaky: new Interface.WoodTotalValues(woodTable69);
        java.util.ArrayList<javafx.scene.Node> nodeList71 = null; // flaky: woodTotalValues70.getAll();
        int int72 = nodeList36.lastIndexOf((java.lang.Object) woodTotalValues70);
        java.lang.Class<?> wildcardClass73 = null; // flaky: woodTotalValues70.getClass();
        javafx.scene.Node[] nodeArray74 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList75 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList75, nodeArray74);
        boolean boolean77 = nodeList75.isEmpty();
        int int79 = nodeList75.lastIndexOf((java.lang.Object) 100);
        int int81 = nodeList75.lastIndexOf((java.lang.Object) 10);
        boolean boolean82 = nodeList75.isEmpty();
        java.util.ListIterator<javafx.scene.Node> nodeItor83 = nodeList75.listIterator();
        java.lang.Class<?> wildcardClass84 = nodeItor83.getClass();
        java.lang.Class[] classArray86 = new java.lang.Class[2];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray87 = (java.lang.Class<?>[]) classArray86;
        wildcardClassArray87[0] = wildcardClass73;
        wildcardClassArray87[1] = wildcardClass84;
        java.lang.Class<?>[] wildcardClassArray92 = nodeList17.toArray(wildcardClassArray87);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeItor22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(nodeItor31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeStream34);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList46);
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
// flaky:         org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(nodeItor83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(wildcardClassArray87);
        org.junit.Assert.assertNotNull(wildcardClassArray92);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTable woodTable3 = null;
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null; // flaky: new Interface.WoodTotalValues(woodTable4);
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable3, woodTotalValues5);
// flaky:         woodTotalValues5.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable2, woodTotalValues5);
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues5);
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: woodTotalValues5.getAll();
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood16.getAll();
        javafx.scene.Node[] nodeArray19 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList20 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList20, nodeArray19);
        boolean boolean22 = nodeList20.isEmpty();
        int int24 = nodeList20.lastIndexOf((java.lang.Object) 100);
        int int26 = nodeList20.lastIndexOf((java.lang.Object) 10);
        boolean boolean27 = false; // flaky: nodeList18.retainAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        boolean boolean31 = nodeList29.isEmpty();
        int int33 = nodeList29.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
        boolean boolean39 = false; // flaky: nodeList37.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node41 = null;
        javafx.scene.Node node42 = null; // flaky: nodeList37.set((int) (byte) 1, node41);
        boolean boolean43 = nodeList29.add(node42);
        java.util.stream.Stream<javafx.scene.Node> nodeStream44 = nodeList29.stream();
        boolean boolean45 = nodeList20.equals((java.lang.Object) nodeStream44);
        boolean boolean46 = nodeList20.isEmpty();
        boolean boolean47 = nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList20);
        java.util.ListIterator<javafx.scene.Node> nodeItor48 = nodeList1.listIterator();
        boolean boolean49 = nodeList1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node51 = nodeList1.get((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeItor48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node node5 = null;
        boolean boolean6 = nodeList1.add(node5);
        java.util.ListIterator<javafx.scene.Node> nodeItor7 = nodeList1.listIterator();
        Interface.WoodTable woodTable8 = null;
        Interface.WoodTotalValues woodTotalValues9 = null;
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable8, woodTotalValues9);
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood10.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood10.getAll();
        javafx.scene.Node[] nodeArray13 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList14 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList14, nodeArray13);
        boolean boolean16 = nodeList14.isEmpty();
        int int18 = nodeList14.lastIndexOf((java.lang.Object) 100);
        int int20 = nodeList14.lastIndexOf((java.lang.Object) 10);
        boolean boolean21 = false; // flaky: nodeList12.retainAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        boolean boolean23 = false; // flaky: nodeList12.contains((java.lang.Object) false);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean28 = false; // flaky: nodeList27.isEmpty();
        boolean boolean30 = false; // flaky: nodeList27.equals((java.lang.Object) 100);
        int int31 = 0; // flaky: nodeList12.lastIndexOf((java.lang.Object) nodeList27);
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        java.lang.Object obj35 = null;
        boolean boolean36 = nodeList33.remove(obj35);
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        boolean boolean40 = nodeList38.isEmpty();
        int int42 = nodeList38.lastIndexOf((java.lang.Object) 100);
        boolean boolean43 = nodeList33.equals((java.lang.Object) nodeList38);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTotalValues woodTotalValues45 = null;
        Interface.AddWood addWood46 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood46.getAll();
// flaky:         addWood46.redraw((double) 10.0f, (double) 0L);
        boolean boolean51 = nodeList33.contains((java.lang.Object) 10.0f);
        boolean boolean52 = false; // flaky: nodeList27.contains((java.lang.Object) 10.0f);
        boolean boolean53 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList27);
        java.util.Collection<javafx.scene.Node> nodeCollection54 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = nodeList27.retainAll(nodeCollection54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeItor7);
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = nodeList6.remove(obj8);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        int int15 = nodeList11.lastIndexOf((java.lang.Object) 100);
        boolean boolean16 = nodeList11.isEmpty();
        nodeList11.clear();
        boolean boolean18 = nodeList6.removeAll((java.util.Collection<javafx.scene.Node>) nodeList11);
        boolean boolean19 = nodeList6.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor20 = nodeList6.iterator();
        java.lang.Object[] objArray21 = nodeList6.toArray();
        int int22 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList6);
        java.util.stream.Stream<javafx.scene.Node> nodeStream23 = nodeList6.parallelStream();
        java.util.Iterator<javafx.scene.Node> nodeItor24 = nodeList6.iterator();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(nodeStream23);
        org.junit.Assert.assertNotNull(nodeItor24);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
        java.util.ArrayList<javafx.scene.Node> nodeList6 = null; // flaky: addWood5.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood5.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood5.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood5.getAll();
// flaky:         org.junit.Assert.assertNotNull(nodeList6);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood37.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood37.getAll();
        javafx.scene.Node[] nodeArray42 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList43 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList43, nodeArray42);
        boolean boolean45 = nodeList43.isEmpty();
        int int47 = nodeList43.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable48 = null;
        Interface.WoodTotalValues woodTotalValues49 = null;
        Interface.AddWood addWood50 = null; // flaky: new Interface.AddWood(woodTable48, woodTotalValues49);
        java.util.ArrayList<javafx.scene.Node> nodeList51 = null; // flaky: addWood50.getAll();
        boolean boolean53 = false; // flaky: nodeList51.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node55 = null;
        javafx.scene.Node node56 = null; // flaky: nodeList51.set((int) (byte) 1, node55);
        boolean boolean57 = nodeList43.add(node56);
        javafx.scene.Node node58 = null; // flaky: nodeList40.set((int) (short) 0, node56);
// flaky:         nodeList7.add(5, node56);
        boolean boolean60 = false; // flaky: nodeList7.isEmpty();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        int int15 = nodeList11.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean21 = false; // flaky: nodeList19.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node23 = null;
        javafx.scene.Node node24 = null; // flaky: nodeList19.set((int) (byte) 1, node23);
        boolean boolean25 = nodeList11.add(node24);
// flaky:         nodeList1.add(1, node24);
        java.lang.Object[] objArray27 = nodeList1.toArray();
        nodeList1.clear();
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood31.getAll();
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        boolean boolean37 = nodeList35.isEmpty();
        int int39 = nodeList35.lastIndexOf((java.lang.Object) 100);
        int int41 = nodeList35.lastIndexOf((java.lang.Object) 10);
        boolean boolean42 = false; // flaky: nodeList33.retainAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        java.util.ListIterator<javafx.scene.Node> nodeItor43 = null; // flaky: nodeList33.listIterator();
        boolean boolean44 = false; // flaky: nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList33);
        Interface.WoodTable woodTable45 = null;
        Interface.WoodTotalValues woodTotalValues46 = null; // flaky: new Interface.WoodTotalValues(woodTable45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: woodTotalValues46.getAll();
        int int49 = 0; // flaky: nodeList47.indexOf((java.lang.Object) (byte) 0);
        java.util.Iterator<javafx.scene.Node> nodeItor50 = null; // flaky: nodeList47.iterator();
        boolean boolean51 = false; // flaky: nodeList33.equals((java.lang.Object) nodeList47);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeItor50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        int int15 = nodeList11.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean21 = false; // flaky: nodeList19.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node23 = null;
        javafx.scene.Node node24 = null; // flaky: nodeList19.set((int) (byte) 1, node23);
        boolean boolean25 = nodeList11.add(node24);
// flaky:         nodeList1.add(1, node24);
        java.util.stream.Stream<javafx.scene.Node> nodeStream27 = nodeList1.stream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator28 = nodeList1.spliterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeStream27);
        org.junit.Assert.assertNotNull(nodeSpliterator28);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        boolean boolean4 = nodeList1.isEmpty();
        nodeList1.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor7 = nodeList1.listIterator(0);
        Interface.WoodTable woodTable8 = null;
        Interface.WoodTotalValues woodTotalValues9 = null;
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable8, woodTotalValues9);
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood10.getAll();
        boolean boolean13 = false; // flaky: nodeList11.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node15 = null;
        javafx.scene.Node node16 = null; // flaky: nodeList11.set((int) (byte) 1, node15);
        javafx.css.Styleable[] styleableArray17 = new javafx.css.Styleable[] { node16 };
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean23 = false; // flaky: nodeList21.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node25 = null;
        javafx.scene.Node node26 = null; // flaky: nodeList21.set((int) (byte) 1, node25);
        javafx.css.Styleable[] styleableArray27 = new javafx.css.Styleable[] { node26 };
        javafx.css.Styleable[][] styleableArray28 = new javafx.css.Styleable[][] { styleableArray17, styleableArray27 };
        javafx.css.Styleable[][] styleableArray29 = nodeList1.toArray(styleableArray28);
        java.util.Iterator<javafx.scene.Node> nodeItor30 = nodeList1.iterator();
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        boolean boolean34 = nodeList32.isEmpty();
        int int36 = nodeList32.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        boolean boolean42 = false; // flaky: nodeList40.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node44 = null;
        javafx.scene.Node node45 = null; // flaky: nodeList40.set((int) (byte) 1, node44);
        boolean boolean46 = nodeList32.add(node45);
        javafx.scene.Node[] nodeArray47 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList48 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList48, nodeArray47);
        java.lang.Object obj50 = null;
        boolean boolean51 = nodeList48.remove(obj50);
        boolean boolean52 = nodeList32.retainAll((java.util.Collection<javafx.scene.Node>) nodeList48);
        javafx.scene.Node[] nodeArray53 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList54 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList54, nodeArray53);
        Interface.WoodTable woodTable57 = null;
        Interface.WoodTotalValues woodTotalValues58 = null;
        Interface.AddWood addWood59 = null; // flaky: new Interface.AddWood(woodTable57, woodTotalValues58);
        java.util.ArrayList<javafx.scene.Node> nodeList60 = null; // flaky: addWood59.getAll();
        boolean boolean61 = false; // flaky: nodeList54.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList60);
        java.util.stream.Stream<javafx.scene.Node> nodeStream62 = null; // flaky: nodeList60.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator63 = null; // flaky: nodeList60.spliterator();
        boolean boolean64 = false; // flaky: nodeList32.addAll((java.util.Collection<javafx.scene.Node>) nodeList60);
// flaky:         nodeList60.clear();
        java.lang.Object[] objArray66 = null; // flaky: nodeList60.toArray();
        javafx.scene.Node[] nodeArray67 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList68 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList68, nodeArray67);
        boolean boolean70 = nodeList68.isEmpty();
        int int72 = nodeList68.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable73 = null;
        Interface.WoodTotalValues woodTotalValues74 = null;
        Interface.AddWood addWood75 = null; // flaky: new Interface.AddWood(woodTable73, woodTotalValues74);
        java.util.ArrayList<javafx.scene.Node> nodeList76 = null; // flaky: addWood75.getAll();
        boolean boolean78 = false; // flaky: nodeList76.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node80 = null;
        javafx.scene.Node node81 = null; // flaky: nodeList76.set((int) (byte) 1, node80);
        boolean boolean82 = nodeList68.add(node81);
        boolean boolean83 = false; // flaky: nodeList60.add(node81);
        boolean boolean84 = nodeList1.add(node81);
        Interface.WoodTable woodTable86 = null;
        Interface.WoodTotalValues woodTotalValues87 = null;
        Interface.AddWood addWood88 = null; // flaky: new Interface.AddWood(woodTable86, woodTotalValues87);
        java.util.ArrayList<javafx.scene.Node> nodeList89 = null; // flaky: addWood88.getAll();
        boolean boolean90 = false; // flaky: nodeList89.isEmpty();
        boolean boolean92 = false; // flaky: nodeList89.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor93 = null; // flaky: nodeList89.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor94 = null; // flaky: nodeList89.listIterator();
        javafx.scene.Node node96 = null; // flaky: nodeList89.get(1);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node97 = nodeList1.set((int) ' ', node96);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(nodeItor7);
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(styleableArray17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(styleableArray27);
        org.junit.Assert.assertNotNull(styleableArray28);
        org.junit.Assert.assertNotNull(styleableArray29);
        org.junit.Assert.assertNotNull(nodeItor30);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream62);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor93);
// flaky:         org.junit.Assert.assertNotNull(nodeItor94);
// flaky:         org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable8 = null;
        Interface.WoodTotalValues woodTotalValues9 = null;
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable8, woodTotalValues9);
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood10.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood10.getAll();
        javafx.scene.Node[] nodeArray13 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList14 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList14, nodeArray13);
        boolean boolean16 = nodeList14.isEmpty();
        int int18 = nodeList14.lastIndexOf((java.lang.Object) 100);
        int int20 = nodeList14.lastIndexOf((java.lang.Object) 10);
        boolean boolean21 = false; // flaky: nodeList12.retainAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        boolean boolean22 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable33 = null;
        Interface.WoodTotalValues woodTotalValues34 = null; // flaky: new Interface.WoodTotalValues(woodTable33);
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: woodTotalValues34.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: woodTotalValues34.getAll();
        java.util.Iterator<javafx.scene.Node> nodeItor37 = null; // flaky: nodeList36.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor38 = null; // flaky: nodeList36.listIterator();
        boolean boolean39 = false; // flaky: nodeList26.equals((java.lang.Object) nodeList36);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertNotNull(nodeItor37);
// flaky:         org.junit.Assert.assertNotNull(nodeItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        javafx.scene.Node[] nodeArray19 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList20 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList20, nodeArray19);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean27 = false; // flaky: nodeList20.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList26);
        java.util.stream.Stream<javafx.scene.Node> nodeStream28 = null; // flaky: nodeList26.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator29 = null; // flaky: nodeList26.spliterator();
        int int30 = 0; // flaky: nodeList8.indexOf((java.lang.Object) nodeList26);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator31 = null; // flaky: nodeList26.spliterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream28);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator31);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray7 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList8 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList8, nodeArray7);
        boolean boolean10 = nodeList8.isEmpty();
        int int12 = nodeList8.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable13 = null;
        Interface.WoodTotalValues woodTotalValues14 = null;
        Interface.AddWood addWood15 = null; // flaky: new Interface.AddWood(woodTable13, woodTotalValues14);
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: addWood15.getAll();
        boolean boolean18 = false; // flaky: nodeList16.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node20 = null;
        javafx.scene.Node node21 = null; // flaky: nodeList16.set((int) (byte) 1, node20);
        boolean boolean22 = nodeList8.add(node21);
        javafx.scene.Node node23 = null; // flaky: nodeList5.set((int) (short) 0, node21);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = nodeList25.remove(obj27);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        java.lang.Object obj32 = null;
        boolean boolean33 = nodeList30.remove(obj32);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList35.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList41);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
// flaky:         nodeList35.add(1, node58);
        boolean boolean61 = nodeList30.retainAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        boolean boolean62 = nodeList25.retainAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        boolean boolean63 = false; // flaky: nodeList5.retainAll((java.util.Collection<javafx.scene.Node>) nodeList25);
        javafx.scene.Node[] nodeArray64 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList65 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList65, nodeArray64);
        java.lang.Object obj67 = null;
        boolean boolean68 = nodeList65.remove(obj67);
        javafx.scene.Node node69 = null;
        boolean boolean70 = nodeList65.add(node69);
        int int72 = nodeList65.indexOf((java.lang.Object) (short) 10);
        Interface.WoodTable woodTable73 = null;
        Interface.WoodTotalValues woodTotalValues74 = null;
        Interface.AddWood addWood75 = null; // flaky: new Interface.AddWood(woodTable73, woodTotalValues74);
        java.util.ArrayList<javafx.scene.Node> nodeList76 = null; // flaky: addWood75.getAll();
// flaky:         addWood75.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList80 = null; // flaky: addWood75.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList81 = null; // flaky: addWood75.getAll();
        javafx.scene.Node[] nodeArray82 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList83 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList83, nodeArray82);
        java.lang.Object obj85 = null;
        boolean boolean86 = nodeList83.remove(obj85);
        javafx.scene.Node node87 = null;
        boolean boolean88 = nodeList83.add(node87);
        java.util.ListIterator<javafx.scene.Node> nodeItor89 = nodeList83.listIterator();
        boolean boolean90 = false; // flaky: nodeList81.contains((java.lang.Object) nodeList83);
        java.util.ListIterator<javafx.scene.Node> nodeItor91 = nodeList83.listIterator();
        boolean boolean92 = nodeList65.remove((java.lang.Object) nodeList83);
        boolean boolean93 = nodeList25.containsAll((java.util.Collection<javafx.scene.Node>) nodeList83);
        java.util.Collection<javafx.scene.Node> nodeCollection94 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = nodeList25.containsAll(nodeCollection94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList76);
// flaky:         org.junit.Assert.assertNotNull(nodeList80);
// flaky:         org.junit.Assert.assertNotNull(nodeList81);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(nodeItor89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(nodeItor91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        int int16 = nodeList7.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean29 = false; // flaky: nodeList27.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node31 = null;
        javafx.scene.Node node32 = null; // flaky: nodeList27.set((int) (byte) 1, node31);
        boolean boolean33 = nodeList19.add(node32);
        javafx.scene.Node node34 = null; // flaky: nodeList7.set((int) (short) 0, node32);
        boolean boolean35 = nodeList1.add(node34);
        boolean boolean37 = nodeList1.remove((java.lang.Object) 100L);
        nodeList1.clear();
        javafx.scene.Node node40 = null;
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node41 = nodeList1.set((int) (byte) 0, node40);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        Interface.AddWood addWood3 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: woodTotalValues2.getAll();
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues2.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList8.iterator();
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList25 = null; // flaky: addWood23.getAll();
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        boolean boolean29 = nodeList27.isEmpty();
        int int31 = nodeList27.lastIndexOf((java.lang.Object) 100);
        int int33 = nodeList27.lastIndexOf((java.lang.Object) 10);
        boolean boolean34 = false; // flaky: nodeList25.retainAll((java.util.Collection<javafx.scene.Node>) nodeList27);
        javafx.scene.Node[] nodeArray35 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList36 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList36, nodeArray35);
        boolean boolean38 = nodeList36.isEmpty();
        int int40 = nodeList36.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean46 = false; // flaky: nodeList44.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node48 = null;
        javafx.scene.Node node49 = null; // flaky: nodeList44.set((int) (byte) 1, node48);
        boolean boolean50 = nodeList36.add(node49);
        java.util.stream.Stream<javafx.scene.Node> nodeStream51 = nodeList36.stream();
        boolean boolean52 = nodeList27.equals((java.lang.Object) nodeStream51);
        int int53 = 0; // flaky: nodeList8.indexOf((java.lang.Object) nodeStream51);
        javafx.scene.Node[] nodeArray54 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList55 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList55, nodeArray54);
        boolean boolean57 = nodeList55.isEmpty();
        int int59 = nodeList55.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable60 = null;
        Interface.WoodTotalValues woodTotalValues61 = null;
        Interface.AddWood addWood62 = null; // flaky: new Interface.AddWood(woodTable60, woodTotalValues61);
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: addWood62.getAll();
        boolean boolean65 = false; // flaky: nodeList63.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node67 = null;
        javafx.scene.Node node68 = null; // flaky: nodeList63.set((int) (byte) 1, node67);
        boolean boolean69 = nodeList55.add(node68);
        Interface.WoodTable woodTable70 = null;
        Interface.WoodTotalValues woodTotalValues71 = null;
        Interface.AddWood addWood72 = null; // flaky: new Interface.AddWood(woodTable70, woodTotalValues71);
        java.util.ArrayList<javafx.scene.Node> nodeList73 = null; // flaky: addWood72.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList74 = null; // flaky: addWood72.getAll();
        javafx.scene.Node[] nodeArray75 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList76 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList76, nodeArray75);
        boolean boolean78 = nodeList76.isEmpty();
        int int80 = nodeList76.lastIndexOf((java.lang.Object) 100);
        int int82 = nodeList76.lastIndexOf((java.lang.Object) 10);
        boolean boolean83 = false; // flaky: nodeList74.retainAll((java.util.Collection<javafx.scene.Node>) nodeList76);
        boolean boolean84 = nodeList55.removeAll((java.util.Collection<javafx.scene.Node>) nodeList76);
        Interface.WoodTable woodTable85 = null;
        Interface.WoodTotalValues woodTotalValues86 = null;
        Interface.AddWood addWood87 = null; // flaky: new Interface.AddWood(woodTable85, woodTotalValues86);
        java.util.ArrayList<javafx.scene.Node> nodeList88 = null; // flaky: addWood87.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList89 = null; // flaky: addWood87.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList90 = null; // flaky: addWood87.getAll();
        boolean boolean91 = false; // flaky: nodeList76.addAll((java.util.Collection<javafx.scene.Node>) nodeList90);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator92 = nodeList76.spliterator();
        javafx.scene.Node[] nodeArray93 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList94 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList94, nodeArray93);
        boolean boolean96 = nodeList94.isEmpty();
        boolean boolean97 = nodeList76.containsAll((java.util.Collection<javafx.scene.Node>) nodeList94);
        int int98 = nodeList76.size();
        boolean boolean99 = false; // flaky: nodeList8.contains((java.lang.Object) nodeList76);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeStream51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList73);
// flaky:         org.junit.Assert.assertNotNull(nodeList74);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList88);
// flaky:         org.junit.Assert.assertNotNull(nodeList89);
// flaky:         org.junit.Assert.assertNotNull(nodeList90);
// flaky:         org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator92);
        org.junit.Assert.assertNotNull(nodeArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int98 + "' != '" + 5 + "'", int98 == 5);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        java.lang.Class<?> wildcardClass14 = nodeList6.getClass();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        boolean boolean25 = nodeList23.isEmpty();
        int int27 = nodeList23.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        boolean boolean33 = false; // flaky: nodeList31.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node35 = null;
        javafx.scene.Node node36 = null; // flaky: nodeList31.set((int) (byte) 1, node35);
        boolean boolean37 = nodeList23.add(node36);
        java.util.stream.Stream<javafx.scene.Node> nodeStream38 = nodeList23.stream();
        boolean boolean39 = nodeList1.equals((java.lang.Object) nodeList23);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null; // flaky: new Interface.WoodTotalValues(woodTable40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: woodTotalValues41.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: woodTotalValues41.getAll();
        boolean boolean44 = nodeList1.contains((java.lang.Object) nodeList43);
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        int int52 = nodeList46.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor53 = nodeList46.listIterator();
        int int54 = nodeList46.size();
        boolean boolean55 = nodeList46.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream56 = nodeList46.parallelStream();
        javafx.scene.Node[] nodeArray57 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList58 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList58, nodeArray57);
        boolean boolean60 = nodeList58.isEmpty();
        int int62 = nodeList58.lastIndexOf((java.lang.Object) 100);
        int int64 = nodeList58.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable65 = null;
        Interface.WoodTotalValues woodTotalValues66 = null;
        Interface.AddWood addWood67 = null; // flaky: new Interface.AddWood(woodTable65, woodTotalValues66);
        java.util.ArrayList<javafx.scene.Node> nodeList68 = null; // flaky: addWood67.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList69 = null; // flaky: addWood67.getAll();
        javafx.scene.Node[] nodeArray70 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList71 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList71, nodeArray70);
        boolean boolean73 = nodeList71.isEmpty();
        int int75 = nodeList71.lastIndexOf((java.lang.Object) 100);
        int int77 = nodeList71.lastIndexOf((java.lang.Object) 10);
        boolean boolean78 = false; // flaky: nodeList69.retainAll((java.util.Collection<javafx.scene.Node>) nodeList71);
        boolean boolean79 = nodeList58.containsAll((java.util.Collection<javafx.scene.Node>) nodeList71);
        Interface.WoodTable woodTable80 = null;
        Interface.WoodTotalValues woodTotalValues81 = null;
        Interface.AddWood addWood82 = null; // flaky: new Interface.AddWood(woodTable80, woodTotalValues81);
        java.util.ArrayList<javafx.scene.Node> nodeList83 = null; // flaky: addWood82.getAll();
        boolean boolean85 = false; // flaky: nodeList83.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node87 = null;
        javafx.scene.Node node88 = null; // flaky: nodeList83.set((int) (byte) 1, node87);
        boolean boolean89 = false; // flaky: nodeList58.removeAll((java.util.Collection<javafx.scene.Node>) nodeList83);
        int int90 = nodeList46.lastIndexOf((java.lang.Object) nodeList58);
        Interface.WoodTable woodTable91 = null;
        Interface.WoodTotalValues woodTotalValues92 = null; // flaky: new Interface.WoodTotalValues(woodTable91);
        java.util.ArrayList<javafx.scene.Node> nodeList93 = null; // flaky: woodTotalValues92.getAll();
        int int94 = nodeList58.lastIndexOf((java.lang.Object) woodTotalValues92);
        boolean boolean95 = false; // flaky: nodeList43.remove((java.lang.Object) nodeList58);
        int int96 = nodeList58.size();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(nodeItor53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(nodeStream56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList68);
// flaky:         org.junit.Assert.assertNotNull(nodeList69);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        boolean boolean25 = nodeList21.isEmpty();
        javafx.scene.Node[] nodeArray26 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList27 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList27, nodeArray26);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
        boolean boolean34 = false; // flaky: nodeList27.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList33);
        int int36 = nodeList27.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray38 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList39 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList39, nodeArray38);
        boolean boolean41 = nodeList39.isEmpty();
        int int43 = nodeList39.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable44 = null;
        Interface.WoodTotalValues woodTotalValues45 = null;
        Interface.AddWood addWood46 = null; // flaky: new Interface.AddWood(woodTable44, woodTotalValues45);
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood46.getAll();
        boolean boolean49 = false; // flaky: nodeList47.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node51 = null;
        javafx.scene.Node node52 = null; // flaky: nodeList47.set((int) (byte) 1, node51);
        boolean boolean53 = nodeList39.add(node52);
        javafx.scene.Node node54 = null; // flaky: nodeList27.set((int) (short) 0, node52);
        boolean boolean55 = nodeList21.add(node54);
        boolean boolean57 = nodeList21.remove((java.lang.Object) 100L);
        int int58 = 0; // flaky: nodeList8.lastIndexOf((java.lang.Object) nodeList21);
        java.lang.Object[] objArray59 = nodeList21.toArray();
        javafx.scene.Node node61 = nodeList21.remove(0);
        int int62 = nodeList21.size();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(objArray59);
// flaky:         org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        boolean boolean6 = false; // flaky: nodeList3.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor7 = null; // flaky: nodeList3.iterator();
        javafx.scene.Node[] nodeArray8 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList9 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList9, nodeArray8);
        boolean boolean11 = nodeList9.isEmpty();
        boolean boolean12 = nodeList9.isEmpty();
        nodeList9.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor15 = nodeList9.listIterator(0);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean21 = false; // flaky: nodeList19.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node23 = null;
        javafx.scene.Node node24 = null; // flaky: nodeList19.set((int) (byte) 1, node23);
        javafx.css.Styleable[] styleableArray25 = new javafx.css.Styleable[] { node24 };
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean31 = false; // flaky: nodeList29.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node33 = null;
        javafx.scene.Node node34 = null; // flaky: nodeList29.set((int) (byte) 1, node33);
        javafx.css.Styleable[] styleableArray35 = new javafx.css.Styleable[] { node34 };
        javafx.css.Styleable[][] styleableArray36 = new javafx.css.Styleable[][] { styleableArray25, styleableArray35 };
        javafx.css.Styleable[][] styleableArray37 = nodeList9.toArray(styleableArray36);
        boolean boolean38 = false; // flaky: nodeList3.addAll((java.util.Collection<javafx.scene.Node>) nodeList9);
        Interface.WoodTable woodTable39 = null;
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null; // flaky: new Interface.WoodTotalValues(woodTable40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: woodTotalValues41.getAll();
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable39, woodTotalValues41);
        boolean boolean44 = nodeList9.equals((java.lang.Object) woodTotalValues41);
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable51 = null;
        Interface.WoodTotalValues woodTotalValues52 = null;
        Interface.AddWood addWood53 = null; // flaky: new Interface.AddWood(woodTable51, woodTotalValues52);
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood53.getAll();
        boolean boolean56 = false; // flaky: nodeList54.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node58 = null;
        javafx.scene.Node node59 = null; // flaky: nodeList54.set((int) (byte) 1, node58);
        boolean boolean60 = nodeList46.add(node59);
        java.util.stream.Stream<javafx.scene.Node> nodeStream61 = nodeList46.parallelStream();
        boolean boolean62 = nodeList46.isEmpty();
        Interface.WoodTable woodTable63 = null;
        Interface.WoodTotalValues woodTotalValues64 = null;
        Interface.AddWood addWood65 = null; // flaky: new Interface.AddWood(woodTable63, woodTotalValues64);
        java.util.ArrayList<javafx.scene.Node> nodeList66 = null; // flaky: addWood65.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList67 = null; // flaky: addWood65.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList68 = null; // flaky: addWood65.getAll();
        javafx.scene.Node[] nodeArray70 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList71 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList71, nodeArray70);
        boolean boolean73 = nodeList71.isEmpty();
        int int75 = nodeList71.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable76 = null;
        Interface.WoodTotalValues woodTotalValues77 = null;
        Interface.AddWood addWood78 = null; // flaky: new Interface.AddWood(woodTable76, woodTotalValues77);
        java.util.ArrayList<javafx.scene.Node> nodeList79 = null; // flaky: addWood78.getAll();
        boolean boolean81 = false; // flaky: nodeList79.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node83 = null;
        javafx.scene.Node node84 = null; // flaky: nodeList79.set((int) (byte) 1, node83);
        boolean boolean85 = nodeList71.add(node84);
        javafx.scene.Node node86 = null; // flaky: nodeList68.set((int) (short) 0, node84);
        boolean boolean87 = nodeList46.add(node86);
        boolean boolean88 = nodeList9.add(node86);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeItor15);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(styleableArray25);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(styleableArray35);
        org.junit.Assert.assertNotNull(styleableArray36);
        org.junit.Assert.assertNotNull(styleableArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(nodeStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList66);
// flaky:         org.junit.Assert.assertNotNull(nodeList67);
// flaky:         org.junit.Assert.assertNotNull(nodeList68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
// flaky:         org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
        boolean boolean38 = false; // flaky: nodeList37.isEmpty();
        boolean boolean39 = false; // flaky: nodeList7.addAll((java.util.Collection<javafx.scene.Node>) nodeList37);
        int int40 = 0; // flaky: nodeList37.size();
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList45 = null; // flaky: addWood43.getAll();
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        boolean boolean49 = nodeList47.isEmpty();
        int int51 = nodeList47.lastIndexOf((java.lang.Object) 100);
        int int53 = nodeList47.lastIndexOf((java.lang.Object) 10);
        boolean boolean54 = false; // flaky: nodeList45.retainAll((java.util.Collection<javafx.scene.Node>) nodeList47);
        boolean boolean56 = false; // flaky: nodeList45.contains((java.lang.Object) false);
        Interface.WoodTable woodTable57 = null;
        Interface.WoodTotalValues woodTotalValues58 = null;
        Interface.AddWood addWood59 = null; // flaky: new Interface.AddWood(woodTable57, woodTotalValues58);
        java.util.ArrayList<javafx.scene.Node> nodeList60 = null; // flaky: addWood59.getAll();
        boolean boolean61 = false; // flaky: nodeList60.isEmpty();
        boolean boolean63 = false; // flaky: nodeList60.equals((java.lang.Object) 100);
        int int64 = 0; // flaky: nodeList45.lastIndexOf((java.lang.Object) nodeList60);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator65 = null; // flaky: nodeList60.spliterator();
        java.lang.Object[] objArray66 = null; // flaky: nodeList60.toArray();
        boolean boolean67 = false; // flaky: nodeList37.remove((java.lang.Object) objArray66);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
// flaky:         org.junit.Assert.assertNotNull(nodeList45);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator65);
// flaky:         org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        int int15 = nodeList11.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean21 = false; // flaky: nodeList19.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node23 = null;
        javafx.scene.Node node24 = null; // flaky: nodeList19.set((int) (byte) 1, node23);
        boolean boolean25 = nodeList11.add(node24);
// flaky:         nodeList1.add(1, node24);
        java.util.Iterator<javafx.scene.Node> nodeItor27 = nodeList1.iterator();
        javafx.scene.Node node29 = null; // flaky: nodeList1.remove((int) (byte) 1);
        Interface.WoodTable woodTable30 = null;
        Interface.WoodTotalValues woodTotalValues31 = null;
        Interface.AddWood addWood32 = null; // flaky: new Interface.AddWood(woodTable30, woodTotalValues31);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood32.getAll();
// flaky:         addWood32.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood32.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood32.getAll();
        int int39 = 0; // flaky: nodeList38.size();
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean45 = false; // flaky: nodeList44.isEmpty();
        javafx.scene.Node[] nodeArray47 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList48 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList48, nodeArray47);
        boolean boolean50 = nodeList48.isEmpty();
        int int52 = nodeList48.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable53 = null;
        Interface.WoodTotalValues woodTotalValues54 = null;
        Interface.AddWood addWood55 = null; // flaky: new Interface.AddWood(woodTable53, woodTotalValues54);
        java.util.ArrayList<javafx.scene.Node> nodeList56 = null; // flaky: addWood55.getAll();
        boolean boolean58 = false; // flaky: nodeList56.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node60 = null;
        javafx.scene.Node node61 = null; // flaky: nodeList56.set((int) (byte) 1, node60);
        boolean boolean62 = nodeList48.add(node61);
        javafx.scene.Node[] nodeArray64 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList65 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList65, nodeArray64);
        Interface.WoodTable woodTable68 = null;
        Interface.WoodTotalValues woodTotalValues69 = null;
        Interface.AddWood addWood70 = null; // flaky: new Interface.AddWood(woodTable68, woodTotalValues69);
        java.util.ArrayList<javafx.scene.Node> nodeList71 = null; // flaky: addWood70.getAll();
        boolean boolean72 = false; // flaky: nodeList65.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList71);
        int int74 = nodeList65.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray76 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList77 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList77, nodeArray76);
        boolean boolean79 = nodeList77.isEmpty();
        int int81 = nodeList77.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable82 = null;
        Interface.WoodTotalValues woodTotalValues83 = null;
        Interface.AddWood addWood84 = null; // flaky: new Interface.AddWood(woodTable82, woodTotalValues83);
        java.util.ArrayList<javafx.scene.Node> nodeList85 = null; // flaky: addWood84.getAll();
        boolean boolean87 = false; // flaky: nodeList85.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node89 = null;
        javafx.scene.Node node90 = null; // flaky: nodeList85.set((int) (byte) 1, node89);
        boolean boolean91 = nodeList77.add(node90);
        javafx.scene.Node node92 = null; // flaky: nodeList65.set((int) (short) 0, node90);
        javafx.scene.Node node93 = nodeList48.set((int) (byte) 0, node90);
// flaky:         nodeList44.add((int) (short) 0, node93);
        boolean boolean95 = false; // flaky: nodeList38.addAll((int) (byte) 0, (java.util.Collection<javafx.scene.Node>) nodeList44);
        int int97 = 0; // flaky: nodeList38.indexOf((java.lang.Object) 11);
        int int98 = nodeList1.lastIndexOf((java.lang.Object) nodeList38);
        java.lang.Class<?> wildcardClass99 = nodeList1.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeItor27);
// flaky:         org.junit.Assert.assertNotNull(node29);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList71);
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
// flaky:         org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
// flaky:         org.junit.Assert.assertNotNull(node92);
// flaky:         org.junit.Assert.assertNotNull(node93);
// flaky:         org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        boolean boolean9 = false; // flaky: nodeList8.isEmpty();
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        boolean boolean13 = nodeList11.isEmpty();
        boolean boolean14 = nodeList11.isEmpty();
        nodeList11.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor17 = nodeList11.listIterator(0);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean23 = false; // flaky: nodeList21.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node25 = null;
        javafx.scene.Node node26 = null; // flaky: nodeList21.set((int) (byte) 1, node25);
        javafx.css.Styleable[] styleableArray27 = new javafx.css.Styleable[] { node26 };
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        boolean boolean33 = false; // flaky: nodeList31.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node35 = null;
        javafx.scene.Node node36 = null; // flaky: nodeList31.set((int) (byte) 1, node35);
        javafx.css.Styleable[] styleableArray37 = new javafx.css.Styleable[] { node36 };
        javafx.css.Styleable[][] styleableArray38 = new javafx.css.Styleable[][] { styleableArray27, styleableArray37 };
        javafx.css.Styleable[][] styleableArray39 = nodeList11.toArray(styleableArray38);
        nodeList11.clear();
        boolean boolean41 = false; // flaky: nodeList8.containsAll((java.util.Collection<javafx.scene.Node>) nodeList11);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(nodeItor17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(styleableArray27);
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(styleableArray37);
        org.junit.Assert.assertNotNull(styleableArray38);
        org.junit.Assert.assertNotNull(styleableArray39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        boolean boolean37 = nodeList35.isEmpty();
        int int39 = nodeList35.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null;
        Interface.AddWood addWood42 = null; // flaky: new Interface.AddWood(woodTable40, woodTotalValues41);
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: addWood42.getAll();
        boolean boolean45 = false; // flaky: nodeList43.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node47 = null;
        javafx.scene.Node node48 = null; // flaky: nodeList43.set((int) (byte) 1, node47);
        boolean boolean49 = nodeList35.add(node48);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood52.getAll();
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        boolean boolean58 = nodeList56.isEmpty();
        int int60 = nodeList56.lastIndexOf((java.lang.Object) 100);
        int int62 = nodeList56.lastIndexOf((java.lang.Object) 10);
        boolean boolean63 = false; // flaky: nodeList54.retainAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        boolean boolean64 = nodeList35.removeAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        boolean boolean65 = false; // flaky: nodeList7.containsAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node67 = nodeList56.remove((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        int int19 = nodeList13.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood22.getAll();
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        boolean boolean28 = nodeList26.isEmpty();
        int int30 = nodeList26.lastIndexOf((java.lang.Object) 100);
        int int32 = nodeList26.lastIndexOf((java.lang.Object) 10);
        boolean boolean33 = false; // flaky: nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        boolean boolean34 = nodeList13.containsAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = false; // flaky: nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        int int45 = nodeList1.lastIndexOf((java.lang.Object) nodeList13);
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean54 = false; // flaky: nodeList47.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList53);
        int int56 = nodeList47.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray58 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList59 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList59, nodeArray58);
        boolean boolean61 = nodeList59.isEmpty();
        int int63 = nodeList59.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable64 = null;
        Interface.WoodTotalValues woodTotalValues65 = null;
        Interface.AddWood addWood66 = null; // flaky: new Interface.AddWood(woodTable64, woodTotalValues65);
        java.util.ArrayList<javafx.scene.Node> nodeList67 = null; // flaky: addWood66.getAll();
        boolean boolean69 = false; // flaky: nodeList67.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node71 = null;
        javafx.scene.Node node72 = null; // flaky: nodeList67.set((int) (byte) 1, node71);
        boolean boolean73 = nodeList59.add(node72);
        javafx.scene.Node node74 = null; // flaky: nodeList47.set((int) (short) 0, node72);
        boolean boolean75 = nodeList13.containsAll((java.util.Collection<javafx.scene.Node>) nodeList47);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node77 = nodeList47.remove(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertNotNull(node74);
// flaky:         org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
// flaky:         addWood14.redraw((double) 10.0f, (double) 0L);
        boolean boolean19 = nodeList1.contains((java.lang.Object) 10.0f);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        boolean boolean25 = false; // flaky: nodeList23.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node[] nodeArray27 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList28 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList28, nodeArray27);
        boolean boolean30 = nodeList28.isEmpty();
        int int32 = nodeList28.lastIndexOf((java.lang.Object) 100);
        int int34 = nodeList28.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood37.getAll();
        javafx.scene.Node[] nodeArray40 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList41 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList41, nodeArray40);
        boolean boolean43 = nodeList41.isEmpty();
        int int45 = nodeList41.lastIndexOf((java.lang.Object) 100);
        int int47 = nodeList41.lastIndexOf((java.lang.Object) 10);
        boolean boolean48 = false; // flaky: nodeList39.retainAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        boolean boolean49 = nodeList28.containsAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        boolean boolean50 = false; // flaky: nodeList23.addAll(1, (java.util.Collection<javafx.scene.Node>) nodeList28);
        boolean boolean51 = false; // flaky: nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList54 = nodeList1.subList(0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        boolean boolean25 = nodeList23.isEmpty();
        int int27 = nodeList23.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        boolean boolean33 = false; // flaky: nodeList31.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node35 = null;
        javafx.scene.Node node36 = null; // flaky: nodeList31.set((int) (byte) 1, node35);
        boolean boolean37 = nodeList23.add(node36);
        java.util.stream.Stream<javafx.scene.Node> nodeStream38 = nodeList23.stream();
        boolean boolean39 = nodeList1.equals((java.lang.Object) nodeList23);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null; // flaky: new Interface.WoodTotalValues(woodTable40);
        java.util.ArrayList<javafx.scene.Node> nodeList42 = null; // flaky: woodTotalValues41.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: woodTotalValues41.getAll();
        boolean boolean44 = nodeList1.contains((java.lang.Object) nodeList43);
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        int int52 = nodeList46.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor53 = nodeList46.listIterator();
        int int54 = nodeList46.size();
        boolean boolean55 = nodeList46.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream56 = nodeList46.parallelStream();
        javafx.scene.Node[] nodeArray57 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList58 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList58, nodeArray57);
        boolean boolean60 = nodeList58.isEmpty();
        int int62 = nodeList58.lastIndexOf((java.lang.Object) 100);
        int int64 = nodeList58.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable65 = null;
        Interface.WoodTotalValues woodTotalValues66 = null;
        Interface.AddWood addWood67 = null; // flaky: new Interface.AddWood(woodTable65, woodTotalValues66);
        java.util.ArrayList<javafx.scene.Node> nodeList68 = null; // flaky: addWood67.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList69 = null; // flaky: addWood67.getAll();
        javafx.scene.Node[] nodeArray70 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList71 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList71, nodeArray70);
        boolean boolean73 = nodeList71.isEmpty();
        int int75 = nodeList71.lastIndexOf((java.lang.Object) 100);
        int int77 = nodeList71.lastIndexOf((java.lang.Object) 10);
        boolean boolean78 = false; // flaky: nodeList69.retainAll((java.util.Collection<javafx.scene.Node>) nodeList71);
        boolean boolean79 = nodeList58.containsAll((java.util.Collection<javafx.scene.Node>) nodeList71);
        Interface.WoodTable woodTable80 = null;
        Interface.WoodTotalValues woodTotalValues81 = null;
        Interface.AddWood addWood82 = null; // flaky: new Interface.AddWood(woodTable80, woodTotalValues81);
        java.util.ArrayList<javafx.scene.Node> nodeList83 = null; // flaky: addWood82.getAll();
        boolean boolean85 = false; // flaky: nodeList83.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node87 = null;
        javafx.scene.Node node88 = null; // flaky: nodeList83.set((int) (byte) 1, node87);
        boolean boolean89 = false; // flaky: nodeList58.removeAll((java.util.Collection<javafx.scene.Node>) nodeList83);
        int int90 = nodeList46.lastIndexOf((java.lang.Object) nodeList58);
        Interface.WoodTable woodTable91 = null;
        Interface.WoodTotalValues woodTotalValues92 = null; // flaky: new Interface.WoodTotalValues(woodTable91);
        java.util.ArrayList<javafx.scene.Node> nodeList93 = null; // flaky: woodTotalValues92.getAll();
        int int94 = nodeList58.lastIndexOf((java.lang.Object) woodTotalValues92);
        boolean boolean95 = false; // flaky: nodeList43.remove((java.lang.Object) nodeList58);
        java.lang.Class<?> wildcardClass96 = nodeList58.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList42);
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(nodeItor53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(nodeStream56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList68);
// flaky:         org.junit.Assert.assertNotNull(nodeList69);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        boolean boolean13 = false; // flaky: nodeList6.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        boolean boolean18 = nodeList16.isEmpty();
        int int20 = nodeList16.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean26 = false; // flaky: nodeList24.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node28 = null;
        javafx.scene.Node node29 = null; // flaky: nodeList24.set((int) (byte) 1, node28);
        boolean boolean30 = nodeList16.add(node29);
// flaky:         nodeList6.add(1, node29);
        boolean boolean32 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        boolean boolean41 = false; // flaky: nodeList34.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList40);
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        boolean boolean46 = nodeList44.isEmpty();
        int int48 = nodeList44.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable49 = null;
        Interface.WoodTotalValues woodTotalValues50 = null;
        Interface.AddWood addWood51 = null; // flaky: new Interface.AddWood(woodTable49, woodTotalValues50);
        java.util.ArrayList<javafx.scene.Node> nodeList52 = null; // flaky: addWood51.getAll();
        boolean boolean54 = false; // flaky: nodeList52.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node56 = null;
        javafx.scene.Node node57 = null; // flaky: nodeList52.set((int) (byte) 1, node56);
        boolean boolean58 = nodeList44.add(node57);
// flaky:         nodeList34.add(1, node57);
        int int60 = nodeList1.lastIndexOf((java.lang.Object) 1);
        java.util.ListIterator<javafx.scene.Node> nodeItor61 = nodeList1.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node63 = nodeList1.remove((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(nodeItor61);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList35.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList41);
        java.util.stream.Stream<javafx.scene.Node> nodeStream43 = null; // flaky: nodeList41.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator44 = null; // flaky: nodeList41.spliterator();
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        boolean boolean51 = nodeList46.isEmpty();
        boolean boolean52 = false; // flaky: nodeList41.contains((java.lang.Object) boolean51);
        boolean boolean53 = false; // flaky: nodeList7.addAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator54 = null; // flaky: nodeList7.spliterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream43);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator44);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator54);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.ListIterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList8.listIterator();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
        boolean boolean32 = false; // flaky: nodeList30.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node34 = null;
        javafx.scene.Node node35 = null; // flaky: nodeList30.set((int) (byte) 1, node34);
        boolean boolean36 = nodeList22.add(node35);
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood39.getAll();
        javafx.scene.Node[] nodeArray42 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList43 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList43, nodeArray42);
        boolean boolean45 = nodeList43.isEmpty();
        int int47 = nodeList43.lastIndexOf((java.lang.Object) 100);
        int int49 = nodeList43.lastIndexOf((java.lang.Object) 10);
        boolean boolean50 = false; // flaky: nodeList41.retainAll((java.util.Collection<javafx.scene.Node>) nodeList43);
        boolean boolean51 = nodeList22.removeAll((java.util.Collection<javafx.scene.Node>) nodeList43);
        Interface.WoodTable woodTable52 = null;
        Interface.WoodTotalValues woodTotalValues53 = null;
        Interface.AddWood addWood54 = null; // flaky: new Interface.AddWood(woodTable52, woodTotalValues53);
        java.util.ArrayList<javafx.scene.Node> nodeList55 = null; // flaky: addWood54.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList56 = null; // flaky: addWood54.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList57 = null; // flaky: addWood54.getAll();
        boolean boolean58 = false; // flaky: nodeList43.addAll((java.util.Collection<javafx.scene.Node>) nodeList57);
        boolean boolean59 = false; // flaky: nodeList8.removeAll((java.util.Collection<javafx.scene.Node>) nodeList43);
        java.util.stream.Stream<javafx.scene.Node> nodeStream60 = null; // flaky: nodeList8.stream();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node62 = null; // flaky: nodeList8.get(0);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList55);
// flaky:         org.junit.Assert.assertNotNull(nodeList56);
// flaky:         org.junit.Assert.assertNotNull(nodeList57);
// flaky:         org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeStream60);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        boolean boolean13 = false; // flaky: nodeList12.isEmpty();
        boolean boolean14 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        java.util.ListIterator<javafx.scene.Node> nodeItor16 = null; // flaky: nodeList1.listIterator(2);
        Interface.WoodTable woodTable17 = null;
        Interface.WoodTotalValues woodTotalValues18 = null;
        Interface.AddWood addWood19 = null; // flaky: new Interface.AddWood(woodTable17, woodTotalValues18);
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood19.getAll();
// flaky:         addWood19.redraw((double) 10.0f, (double) (-1L));
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood19.getAll();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator25 = null; // flaky: nodeList24.spliterator();
        boolean boolean26 = nodeList1.remove((java.lang.Object) nodeSpliterator25);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor16);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean30 = false; // flaky: nodeList23.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList29);
        java.util.stream.Stream<javafx.scene.Node> nodeStream31 = null; // flaky: nodeList29.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator32 = null; // flaky: nodeList29.spliterator();
        boolean boolean33 = false; // flaky: nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList29);
// flaky:         nodeList29.clear();
        java.lang.Object[] objArray35 = null; // flaky: nodeList29.toArray();
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList29.replaceAll(nodeUnaryOperator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream31);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(objArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        int int4 = 0; // flaky: nodeList2.indexOf((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray5 = null; // flaky: nodeList2.toArray();
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = false; // flaky: nodeList2.addAll((java.util.Collection<javafx.scene.Node>) nodeList9);
        javafx.scene.Node[] nodeArray13 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList14 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList14, nodeArray13);
        java.lang.Object obj16 = null;
        boolean boolean17 = nodeList14.remove(obj16);
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        boolean boolean24 = nodeList19.isEmpty();
        nodeList19.clear();
        boolean boolean26 = nodeList14.removeAll((java.util.Collection<javafx.scene.Node>) nodeList19);
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
// flaky:         addWood29.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood29.getAll();
        boolean boolean35 = false; // flaky: nodeList19.addAll((java.util.Collection<javafx.scene.Node>) nodeList34);
        javafx.scene.Node[] nodeArray36 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList37 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList37, nodeArray36);
        boolean boolean39 = nodeList37.isEmpty();
        boolean boolean40 = nodeList37.isEmpty();
        nodeList37.clear();
        boolean boolean42 = nodeList19.retainAll((java.util.Collection<javafx.scene.Node>) nodeList37);
        boolean boolean43 = false; // flaky: nodeList9.removeAll((java.util.Collection<javafx.scene.Node>) nodeList19);
        java.lang.Object[] objArray44 = nodeList19.toArray();
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable51 = null;
        Interface.WoodTotalValues woodTotalValues52 = null;
        Interface.AddWood addWood53 = null; // flaky: new Interface.AddWood(woodTable51, woodTotalValues52);
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood53.getAll();
        boolean boolean56 = false; // flaky: nodeList54.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node58 = null;
        javafx.scene.Node node59 = null; // flaky: nodeList54.set((int) (byte) 1, node58);
        boolean boolean60 = nodeList46.add(node59);
        javafx.scene.Node[] nodeArray62 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList63 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList63, nodeArray62);
        Interface.WoodTable woodTable66 = null;
        Interface.WoodTotalValues woodTotalValues67 = null;
        Interface.AddWood addWood68 = null; // flaky: new Interface.AddWood(woodTable66, woodTotalValues67);
        java.util.ArrayList<javafx.scene.Node> nodeList69 = null; // flaky: addWood68.getAll();
        boolean boolean70 = false; // flaky: nodeList63.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList69);
        int int72 = nodeList63.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray74 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList75 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList75, nodeArray74);
        boolean boolean77 = nodeList75.isEmpty();
        int int79 = nodeList75.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable80 = null;
        Interface.WoodTotalValues woodTotalValues81 = null;
        Interface.AddWood addWood82 = null; // flaky: new Interface.AddWood(woodTable80, woodTotalValues81);
        java.util.ArrayList<javafx.scene.Node> nodeList83 = null; // flaky: addWood82.getAll();
        boolean boolean85 = false; // flaky: nodeList83.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node87 = null;
        javafx.scene.Node node88 = null; // flaky: nodeList83.set((int) (byte) 1, node87);
        boolean boolean89 = nodeList75.add(node88);
        javafx.scene.Node node90 = null; // flaky: nodeList63.set((int) (short) 0, node88);
        javafx.scene.Node node91 = nodeList46.set((int) (byte) 0, node88);
        boolean boolean92 = nodeList19.add(node88);
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray5);
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
// flaky:         org.junit.Assert.assertNotNull(node90);
// flaky:         org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: woodTotalValues3.getAll();
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
// flaky:         addWood6.redraw((double) (short) 1, (double) (short) 100);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 0.0f, 0.0d);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        boolean boolean13 = false; // flaky: nodeList6.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList12);
        java.util.stream.Stream<javafx.scene.Node> nodeStream14 = null; // flaky: nodeList12.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator15 = null; // flaky: nodeList12.spliterator();
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = false; // flaky: nodeList12.removeAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        int int22 = nodeList1.lastIndexOf((java.lang.Object) nodeList17);
        nodeList1.clear();
        java.util.Collection<javafx.scene.Node> nodeCollection25 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = nodeList1.addAll((int) (short) 0, nodeCollection25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream14);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator31 = nodeList1.spliterator();
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        boolean boolean35 = nodeList33.isEmpty();
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood38.getAll();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        boolean boolean44 = nodeList42.isEmpty();
        int int46 = nodeList42.lastIndexOf((java.lang.Object) 100);
        int int48 = nodeList42.lastIndexOf((java.lang.Object) 10);
        boolean boolean49 = false; // flaky: nodeList40.retainAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        boolean boolean50 = false; // flaky: nodeList33.removeAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        boolean boolean51 = false; // flaky: nodeList40.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor52 = null; // flaky: nodeList40.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor54 = null; // flaky: nodeList40.listIterator(0);
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        boolean boolean58 = nodeList56.isEmpty();
        Interface.WoodTable woodTable59 = null;
        Interface.WoodTotalValues woodTotalValues60 = null;
        Interface.AddWood addWood61 = null; // flaky: new Interface.AddWood(woodTable59, woodTotalValues60);
        java.util.ArrayList<javafx.scene.Node> nodeList62 = null; // flaky: addWood61.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: addWood61.getAll();
        javafx.scene.Node[] nodeArray64 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList65 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList65, nodeArray64);
        boolean boolean67 = nodeList65.isEmpty();
        int int69 = nodeList65.lastIndexOf((java.lang.Object) 100);
        int int71 = nodeList65.lastIndexOf((java.lang.Object) 10);
        boolean boolean72 = false; // flaky: nodeList63.retainAll((java.util.Collection<javafx.scene.Node>) nodeList65);
        boolean boolean73 = false; // flaky: nodeList56.removeAll((java.util.Collection<javafx.scene.Node>) nodeList63);
        java.util.List<javafx.scene.Node> nodeList76 = null; // flaky: nodeList63.subList(0, (int) (byte) 0);
        boolean boolean77 = false; // flaky: nodeList40.contains((java.lang.Object) nodeList76);
        javafx.scene.Node[] nodeArray78 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList79 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList79, nodeArray78);
        java.lang.Object obj81 = null;
        boolean boolean82 = nodeList79.remove(obj81);
        boolean boolean83 = nodeList79.isEmpty();
        java.lang.String[] strArray86 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray87 = nodeList79.toArray(strArray86);
        boolean boolean88 = false; // flaky: nodeList40.equals((java.lang.Object) strArray87);
        boolean boolean89 = false; // flaky: nodeList1.addAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator31);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor52);
// flaky:         org.junit.Assert.assertNotNull(nodeItor54);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList62);
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList1.equals((java.lang.Object) nodeList6);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
// flaky:         addWood14.redraw((double) 10.0f, (double) 0L);
        boolean boolean19 = nodeList1.contains((java.lang.Object) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList22 = nodeList1.subList((int) '#', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        int int21 = nodeList17.size();
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean30 = false; // flaky: nodeList23.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList29);
        boolean boolean31 = nodeList17.retainAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        boolean boolean32 = false; // flaky: nodeList4.removeAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        java.util.ListIterator<javafx.scene.Node> nodeItor33 = null; // flaky: nodeList4.listIterator();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor33);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
        java.util.Iterator<javafx.scene.Node> nodeItor4 = null; // flaky: nodeList3.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor5 = null; // flaky: nodeList3.listIterator();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        boolean boolean9 = nodeList7.isEmpty();
        int int11 = nodeList7.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
        boolean boolean17 = false; // flaky: nodeList15.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node19 = null;
        javafx.scene.Node node20 = null; // flaky: nodeList15.set((int) (byte) 1, node19);
        boolean boolean21 = nodeList7.add(node20);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = nodeList23.remove(obj25);
        boolean boolean27 = nodeList7.retainAll((java.util.Collection<javafx.scene.Node>) nodeList23);
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        Interface.WoodTable woodTable32 = null;
        Interface.WoodTotalValues woodTotalValues33 = null;
        Interface.AddWood addWood34 = null; // flaky: new Interface.AddWood(woodTable32, woodTotalValues33);
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood34.getAll();
        boolean boolean36 = false; // flaky: nodeList29.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList35);
        java.util.stream.Stream<javafx.scene.Node> nodeStream37 = null; // flaky: nodeList35.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator38 = null; // flaky: nodeList35.spliterator();
        boolean boolean39 = false; // flaky: nodeList7.addAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        java.util.Iterator<javafx.scene.Node> nodeItor40 = null; // flaky: nodeList35.iterator();
        boolean boolean41 = false; // flaky: nodeList3.removeAll((java.util.Collection<javafx.scene.Node>) nodeList35);
        Interface.WoodTable woodTable42 = null;
        Interface.WoodTotalValues woodTotalValues43 = null; // flaky: new Interface.WoodTotalValues(woodTable42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: woodTotalValues43.getAll();
        int int46 = 0; // flaky: nodeList44.indexOf((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray47 = null; // flaky: nodeList44.toArray();
        Interface.WoodTable woodTable48 = null;
        Interface.WoodTotalValues woodTotalValues49 = null;
        Interface.AddWood addWood50 = null; // flaky: new Interface.AddWood(woodTable48, woodTotalValues49);
        java.util.ArrayList<javafx.scene.Node> nodeList51 = null; // flaky: addWood50.getAll();
        boolean boolean53 = false; // flaky: nodeList51.equals((java.lang.Object) (byte) 1);
        boolean boolean54 = false; // flaky: nodeList44.addAll((java.util.Collection<javafx.scene.Node>) nodeList51);
        boolean boolean55 = false; // flaky: nodeList3.containsAll((java.util.Collection<javafx.scene.Node>) nodeList44);
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeItor4);
// flaky:         org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream37);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator38);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray47);
// flaky:         org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        int int5 = nodeList1.size();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        boolean boolean15 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream16 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = nodeList18.remove(obj20);
        javafx.scene.Node node22 = null;
        boolean boolean23 = nodeList18.add(node22);
        int int25 = nodeList18.indexOf((java.lang.Object) (short) 10);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
// flaky:         addWood28.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood28.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood28.getAll();
        javafx.scene.Node[] nodeArray35 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList36 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList36, nodeArray35);
        java.lang.Object obj38 = null;
        boolean boolean39 = nodeList36.remove(obj38);
        javafx.scene.Node node40 = null;
        boolean boolean41 = nodeList36.add(node40);
        java.util.ListIterator<javafx.scene.Node> nodeItor42 = nodeList36.listIterator();
        boolean boolean43 = false; // flaky: nodeList34.contains((java.lang.Object) nodeList36);
        java.util.ListIterator<javafx.scene.Node> nodeItor44 = nodeList36.listIterator();
        boolean boolean45 = nodeList18.remove((java.lang.Object) nodeList36);
        java.lang.Object[] objArray46 = nodeList36.toArray();
        boolean boolean47 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        Interface.WoodTable woodTable48 = null;
        Interface.WoodTotalValues woodTotalValues49 = null; // flaky: new Interface.WoodTotalValues(woodTable48);
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: woodTotalValues49.getAll();
        Interface.WoodTable woodTable51 = null;
        Interface.WoodTotalValues woodTotalValues52 = null;
        Interface.AddWood addWood53 = null; // flaky: new Interface.AddWood(woodTable51, woodTotalValues52);
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood53.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList55 = null; // flaky: addWood53.getAll();
        int int56 = 0; // flaky: nodeList50.indexOf((java.lang.Object) addWood53);
        java.util.ArrayList<javafx.scene.Node> nodeList57 = null; // flaky: addWood53.getAll();
        boolean boolean58 = nodeList1.remove((java.lang.Object) addWood53);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeStream16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(nodeItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[null]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
// flaky:         org.junit.Assert.assertNotNull(nodeList55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        int int9 = 0; // flaky: nodeList8.size();
        Interface.WoodTable woodTable11 = null;
        Interface.WoodTotalValues woodTotalValues12 = null;
        Interface.AddWood addWood13 = null; // flaky: new Interface.AddWood(woodTable11, woodTotalValues12);
        java.util.ArrayList<javafx.scene.Node> nodeList14 = null; // flaky: addWood13.getAll();
        boolean boolean15 = false; // flaky: nodeList14.isEmpty();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList35.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList41);
        int int44 = nodeList35.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        boolean boolean49 = nodeList47.isEmpty();
        int int51 = nodeList47.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable52 = null;
        Interface.WoodTotalValues woodTotalValues53 = null;
        Interface.AddWood addWood54 = null; // flaky: new Interface.AddWood(woodTable52, woodTotalValues53);
        java.util.ArrayList<javafx.scene.Node> nodeList55 = null; // flaky: addWood54.getAll();
        boolean boolean57 = false; // flaky: nodeList55.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node59 = null;
        javafx.scene.Node node60 = null; // flaky: nodeList55.set((int) (byte) 1, node59);
        boolean boolean61 = nodeList47.add(node60);
        javafx.scene.Node node62 = null; // flaky: nodeList35.set((int) (short) 0, node60);
        javafx.scene.Node node63 = nodeList18.set((int) (byte) 0, node60);
// flaky:         nodeList14.add((int) (short) 0, node63);
        boolean boolean65 = false; // flaky: nodeList8.addAll((int) (byte) 0, (java.util.Collection<javafx.scene.Node>) nodeList14);
        boolean boolean66 = false; // flaky: nodeList14.isEmpty();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
// flaky:         org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertNotNull(node62);
// flaky:         org.junit.Assert.assertNotNull(node63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
// flaky:         woodTotalValues1.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: woodTotalValues1.getAll();
        java.util.stream.Stream<javafx.scene.Node> nodeStream6 = null; // flaky: nodeList5.stream();
        Interface.WoodTable woodTable7 = null;
        Interface.WoodTotalValues woodTotalValues8 = null; // flaky: new Interface.WoodTotalValues(woodTable7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: woodTotalValues8.getAll();
// flaky:         woodTotalValues8.redraw((double) 0L, (double) 100.0f);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: woodTotalValues8.getAll();
        java.lang.Object obj14 = null;
        int int15 = 0; // flaky: nodeList13.indexOf(obj14);
        boolean boolean16 = false; // flaky: nodeList5.equals((java.lang.Object) int15);
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
// flaky:         org.junit.Assert.assertNotNull(nodeStream6);
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        boolean boolean17 = nodeList15.isEmpty();
        int int19 = nodeList15.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        boolean boolean25 = false; // flaky: nodeList23.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node27 = null;
        javafx.scene.Node node28 = null; // flaky: nodeList23.set((int) (byte) 1, node27);
        boolean boolean29 = nodeList15.add(node28);
        java.util.stream.Stream<javafx.scene.Node> nodeStream30 = nodeList15.stream();
        boolean boolean31 = nodeList6.equals((java.lang.Object) nodeStream30);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node33 = nodeList6.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        int int5 = 0; // flaky: nodeList4.size();
        java.util.stream.Stream<javafx.scene.Node> nodeStream6 = null; // flaky: nodeList4.parallelStream();
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList4.replaceAll(nodeUnaryOperator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
// flaky:         org.junit.Assert.assertNotNull(nodeStream6);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        int int9 = 0; // flaky: nodeList8.size();
        Interface.WoodTable woodTable11 = null;
        Interface.WoodTotalValues woodTotalValues12 = null;
        Interface.AddWood addWood13 = null; // flaky: new Interface.AddWood(woodTable11, woodTotalValues12);
        java.util.ArrayList<javafx.scene.Node> nodeList14 = null; // flaky: addWood13.getAll();
        boolean boolean15 = false; // flaky: nodeList14.isEmpty();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList35.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList41);
        int int44 = nodeList35.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        boolean boolean49 = nodeList47.isEmpty();
        int int51 = nodeList47.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable52 = null;
        Interface.WoodTotalValues woodTotalValues53 = null;
        Interface.AddWood addWood54 = null; // flaky: new Interface.AddWood(woodTable52, woodTotalValues53);
        java.util.ArrayList<javafx.scene.Node> nodeList55 = null; // flaky: addWood54.getAll();
        boolean boolean57 = false; // flaky: nodeList55.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node59 = null;
        javafx.scene.Node node60 = null; // flaky: nodeList55.set((int) (byte) 1, node59);
        boolean boolean61 = nodeList47.add(node60);
        javafx.scene.Node node62 = null; // flaky: nodeList35.set((int) (short) 0, node60);
        javafx.scene.Node node63 = nodeList18.set((int) (byte) 0, node60);
// flaky:         nodeList14.add((int) (short) 0, node63);
        boolean boolean65 = false; // flaky: nodeList8.addAll((int) (byte) 0, (java.util.Collection<javafx.scene.Node>) nodeList14);
        int int67 = 0; // flaky: nodeList8.indexOf((java.lang.Object) 11);
        javafx.scene.Node[] nodeArray68 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList69 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList69, nodeArray68);
        boolean boolean71 = nodeList69.isEmpty();
        int int73 = nodeList69.lastIndexOf((java.lang.Object) 100);
        int int75 = nodeList69.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable76 = null;
        Interface.WoodTotalValues woodTotalValues77 = null;
        Interface.AddWood addWood78 = null; // flaky: new Interface.AddWood(woodTable76, woodTotalValues77);
        java.util.ArrayList<javafx.scene.Node> nodeList79 = null; // flaky: addWood78.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList80 = null; // flaky: addWood78.getAll();
        javafx.scene.Node[] nodeArray81 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList82 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList82, nodeArray81);
        boolean boolean84 = nodeList82.isEmpty();
        int int86 = nodeList82.lastIndexOf((java.lang.Object) 100);
        int int88 = nodeList82.lastIndexOf((java.lang.Object) 10);
        boolean boolean89 = false; // flaky: nodeList80.retainAll((java.util.Collection<javafx.scene.Node>) nodeList82);
        boolean boolean90 = nodeList69.containsAll((java.util.Collection<javafx.scene.Node>) nodeList82);
        java.util.ListIterator<javafx.scene.Node> nodeItor92 = nodeList69.listIterator(0);
        boolean boolean93 = false; // flaky: nodeList8.removeAll((java.util.Collection<javafx.scene.Node>) nodeList69);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
// flaky:         org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertNotNull(node62);
// flaky:         org.junit.Assert.assertNotNull(node63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList79);
// flaky:         org.junit.Assert.assertNotNull(nodeList80);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(nodeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        Interface.WoodTable woodTable3 = null;
        Interface.WoodTotalValues woodTotalValues4 = null;
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable3, woodTotalValues4);
        java.util.ArrayList<javafx.scene.Node> nodeList6 = null; // flaky: addWood5.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood5.getAll();
        int int8 = 0; // flaky: nodeList2.indexOf((java.lang.Object) addWood5);
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = nodeList10.isEmpty();
        boolean boolean18 = false; // flaky: nodeList2.contains((java.lang.Object) nodeList10);
        boolean boolean19 = nodeList10.isEmpty();
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList6);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        Interface.AddWood addWood3 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: woodTotalValues2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = nodeList6.remove(obj8);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        boolean boolean18 = false; // flaky: nodeList11.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList17);
        java.util.stream.Stream<javafx.scene.Node> nodeStream19 = null; // flaky: nodeList17.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator20 = null; // flaky: nodeList17.spliterator();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        java.lang.Object obj24 = null;
        boolean boolean25 = nodeList22.remove(obj24);
        boolean boolean26 = false; // flaky: nodeList17.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        int int27 = nodeList6.lastIndexOf((java.lang.Object) nodeList22);
        nodeList6.clear();
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        java.lang.Object obj32 = null;
        boolean boolean33 = nodeList30.remove(obj32);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        boolean boolean37 = nodeList35.isEmpty();
        int int39 = nodeList35.lastIndexOf((java.lang.Object) 100);
        boolean boolean40 = nodeList30.equals((java.lang.Object) nodeList35);
        java.lang.Object obj41 = null;
        int int42 = nodeList30.lastIndexOf(obj41);
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        java.lang.Object obj46 = null;
        boolean boolean47 = nodeList44.remove(obj46);
        javafx.scene.Node[] nodeArray48 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList49 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList49, nodeArray48);
        boolean boolean51 = nodeList49.isEmpty();
        int int53 = nodeList49.lastIndexOf((java.lang.Object) 100);
        boolean boolean54 = nodeList44.equals((java.lang.Object) nodeList49);
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        boolean boolean58 = nodeList56.isEmpty();
        int int60 = nodeList56.lastIndexOf((java.lang.Object) 100);
        int int62 = nodeList56.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor63 = nodeList56.listIterator();
        int int64 = nodeList44.indexOf((java.lang.Object) nodeList56);
        int int65 = nodeList30.lastIndexOf((java.lang.Object) nodeList56);
        java.util.ArrayList[] arrayListArray67 = new java.util.ArrayList[1];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<javafx.scene.Node>[] nodeListArray68 = (java.util.ArrayList<javafx.scene.Node>[]) arrayListArray67;
        nodeListArray68[0] = nodeList56;
        java.util.ArrayList<javafx.scene.Node>[] nodeListArray71 = nodeList6.toArray(nodeListArray68);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<javafx.scene.Node>[] nodeListArray72 = null; // flaky: nodeList4.toArray(nodeListArray71);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream19);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(nodeItor63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(arrayListArray67);
        org.junit.Assert.assertNotNull(nodeListArray68);
        org.junit.Assert.assertNotNull(nodeListArray71);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        int int4 = 0; // flaky: nodeList2.indexOf((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray5 = null; // flaky: nodeList2.toArray();
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = false; // flaky: nodeList2.addAll((java.util.Collection<javafx.scene.Node>) nodeList9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<javafx.scene.Node> nodeList15 = null; // flaky: nodeList2.subList((int) (short) 100, 0);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray5);
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        java.lang.Object obj12 = null;
        boolean boolean13 = nodeList10.remove(obj12);
        javafx.scene.Node node14 = null;
        boolean boolean15 = nodeList10.add(node14);
        java.util.ListIterator<javafx.scene.Node> nodeItor16 = nodeList10.listIterator();
        boolean boolean17 = false; // flaky: nodeList8.contains((java.lang.Object) nodeList10);
        java.util.ListIterator<javafx.scene.Node> nodeItor18 = nodeList10.listIterator();
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = nodeList21.remove(obj23);
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        boolean boolean28 = nodeList26.isEmpty();
        int int30 = nodeList26.lastIndexOf((java.lang.Object) 100);
        boolean boolean31 = nodeList26.isEmpty();
        nodeList26.clear();
        boolean boolean33 = nodeList21.removeAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
// flaky:         addWood36.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood36.getAll();
        boolean boolean42 = false; // flaky: nodeList26.addAll((java.util.Collection<javafx.scene.Node>) nodeList41);
        javafx.scene.Node node44 = null; // flaky: nodeList26.remove((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node45 = nodeList10.set((int) (byte) 10, node44);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeItor18);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertNotNull(node44);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood6.getAll();
        javafx.scene.Node[] nodeArray9 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList10 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList10, nodeArray9);
        boolean boolean12 = nodeList10.isEmpty();
        int int14 = nodeList10.lastIndexOf((java.lang.Object) 100);
        int int16 = nodeList10.lastIndexOf((java.lang.Object) 10);
        boolean boolean17 = false; // flaky: nodeList8.retainAll((java.util.Collection<javafx.scene.Node>) nodeList10);
        boolean boolean18 = false; // flaky: nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList8);
        boolean boolean19 = false; // flaky: nodeList8.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList8.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor22 = null; // flaky: nodeList8.listIterator(0);
        java.lang.Class<?> wildcardClass23 = null; // flaky: nodeList8.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
// flaky:         org.junit.Assert.assertNotNull(nodeItor22);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        boolean boolean13 = false; // flaky: nodeList6.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        boolean boolean18 = nodeList16.isEmpty();
        int int20 = nodeList16.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean26 = false; // flaky: nodeList24.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node28 = null;
        javafx.scene.Node node29 = null; // flaky: nodeList24.set((int) (byte) 1, node28);
        boolean boolean30 = nodeList16.add(node29);
// flaky:         nodeList6.add(1, node29);
        boolean boolean32 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        java.util.stream.Stream<javafx.scene.Node> nodeStream33 = nodeList1.parallelStream();
        int int34 = nodeList1.size();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeStream33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        int int19 = nodeList13.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood22.getAll();
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        boolean boolean28 = nodeList26.isEmpty();
        int int30 = nodeList26.lastIndexOf((java.lang.Object) 100);
        int int32 = nodeList26.lastIndexOf((java.lang.Object) 10);
        boolean boolean33 = false; // flaky: nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        boolean boolean34 = nodeList13.containsAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = false; // flaky: nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        int int45 = nodeList1.lastIndexOf((java.lang.Object) nodeList13);
        Interface.WoodTable woodTable46 = null;
        Interface.WoodTotalValues woodTotalValues47 = null; // flaky: new Interface.WoodTotalValues(woodTable46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: woodTotalValues47.getAll();
        int int49 = nodeList13.lastIndexOf((java.lang.Object) woodTotalValues47);
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: woodTotalValues47.getAll();
        Interface.WoodTable woodTable51 = null;
        Interface.WoodTotalValues woodTotalValues52 = null; // flaky: new Interface.WoodTotalValues(woodTable51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: woodTotalValues52.getAll();
        int int55 = 0; // flaky: nodeList53.indexOf((java.lang.Object) (byte) 0);
        java.util.ListIterator<javafx.scene.Node> nodeItor56 = null; // flaky: nodeList53.listIterator();
        int int57 = 0; // flaky: nodeList50.indexOf((java.lang.Object) nodeList53);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeItor56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        Interface.WoodTable woodTable17 = null;
        Interface.WoodTotalValues woodTotalValues18 = null;
        Interface.AddWood addWood19 = null; // flaky: new Interface.AddWood(woodTable17, woodTotalValues18);
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood19.getAll();
// flaky:         addWood19.redraw((double) 10.0f, (double) (-1L));
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood19.getAll();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator25 = null; // flaky: nodeList24.spliterator();
        int int26 = 0; // flaky: nodeList7.lastIndexOf((java.lang.Object) nodeSpliterator25);
        javafx.scene.Node[] nodeArray27 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList28 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList28, nodeArray27);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        boolean boolean35 = false; // flaky: nodeList28.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList34);
        java.util.stream.Stream<javafx.scene.Node> nodeStream36 = null; // flaky: nodeList34.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator37 = null; // flaky: nodeList34.spliterator();
        javafx.scene.Node[] nodeArray38 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList39 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList39, nodeArray38);
        java.lang.Object obj41 = null;
        boolean boolean42 = nodeList39.remove(obj41);
        boolean boolean43 = false; // flaky: nodeList34.removeAll((java.util.Collection<javafx.scene.Node>) nodeList39);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        boolean boolean47 = nodeList45.isEmpty();
        int int49 = nodeList45.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable50 = null;
        Interface.WoodTotalValues woodTotalValues51 = null;
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable50, woodTotalValues51);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        boolean boolean55 = false; // flaky: nodeList53.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node57 = null;
        javafx.scene.Node node58 = null; // flaky: nodeList53.set((int) (byte) 1, node57);
        boolean boolean59 = nodeList45.add(node58);
        boolean boolean60 = false; // flaky: nodeList34.add(node58);
        Interface.WoodTable woodTable62 = null;
        Interface.WoodTotalValues woodTotalValues63 = null;
        Interface.AddWood addWood64 = null; // flaky: new Interface.AddWood(woodTable62, woodTotalValues63);
        java.util.ArrayList<javafx.scene.Node> nodeList65 = null; // flaky: addWood64.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList66 = null; // flaky: addWood64.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList67 = null; // flaky: addWood64.getAll();
        javafx.scene.Node[] nodeArray69 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList70 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList70, nodeArray69);
        boolean boolean72 = nodeList70.isEmpty();
        int int74 = nodeList70.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable75 = null;
        Interface.WoodTotalValues woodTotalValues76 = null;
        Interface.AddWood addWood77 = null; // flaky: new Interface.AddWood(woodTable75, woodTotalValues76);
        java.util.ArrayList<javafx.scene.Node> nodeList78 = null; // flaky: addWood77.getAll();
        boolean boolean80 = false; // flaky: nodeList78.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node82 = null;
        javafx.scene.Node node83 = null; // flaky: nodeList78.set((int) (byte) 1, node82);
        boolean boolean84 = nodeList70.add(node83);
        javafx.scene.Node node85 = null; // flaky: nodeList67.set((int) (short) 0, node83);
// flaky:         nodeList34.add(5, node83);
        Interface.WoodTable woodTable87 = null;
        Interface.WoodTotalValues woodTotalValues88 = null;
        Interface.AddWood addWood89 = null; // flaky: new Interface.AddWood(woodTable87, woodTotalValues88);
        java.util.ArrayList<javafx.scene.Node> nodeList90 = null; // flaky: addWood89.getAll();
        boolean boolean92 = false; // flaky: nodeList90.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node94 = null;
        javafx.scene.Node node95 = null; // flaky: nodeList90.set((int) (byte) 1, node94);
        boolean boolean96 = false; // flaky: nodeList34.remove((java.lang.Object) node95);
        boolean boolean97 = false; // flaky: nodeList7.add(node95);
// flaky:         nodeList7.clear();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream36);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator37);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList65);
// flaky:         org.junit.Assert.assertNotNull(nodeList66);
// flaky:         org.junit.Assert.assertNotNull(nodeList67);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
// flaky:         org.junit.Assert.assertNotNull(node85);
// flaky:         org.junit.Assert.assertNotNull(nodeList90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
// flaky:         org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
// flaky:         woodTotalValues3.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: woodTotalValues3.getAll();
// flaky:         woodTotalValues3.redraw(1.0d, (double) (-1L));
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: woodTotalValues3.getAll();
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues3.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList13.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList19);
        java.util.stream.Stream<javafx.scene.Node> nodeStream21 = null; // flaky: nodeList19.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator22 = null; // flaky: nodeList19.spliterator();
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        java.lang.Object obj26 = null;
        boolean boolean27 = nodeList24.remove(obj26);
        boolean boolean28 = false; // flaky: nodeList19.removeAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood31.getAll();
        int int34 = 0; // flaky: nodeList33.size();
        boolean boolean35 = false; // flaky: nodeList19.containsAll((java.util.Collection<javafx.scene.Node>) nodeList33);
        boolean boolean36 = false; // flaky: nodeList1.addAll((int) (short) 0, (java.util.Collection<javafx.scene.Node>) nodeList33);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream21);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        javafx.scene.Node[] nodeArray8 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList9 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList9, nodeArray8);
        boolean boolean11 = nodeList9.isEmpty();
        int int13 = nodeList9.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        boolean boolean19 = false; // flaky: nodeList17.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node21 = null;
        javafx.scene.Node node22 = null; // flaky: nodeList17.set((int) (byte) 1, node21);
        boolean boolean23 = nodeList9.add(node22);
        java.util.stream.Stream<javafx.scene.Node> nodeStream24 = nodeList9.stream();
        javafx.scene.Node node25 = null;
        boolean boolean26 = nodeList9.add(node25);
        boolean boolean27 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList9);
        java.lang.Object[] objArray28 = nodeList1.toArray();
        java.util.stream.Stream<javafx.scene.Node> nodeStream29 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = nodeList32.remove(obj34);
        javafx.scene.Node[] nodeArray36 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList37 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList37, nodeArray36);
        boolean boolean39 = nodeList37.isEmpty();
        int int41 = nodeList37.lastIndexOf((java.lang.Object) 100);
        boolean boolean42 = nodeList32.equals((java.lang.Object) nodeList37);
        Interface.WoodTable woodTable43 = null;
        Interface.WoodTotalValues woodTotalValues44 = null;
        Interface.AddWood addWood45 = null; // flaky: new Interface.AddWood(woodTable43, woodTotalValues44);
        java.util.ArrayList<javafx.scene.Node> nodeList46 = null; // flaky: addWood45.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList47 = null; // flaky: addWood45.getAll();
        javafx.scene.Node[] nodeArray48 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList49 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList49, nodeArray48);
        boolean boolean51 = nodeList49.isEmpty();
        int int53 = nodeList49.lastIndexOf((java.lang.Object) 100);
        int int55 = nodeList49.lastIndexOf((java.lang.Object) 10);
        boolean boolean56 = false; // flaky: nodeList47.retainAll((java.util.Collection<javafx.scene.Node>) nodeList49);
        javafx.scene.Node[] nodeArray57 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList58 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList58, nodeArray57);
        java.lang.Object obj60 = null;
        boolean boolean61 = nodeList58.remove(obj60);
        boolean boolean62 = nodeList58.isEmpty();
        javafx.scene.Node[] nodeArray63 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList64 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList64, nodeArray63);
        Interface.WoodTable woodTable67 = null;
        Interface.WoodTotalValues woodTotalValues68 = null;
        Interface.AddWood addWood69 = null; // flaky: new Interface.AddWood(woodTable67, woodTotalValues68);
        java.util.ArrayList<javafx.scene.Node> nodeList70 = null; // flaky: addWood69.getAll();
        boolean boolean71 = false; // flaky: nodeList64.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList70);
        int int73 = nodeList64.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray75 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList76 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList76, nodeArray75);
        boolean boolean78 = nodeList76.isEmpty();
        int int80 = nodeList76.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable81 = null;
        Interface.WoodTotalValues woodTotalValues82 = null;
        Interface.AddWood addWood83 = null; // flaky: new Interface.AddWood(woodTable81, woodTotalValues82);
        java.util.ArrayList<javafx.scene.Node> nodeList84 = null; // flaky: addWood83.getAll();
        boolean boolean86 = false; // flaky: nodeList84.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node88 = null;
        javafx.scene.Node node89 = null; // flaky: nodeList84.set((int) (byte) 1, node88);
        boolean boolean90 = nodeList76.add(node89);
        javafx.scene.Node node91 = null; // flaky: nodeList64.set((int) (short) 0, node89);
        boolean boolean92 = nodeList58.add(node91);
        boolean boolean94 = nodeList58.remove((java.lang.Object) 100L);
        boolean boolean95 = nodeList49.remove((java.lang.Object) boolean94);
        boolean boolean96 = nodeList32.addAll((java.util.Collection<javafx.scene.Node>) nodeList49);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = nodeList1.addAll((int) (byte) 100, (java.util.Collection<javafx.scene.Node>) nodeList32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeStream24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(nodeStream29);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList46);
// flaky:         org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList70);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
// flaky:         org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        boolean boolean6 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream7 = nodeList1.parallelStream();
        Interface.WoodTable woodTable8 = null;
        Interface.WoodTotalValues woodTotalValues9 = null; // flaky: new Interface.WoodTotalValues(woodTable8);
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: woodTotalValues9.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: woodTotalValues9.getAll();
// flaky:         woodTotalValues9.redraw((double) (short) 100, 10.0d);
        boolean boolean15 = nodeList1.contains((java.lang.Object) (short) 100);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeStream7);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((double) 11, (double) 'a');
// flaky:         woodTotalValues1.redraw(0.0d, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues1.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        int int24 = 0; // flaky: nodeList4.size();
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        boolean boolean33 = false; // flaky: nodeList26.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList32);
        java.util.stream.Stream<javafx.scene.Node> nodeStream34 = null; // flaky: nodeList32.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator35 = null; // flaky: nodeList32.spliterator();
        javafx.scene.Node[] nodeArray36 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList37 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList37, nodeArray36);
        java.lang.Object obj39 = null;
        boolean boolean40 = nodeList37.remove(obj39);
        boolean boolean41 = false; // flaky: nodeList32.removeAll((java.util.Collection<javafx.scene.Node>) nodeList37);
        javafx.scene.Node[] nodeArray42 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList43 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList43, nodeArray42);
        boolean boolean45 = nodeList43.isEmpty();
        int int47 = nodeList43.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable48 = null;
        Interface.WoodTotalValues woodTotalValues49 = null;
        Interface.AddWood addWood50 = null; // flaky: new Interface.AddWood(woodTable48, woodTotalValues49);
        java.util.ArrayList<javafx.scene.Node> nodeList51 = null; // flaky: addWood50.getAll();
        boolean boolean53 = false; // flaky: nodeList51.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node55 = null;
        javafx.scene.Node node56 = null; // flaky: nodeList51.set((int) (byte) 1, node55);
        boolean boolean57 = nodeList43.add(node56);
        boolean boolean58 = false; // flaky: nodeList32.add(node56);
        javafx.scene.Node[] nodeArray59 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList60 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList60, nodeArray59);
        Interface.WoodTable woodTable63 = null;
        Interface.WoodTotalValues woodTotalValues64 = null;
        Interface.AddWood addWood65 = null; // flaky: new Interface.AddWood(woodTable63, woodTotalValues64);
        java.util.ArrayList<javafx.scene.Node> nodeList66 = null; // flaky: addWood65.getAll();
        boolean boolean67 = false; // flaky: nodeList60.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList66);
        java.util.stream.Stream<javafx.scene.Node> nodeStream68 = null; // flaky: nodeList66.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator69 = null; // flaky: nodeList66.spliterator();
        javafx.scene.Node[] nodeArray70 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList71 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList71, nodeArray70);
        boolean boolean73 = nodeList71.isEmpty();
        int int75 = nodeList71.lastIndexOf((java.lang.Object) 100);
        boolean boolean76 = nodeList71.isEmpty();
        boolean boolean77 = false; // flaky: nodeList66.contains((java.lang.Object) boolean76);
        boolean boolean78 = false; // flaky: nodeList32.addAll((java.util.Collection<javafx.scene.Node>) nodeList66);
        int int79 = 0; // flaky: nodeList32.size();
        boolean boolean80 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor82 = null; // flaky: nodeList4.listIterator((int) 'a');
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream34);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator35);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream68);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator69);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 11 + "'", int79 == 11);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        java.util.stream.Stream<javafx.scene.Node> nodeStream16 = null; // flaky: nodeList4.parallelStream();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean25 = false; // flaky: nodeList18.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList24);
        java.util.stream.Stream<javafx.scene.Node> nodeStream26 = null; // flaky: nodeList24.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator27 = null; // flaky: nodeList24.spliterator();
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        java.lang.Object obj31 = null;
        boolean boolean32 = nodeList29.remove(obj31);
        boolean boolean33 = false; // flaky: nodeList24.removeAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        boolean boolean37 = nodeList35.isEmpty();
        int int39 = nodeList35.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null;
        Interface.AddWood addWood42 = null; // flaky: new Interface.AddWood(woodTable40, woodTotalValues41);
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: addWood42.getAll();
        boolean boolean45 = false; // flaky: nodeList43.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node47 = null;
        javafx.scene.Node node48 = null; // flaky: nodeList43.set((int) (byte) 1, node47);
        boolean boolean49 = nodeList35.add(node48);
        boolean boolean50 = false; // flaky: nodeList24.add(node48);
        javafx.scene.Node[] nodeArray51 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList52 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList52, nodeArray51);
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTotalValues woodTotalValues56 = null;
        Interface.AddWood addWood57 = null; // flaky: new Interface.AddWood(woodTable55, woodTotalValues56);
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: addWood57.getAll();
        boolean boolean59 = false; // flaky: nodeList52.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList58);
        java.util.stream.Stream<javafx.scene.Node> nodeStream60 = null; // flaky: nodeList58.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator61 = null; // flaky: nodeList58.spliterator();
        javafx.scene.Node[] nodeArray62 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList63 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList63, nodeArray62);
        boolean boolean65 = nodeList63.isEmpty();
        int int67 = nodeList63.lastIndexOf((java.lang.Object) 100);
        boolean boolean68 = nodeList63.isEmpty();
        boolean boolean69 = false; // flaky: nodeList58.contains((java.lang.Object) boolean68);
        boolean boolean70 = false; // flaky: nodeList24.addAll((java.util.Collection<javafx.scene.Node>) nodeList58);
        int int71 = 0; // flaky: nodeList24.size();
        javafx.scene.Node node73 = null; // flaky: nodeList24.remove(2);
        int int74 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) 2);
        java.util.stream.Stream<javafx.scene.Node> nodeStream75 = null; // flaky: nodeList4.stream();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeStream16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream26);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream60);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator61);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 11 + "'", int71 == 11);
// flaky:         org.junit.Assert.assertNotNull(node73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeStream75);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood33.getAll();
        boolean boolean37 = false; // flaky: nodeList22.addAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator38 = nodeList22.spliterator();
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        boolean boolean43 = nodeList22.containsAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator44 = nodeList22.spliterator();
        int int46 = nodeList22.indexOf((java.lang.Object) 11);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        boolean boolean22 = nodeList1.isEmpty();
        java.util.Iterator<javafx.scene.Node> nodeItor23 = nodeList1.iterator();
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
// flaky:         addWood26.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood26.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood26.getAll();
        java.util.stream.Stream<javafx.scene.Node> nodeStream33 = null; // flaky: nodeList32.parallelStream();
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        boolean boolean37 = nodeList35.isEmpty();
        int int39 = nodeList35.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable40 = null;
        Interface.WoodTotalValues woodTotalValues41 = null;
        Interface.AddWood addWood42 = null; // flaky: new Interface.AddWood(woodTable40, woodTotalValues41);
        java.util.ArrayList<javafx.scene.Node> nodeList43 = null; // flaky: addWood42.getAll();
        boolean boolean45 = false; // flaky: nodeList43.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node47 = null;
        javafx.scene.Node node48 = null; // flaky: nodeList43.set((int) (byte) 1, node47);
        boolean boolean49 = nodeList35.add(node48);
        javafx.scene.Node[] nodeArray50 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList51 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList51, nodeArray50);
        java.lang.Object obj53 = null;
        boolean boolean54 = nodeList51.remove(obj53);
        boolean boolean55 = nodeList35.retainAll((java.util.Collection<javafx.scene.Node>) nodeList51);
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        java.lang.Object obj59 = null;
        boolean boolean60 = nodeList57.remove(obj59);
        javafx.scene.Node node61 = null;
        boolean boolean62 = nodeList57.add(node61);
        boolean boolean63 = nodeList51.equals((java.lang.Object) boolean62);
        boolean boolean64 = false; // flaky: nodeList32.removeAll((java.util.Collection<javafx.scene.Node>) nodeList51);
        Interface.WoodTable woodTable65 = null;
        Interface.WoodTotalValues woodTotalValues66 = null; // flaky: new Interface.WoodTotalValues(woodTable65);
// flaky:         woodTotalValues66.redraw((double) (short) 100, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList70 = null; // flaky: woodTotalValues66.getAll();
        boolean boolean71 = false; // flaky: nodeList32.contains((java.lang.Object) nodeList70);
        boolean boolean72 = false; // flaky: nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList70);
        javafx.scene.Node[] nodeArray73 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList74 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList74, nodeArray73);
        java.lang.Object obj76 = null;
        boolean boolean77 = nodeList74.remove(obj76);
        int int78 = nodeList74.size();
        javafx.scene.Node[] nodeArray79 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList80 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList80, nodeArray79);
        Interface.WoodTable woodTable83 = null;
        Interface.WoodTotalValues woodTotalValues84 = null;
        Interface.AddWood addWood85 = null; // flaky: new Interface.AddWood(woodTable83, woodTotalValues84);
        java.util.ArrayList<javafx.scene.Node> nodeList86 = null; // flaky: addWood85.getAll();
        boolean boolean87 = false; // flaky: nodeList80.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList86);
        boolean boolean88 = nodeList74.retainAll((java.util.Collection<javafx.scene.Node>) nodeList80);
        boolean boolean89 = nodeList1.equals((java.lang.Object) nodeList80);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeItor23);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
// flaky:         org.junit.Assert.assertNotNull(nodeStream33);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList86);
// flaky:         org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: woodTotalValues3.getAll();
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: woodTotalValues3.getAll();
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues3.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        boolean boolean9 = nodeList7.isEmpty();
        int int11 = nodeList7.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable12 = null;
        Interface.WoodTotalValues woodTotalValues13 = null;
        Interface.AddWood addWood14 = null; // flaky: new Interface.AddWood(woodTable12, woodTotalValues13);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: addWood14.getAll();
        boolean boolean17 = false; // flaky: nodeList15.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node19 = null;
        javafx.scene.Node node20 = null; // flaky: nodeList15.set((int) (byte) 1, node19);
        boolean boolean21 = nodeList7.add(node20);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        Interface.WoodTable woodTable27 = null;
        Interface.WoodTotalValues woodTotalValues28 = null;
        Interface.AddWood addWood29 = null; // flaky: new Interface.AddWood(woodTable27, woodTotalValues28);
        java.util.ArrayList<javafx.scene.Node> nodeList30 = null; // flaky: addWood29.getAll();
        boolean boolean31 = false; // flaky: nodeList24.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList30);
        int int33 = nodeList24.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray35 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList36 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList36, nodeArray35);
        boolean boolean38 = nodeList36.isEmpty();
        int int40 = nodeList36.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable41 = null;
        Interface.WoodTotalValues woodTotalValues42 = null;
        Interface.AddWood addWood43 = null; // flaky: new Interface.AddWood(woodTable41, woodTotalValues42);
        java.util.ArrayList<javafx.scene.Node> nodeList44 = null; // flaky: addWood43.getAll();
        boolean boolean46 = false; // flaky: nodeList44.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node48 = null;
        javafx.scene.Node node49 = null; // flaky: nodeList44.set((int) (byte) 1, node48);
        boolean boolean50 = nodeList36.add(node49);
        javafx.scene.Node node51 = null; // flaky: nodeList24.set((int) (short) 0, node49);
        javafx.scene.Node node52 = nodeList7.set((int) (byte) 0, node49);
// flaky:         nodeList3.add((int) (short) 0, node52);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node55 = null; // flaky: nodeList3.remove(100);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertNotNull(node51);
// flaky:         org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        int int4 = 0; // flaky: nodeList2.indexOf((java.lang.Object) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor6 = null; // flaky: nodeList2.listIterator((int) (byte) 10);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        boolean boolean4 = false; // flaky: nodeList3.isEmpty();
        boolean boolean6 = false; // flaky: nodeList3.equals((java.lang.Object) 100);
        Interface.WoodTable woodTable7 = null;
        Interface.WoodTotalValues woodTotalValues8 = null;
        Interface.AddWood addWood9 = null; // flaky: new Interface.AddWood(woodTable7, woodTotalValues8);
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: addWood9.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood9.getAll();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        int int19 = nodeList13.lastIndexOf((java.lang.Object) 10);
        boolean boolean20 = false; // flaky: nodeList11.retainAll((java.util.Collection<javafx.scene.Node>) nodeList13);
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        Interface.WoodTable woodTable25 = null;
        Interface.WoodTotalValues woodTotalValues26 = null;
        Interface.AddWood addWood27 = null; // flaky: new Interface.AddWood(woodTable25, woodTotalValues26);
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood27.getAll();
        boolean boolean29 = false; // flaky: nodeList22.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList28);
        int int31 = nodeList22.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray32 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList33 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList33, nodeArray32);
        java.lang.Object obj35 = null;
        boolean boolean36 = nodeList33.remove(obj35);
        boolean boolean37 = nodeList33.isEmpty();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray41 = nodeList33.toArray(strArray40);
        boolean boolean42 = nodeList22.equals((java.lang.Object) strArray41);
        int int43 = 0; // flaky: nodeList11.lastIndexOf((java.lang.Object) boolean42);
        javafx.scene.Node[] nodeArray44 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList45 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList45, nodeArray44);
        Interface.WoodTable woodTable48 = null;
        Interface.WoodTotalValues woodTotalValues49 = null;
        Interface.AddWood addWood50 = null; // flaky: new Interface.AddWood(woodTable48, woodTotalValues49);
        java.util.ArrayList<javafx.scene.Node> nodeList51 = null; // flaky: addWood50.getAll();
        boolean boolean52 = false; // flaky: nodeList45.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList51);
        int int54 = nodeList45.indexOf((java.lang.Object) true);
        boolean boolean55 = false; // flaky: nodeList11.removeAll((java.util.Collection<javafx.scene.Node>) nodeList45);
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        java.lang.Object obj59 = null;
        boolean boolean60 = nodeList57.remove(obj59);
        javafx.scene.Node node61 = null;
        boolean boolean62 = nodeList57.add(node61);
        int int64 = nodeList57.indexOf((java.lang.Object) (short) 10);
        Interface.WoodTable woodTable65 = null;
        Interface.WoodTotalValues woodTotalValues66 = null;
        Interface.AddWood addWood67 = null; // flaky: new Interface.AddWood(woodTable65, woodTotalValues66);
        java.util.ArrayList<javafx.scene.Node> nodeList68 = null; // flaky: addWood67.getAll();
// flaky:         addWood67.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList72 = null; // flaky: addWood67.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList73 = null; // flaky: addWood67.getAll();
        javafx.scene.Node[] nodeArray74 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList75 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList75, nodeArray74);
        java.lang.Object obj77 = null;
        boolean boolean78 = nodeList75.remove(obj77);
        javafx.scene.Node node79 = null;
        boolean boolean80 = nodeList75.add(node79);
        java.util.ListIterator<javafx.scene.Node> nodeItor81 = nodeList75.listIterator();
        boolean boolean82 = false; // flaky: nodeList73.contains((java.lang.Object) nodeList75);
        java.util.ListIterator<javafx.scene.Node> nodeItor83 = nodeList75.listIterator();
        boolean boolean84 = nodeList57.remove((java.lang.Object) nodeList75);
        boolean boolean85 = false; // flaky: nodeList11.removeAll((java.util.Collection<javafx.scene.Node>) nodeList75);
        boolean boolean86 = false; // flaky: nodeList3.addAll((java.util.Collection<javafx.scene.Node>) nodeList75);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator87 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList3.replaceAll(nodeUnaryOperator87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList68);
// flaky:         org.junit.Assert.assertNotNull(nodeList72);
// flaky:         org.junit.Assert.assertNotNull(nodeList73);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(nodeItor81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeItor83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<javafx.scene.Node> nodeItor6 = nodeList1.listIterator(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
// flaky:         addWood2.redraw((double) 100L, 0.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: addWood2.getAll();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node12 = null; // flaky: nodeList10.get((int) '4');
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        int int28 = nodeList24.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        boolean boolean34 = false; // flaky: nodeList32.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node36 = null;
        javafx.scene.Node node37 = null; // flaky: nodeList32.set((int) (byte) 1, node36);
        boolean boolean38 = nodeList24.add(node37);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        java.lang.Object obj42 = null;
        boolean boolean43 = nodeList40.remove(obj42);
        boolean boolean44 = nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        boolean boolean45 = nodeList24.isEmpty();
        boolean boolean46 = nodeList6.retainAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator47 = nodeList6.spliterator();
        Interface.WoodTable woodTable49 = null;
        Interface.WoodTotalValues woodTotalValues50 = null;
        Interface.AddWood addWood51 = null; // flaky: new Interface.AddWood(woodTable49, woodTotalValues50);
        java.util.ArrayList<javafx.scene.Node> nodeList52 = null; // flaky: addWood51.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood51.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList54 = null; // flaky: addWood51.getAll();
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        boolean boolean59 = nodeList57.isEmpty();
        int int61 = nodeList57.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable62 = null;
        Interface.WoodTotalValues woodTotalValues63 = null;
        Interface.AddWood addWood64 = null; // flaky: new Interface.AddWood(woodTable62, woodTotalValues63);
        java.util.ArrayList<javafx.scene.Node> nodeList65 = null; // flaky: addWood64.getAll();
        boolean boolean67 = false; // flaky: nodeList65.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node69 = null;
        javafx.scene.Node node70 = null; // flaky: nodeList65.set((int) (byte) 1, node69);
        boolean boolean71 = nodeList57.add(node70);
        javafx.scene.Node node72 = null; // flaky: nodeList54.set((int) (short) 0, node70);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node73 = nodeList6.set((int) 'a', node70);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator47);
// flaky:         org.junit.Assert.assertNotNull(nodeList52);
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
// flaky:         org.junit.Assert.assertNotNull(nodeList54);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
// flaky:         org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = nodeList6.remove(obj8);
        javafx.scene.Node[] nodeArray10 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList11 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList11, nodeArray10);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
        boolean boolean18 = false; // flaky: nodeList11.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList17);
        javafx.scene.Node[] nodeArray20 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList21 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList21, nodeArray20);
        boolean boolean23 = nodeList21.isEmpty();
        int int25 = nodeList21.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable26 = null;
        Interface.WoodTotalValues woodTotalValues27 = null;
        Interface.AddWood addWood28 = null; // flaky: new Interface.AddWood(woodTable26, woodTotalValues27);
        java.util.ArrayList<javafx.scene.Node> nodeList29 = null; // flaky: addWood28.getAll();
        boolean boolean31 = false; // flaky: nodeList29.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node33 = null;
        javafx.scene.Node node34 = null; // flaky: nodeList29.set((int) (byte) 1, node33);
        boolean boolean35 = nodeList21.add(node34);
// flaky:         nodeList11.add(1, node34);
        boolean boolean37 = nodeList6.retainAll((java.util.Collection<javafx.scene.Node>) nodeList11);
        boolean boolean38 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList11);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        int int44 = nodeList40.lastIndexOf((java.lang.Object) 100);
        boolean boolean45 = nodeList40.isEmpty();
        nodeList40.clear();
        boolean boolean47 = nodeList11.addAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        Interface.WoodTable woodTable48 = null;
        Interface.WoodTable woodTable49 = null;
        Interface.WoodTotalValues woodTotalValues50 = null; // flaky: new Interface.WoodTotalValues(woodTable49);
        java.util.ArrayList<javafx.scene.Node> nodeList51 = null; // flaky: woodTotalValues50.getAll();
        Interface.AddWood addWood52 = null; // flaky: new Interface.AddWood(woodTable48, woodTotalValues50);
        java.util.ArrayList<javafx.scene.Node> nodeList53 = null; // flaky: addWood52.getAll();
        int int54 = nodeList40.indexOf((java.lang.Object) nodeList53);
        Interface.WoodTable woodTable55 = null;
        Interface.WoodTotalValues woodTotalValues56 = null; // flaky: new Interface.WoodTotalValues(woodTable55);
        java.util.ArrayList<javafx.scene.Node> nodeList57 = null; // flaky: woodTotalValues56.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList58 = null; // flaky: woodTotalValues56.getAll();
// flaky:         woodTotalValues56.redraw((double) 11, (double) 'a');
        java.util.ArrayList<javafx.scene.Node> nodeList62 = null; // flaky: woodTotalValues56.getAll();
        boolean boolean63 = false; // flaky: nodeList40.removeAll((java.util.Collection<javafx.scene.Node>) nodeList62);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList51);
// flaky:         org.junit.Assert.assertNotNull(nodeList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList57);
// flaky:         org.junit.Assert.assertNotNull(nodeList58);
// flaky:         org.junit.Assert.assertNotNull(nodeList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        boolean boolean13 = false; // flaky: nodeList6.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        boolean boolean18 = nodeList16.isEmpty();
        int int20 = nodeList16.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean26 = false; // flaky: nodeList24.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node28 = null;
        javafx.scene.Node node29 = null; // flaky: nodeList24.set((int) (byte) 1, node28);
        boolean boolean30 = nodeList16.add(node29);
// flaky:         nodeList6.add(1, node29);
        boolean boolean32 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        java.util.stream.Stream<javafx.scene.Node> nodeStream33 = nodeList1.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node35 = nodeList1.get((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeStream33);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        boolean boolean13 = false; // flaky: nodeList6.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList12);
        java.util.stream.Stream<javafx.scene.Node> nodeStream14 = null; // flaky: nodeList12.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator15 = null; // flaky: nodeList12.spliterator();
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = nodeList17.remove(obj19);
        boolean boolean21 = false; // flaky: nodeList12.removeAll((java.util.Collection<javafx.scene.Node>) nodeList17);
        int int22 = nodeList1.lastIndexOf((java.lang.Object) nodeList17);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        int int28 = nodeList24.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        boolean boolean34 = false; // flaky: nodeList32.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node36 = null;
        javafx.scene.Node node37 = null; // flaky: nodeList32.set((int) (byte) 1, node36);
        boolean boolean38 = nodeList24.add(node37);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        java.lang.Object obj42 = null;
        boolean boolean43 = nodeList40.remove(obj42);
        boolean boolean44 = nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        Interface.WoodTable woodTable49 = null;
        Interface.WoodTotalValues woodTotalValues50 = null;
        Interface.AddWood addWood51 = null; // flaky: new Interface.AddWood(woodTable49, woodTotalValues50);
        java.util.ArrayList<javafx.scene.Node> nodeList52 = null; // flaky: addWood51.getAll();
        boolean boolean53 = false; // flaky: nodeList46.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList52);
        java.util.stream.Stream<javafx.scene.Node> nodeStream54 = null; // flaky: nodeList52.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator55 = null; // flaky: nodeList52.spliterator();
        boolean boolean56 = false; // flaky: nodeList24.addAll((java.util.Collection<javafx.scene.Node>) nodeList52);
// flaky:         nodeList52.clear();
        boolean boolean58 = nodeList1.contains((java.lang.Object) nodeList52);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node60 = null; // flaky: nodeList52.get((int) '4');
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream14);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList52);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream54);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator55);
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        int int9 = 0; // flaky: nodeList8.size();
        Interface.WoodTable woodTable11 = null;
        Interface.WoodTotalValues woodTotalValues12 = null;
        Interface.AddWood addWood13 = null; // flaky: new Interface.AddWood(woodTable11, woodTotalValues12);
        java.util.ArrayList<javafx.scene.Node> nodeList14 = null; // flaky: addWood13.getAll();
        boolean boolean15 = false; // flaky: nodeList14.isEmpty();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        javafx.scene.Node[] nodeArray34 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList35 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList35, nodeArray34);
        Interface.WoodTable woodTable38 = null;
        Interface.WoodTotalValues woodTotalValues39 = null;
        Interface.AddWood addWood40 = null; // flaky: new Interface.AddWood(woodTable38, woodTotalValues39);
        java.util.ArrayList<javafx.scene.Node> nodeList41 = null; // flaky: addWood40.getAll();
        boolean boolean42 = false; // flaky: nodeList35.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList41);
        int int44 = nodeList35.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray46 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList47 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList47, nodeArray46);
        boolean boolean49 = nodeList47.isEmpty();
        int int51 = nodeList47.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable52 = null;
        Interface.WoodTotalValues woodTotalValues53 = null;
        Interface.AddWood addWood54 = null; // flaky: new Interface.AddWood(woodTable52, woodTotalValues53);
        java.util.ArrayList<javafx.scene.Node> nodeList55 = null; // flaky: addWood54.getAll();
        boolean boolean57 = false; // flaky: nodeList55.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node59 = null;
        javafx.scene.Node node60 = null; // flaky: nodeList55.set((int) (byte) 1, node59);
        boolean boolean61 = nodeList47.add(node60);
        javafx.scene.Node node62 = null; // flaky: nodeList35.set((int) (short) 0, node60);
        javafx.scene.Node node63 = nodeList18.set((int) (byte) 0, node60);
// flaky:         nodeList14.add((int) (short) 0, node63);
        boolean boolean65 = false; // flaky: nodeList8.addAll((int) (byte) 0, (java.util.Collection<javafx.scene.Node>) nodeList14);
        javafx.scene.Node node67 = null; // flaky: nodeList8.remove((int) (short) 0);
        boolean boolean69 = false; // flaky: nodeList8.remove((java.lang.Object) 100.0d);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator70 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList8.replaceAll(nodeUnaryOperator70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
// flaky:         org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertNotNull(node62);
// flaky:         org.junit.Assert.assertNotNull(node63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        int int10 = nodeList1.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = nodeList12.isEmpty();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray20 = nodeList12.toArray(strArray19);
        boolean boolean21 = nodeList1.equals((java.lang.Object) strArray20);
        int int22 = nodeList1.size();
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        int int28 = nodeList24.lastIndexOf((java.lang.Object) 100);
        int int30 = nodeList24.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor31 = nodeList24.listIterator();
        int int32 = nodeList24.size();
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        boolean boolean36 = nodeList34.isEmpty();
        int int38 = nodeList34.lastIndexOf((java.lang.Object) 100);
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        int int44 = nodeList40.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable45 = null;
        Interface.WoodTotalValues woodTotalValues46 = null;
        Interface.AddWood addWood47 = null; // flaky: new Interface.AddWood(woodTable45, woodTotalValues46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: addWood47.getAll();
        boolean boolean50 = false; // flaky: nodeList48.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node52 = null;
        javafx.scene.Node node53 = null; // flaky: nodeList48.set((int) (byte) 1, node52);
        boolean boolean54 = nodeList40.add(node53);
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        java.lang.Object obj58 = null;
        boolean boolean59 = nodeList56.remove(obj58);
        boolean boolean60 = nodeList40.retainAll((java.util.Collection<javafx.scene.Node>) nodeList56);
        boolean boolean61 = nodeList34.addAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        int int63 = nodeList34.lastIndexOf((java.lang.Object) (short) 0);
        int int65 = nodeList34.lastIndexOf((java.lang.Object) 10L);
        boolean boolean66 = nodeList24.equals((java.lang.Object) int65);
        boolean boolean67 = nodeList1.containsAll((java.util.Collection<javafx.scene.Node>) nodeList24);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(nodeItor31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList20 = null; // flaky: addWood18.getAll();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        boolean boolean24 = nodeList22.isEmpty();
        int int26 = nodeList22.lastIndexOf((java.lang.Object) 100);
        int int28 = nodeList22.lastIndexOf((java.lang.Object) 10);
        boolean boolean29 = false; // flaky: nodeList20.retainAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        boolean boolean30 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList22);
        Interface.WoodTable woodTable31 = null;
        Interface.WoodTotalValues woodTotalValues32 = null;
        Interface.AddWood addWood33 = null; // flaky: new Interface.AddWood(woodTable31, woodTotalValues32);
        java.util.ArrayList<javafx.scene.Node> nodeList34 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList35 = null; // flaky: addWood33.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList36 = null; // flaky: addWood33.getAll();
        boolean boolean37 = false; // flaky: nodeList22.addAll((java.util.Collection<javafx.scene.Node>) nodeList36);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator38 = nodeList22.spliterator();
        javafx.scene.Node[] nodeArray39 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList40 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList40, nodeArray39);
        boolean boolean42 = nodeList40.isEmpty();
        boolean boolean43 = nodeList22.containsAll((java.util.Collection<javafx.scene.Node>) nodeList40);
        int int44 = nodeList22.size();
        javafx.scene.Node[] nodeArray45 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList46 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList46, nodeArray45);
        boolean boolean48 = nodeList46.isEmpty();
        int int50 = nodeList46.lastIndexOf((java.lang.Object) 100);
        int int52 = nodeList46.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor53 = nodeList46.listIterator();
        int int54 = nodeList46.size();
        boolean boolean55 = nodeList46.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream56 = nodeList46.parallelStream();
        javafx.scene.Node[] nodeArray57 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList58 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList58, nodeArray57);
        boolean boolean60 = nodeList58.isEmpty();
        int int62 = nodeList58.lastIndexOf((java.lang.Object) 100);
        int int64 = nodeList58.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable65 = null;
        Interface.WoodTotalValues woodTotalValues66 = null;
        Interface.AddWood addWood67 = null; // flaky: new Interface.AddWood(woodTable65, woodTotalValues66);
        java.util.ArrayList<javafx.scene.Node> nodeList68 = null; // flaky: addWood67.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList69 = null; // flaky: addWood67.getAll();
        javafx.scene.Node[] nodeArray70 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList71 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList71, nodeArray70);
        boolean boolean73 = nodeList71.isEmpty();
        int int75 = nodeList71.lastIndexOf((java.lang.Object) 100);
        int int77 = nodeList71.lastIndexOf((java.lang.Object) 10);
        boolean boolean78 = false; // flaky: nodeList69.retainAll((java.util.Collection<javafx.scene.Node>) nodeList71);
        boolean boolean79 = nodeList58.containsAll((java.util.Collection<javafx.scene.Node>) nodeList71);
        Interface.WoodTable woodTable80 = null;
        Interface.WoodTotalValues woodTotalValues81 = null;
        Interface.AddWood addWood82 = null; // flaky: new Interface.AddWood(woodTable80, woodTotalValues81);
        java.util.ArrayList<javafx.scene.Node> nodeList83 = null; // flaky: addWood82.getAll();
        boolean boolean85 = false; // flaky: nodeList83.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node87 = null;
        javafx.scene.Node node88 = null; // flaky: nodeList83.set((int) (byte) 1, node87);
        boolean boolean89 = false; // flaky: nodeList58.removeAll((java.util.Collection<javafx.scene.Node>) nodeList83);
        int int90 = nodeList46.lastIndexOf((java.lang.Object) nodeList58);
        Interface.WoodTable woodTable91 = null;
        Interface.WoodTotalValues woodTotalValues92 = null; // flaky: new Interface.WoodTotalValues(woodTable91);
        java.util.ArrayList<javafx.scene.Node> nodeList93 = null; // flaky: woodTotalValues92.getAll();
        int int94 = nodeList58.lastIndexOf((java.lang.Object) woodTotalValues92);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator95 = nodeList58.spliterator();
        boolean boolean96 = nodeList22.retainAll((java.util.Collection<javafx.scene.Node>) nodeList58);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList34);
// flaky:         org.junit.Assert.assertNotNull(nodeList35);
// flaky:         org.junit.Assert.assertNotNull(nodeList36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(nodeItor53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(nodeStream56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList68);
// flaky:         org.junit.Assert.assertNotNull(nodeList69);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator95);
// flaky:         org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        int int16 = nodeList7.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean29 = false; // flaky: nodeList27.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node31 = null;
        javafx.scene.Node node32 = null; // flaky: nodeList27.set((int) (byte) 1, node31);
        boolean boolean33 = nodeList19.add(node32);
        javafx.scene.Node node34 = null; // flaky: nodeList7.set((int) (short) 0, node32);
        boolean boolean35 = nodeList1.add(node34);
        nodeList1.clear();
        java.util.Iterator<javafx.scene.Node> nodeItor37 = nodeList1.iterator();
        java.util.Iterator<javafx.scene.Node> nodeItor38 = nodeList1.iterator();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(nodeItor37);
        org.junit.Assert.assertNotNull(nodeItor38);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        boolean boolean11 = nodeList6.isEmpty();
        nodeList6.clear();
        boolean boolean13 = nodeList1.removeAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        Interface.WoodTable woodTable14 = null;
        Interface.WoodTotalValues woodTotalValues15 = null;
        Interface.AddWood addWood16 = null; // flaky: new Interface.AddWood(woodTable14, woodTotalValues15);
        java.util.ArrayList<javafx.scene.Node> nodeList17 = null; // flaky: addWood16.getAll();
// flaky:         addWood16.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood16.getAll();
        boolean boolean22 = false; // flaky: nodeList6.addAll((java.util.Collection<javafx.scene.Node>) nodeList21);
        java.lang.Object[] objArray23 = nodeList6.toArray();
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
// flaky:         addWood26.redraw((double) 10.0f, (double) (-1L));
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood26.getAll();
        int int32 = nodeList6.lastIndexOf((java.lang.Object) addWood26);
        java.util.ArrayList<javafx.scene.Node> nodeList33 = null; // flaky: addWood26.getAll();
        Interface.WoodTable woodTable34 = null;
        Interface.WoodTotalValues woodTotalValues35 = null;
        Interface.AddWood addWood36 = null; // flaky: new Interface.AddWood(woodTable34, woodTotalValues35);
        java.util.ArrayList<javafx.scene.Node> nodeList37 = null; // flaky: addWood36.getAll();
        boolean boolean38 = false; // flaky: nodeList37.isEmpty();
        boolean boolean40 = false; // flaky: nodeList37.equals((java.lang.Object) 100);
        java.util.Iterator<javafx.scene.Node> nodeItor41 = null; // flaky: nodeList37.iterator();
        java.util.ListIterator<javafx.scene.Node> nodeItor42 = null; // flaky: nodeList37.listIterator();
        javafx.scene.Node node44 = null; // flaky: nodeList37.get(1);
        boolean boolean45 = false; // flaky: nodeList33.add(node44);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList17);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList33);
// flaky:         org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeItor41);
// flaky:         org.junit.Assert.assertNotNull(nodeItor42);
// flaky:         org.junit.Assert.assertNotNull(node44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
// flaky:         woodTotalValues3.redraw(0.0d, (double) 0L);
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: woodTotalValues3.getAll();
// flaky:         woodTotalValues3.redraw(1.0d, (double) (-1L));
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: woodTotalValues3.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList14 = null; // flaky: woodTotalValues3.getAll();
        // The following exception was thrown during execution in test generation
        try {
            woodTotalValues3.renew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertNotNull(nodeList14);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues2.getAll();
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: woodTotalValues2.getAll();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        java.util.stream.Stream<javafx.scene.Node> nodeStream15 = null; // flaky: nodeList13.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator16 = null; // flaky: nodeList13.spliterator();
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = nodeList18.remove(obj20);
        boolean boolean22 = false; // flaky: nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList18);
        javafx.scene.Node[] nodeArray23 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList24 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList24, nodeArray23);
        boolean boolean26 = nodeList24.isEmpty();
        int int28 = nodeList24.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable29 = null;
        Interface.WoodTotalValues woodTotalValues30 = null;
        Interface.AddWood addWood31 = null; // flaky: new Interface.AddWood(woodTable29, woodTotalValues30);
        java.util.ArrayList<javafx.scene.Node> nodeList32 = null; // flaky: addWood31.getAll();
        boolean boolean34 = false; // flaky: nodeList32.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node36 = null;
        javafx.scene.Node node37 = null; // flaky: nodeList32.set((int) (byte) 1, node36);
        boolean boolean38 = nodeList24.add(node37);
        boolean boolean39 = false; // flaky: nodeList13.add(node37);
        int int40 = 0; // flaky: nodeList5.lastIndexOf((java.lang.Object) node37);
        javafx.css.Styleable[] styleableArray41 = new javafx.css.Styleable[] {};
        javafx.css.Styleable[] styleableArray42 = new javafx.css.Styleable[] {};
        javafx.css.Styleable[] styleableArray43 = new javafx.css.Styleable[] {};
        javafx.css.Styleable[] styleableArray44 = new javafx.css.Styleable[] {};
        javafx.css.Styleable[] styleableArray45 = new javafx.css.Styleable[] {};
        javafx.css.Styleable[] styleableArray46 = new javafx.css.Styleable[] {};
        javafx.css.Styleable[][] styleableArray47 = new javafx.css.Styleable[][] { styleableArray41, styleableArray42, styleableArray43, styleableArray44, styleableArray45, styleableArray46 };
        // The following exception was thrown during execution in test generation
        try {
            javafx.css.Styleable[][] styleableArray48 = null; // flaky: nodeList5.toArray(styleableArray47);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream15);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator16);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(styleableArray41);
        org.junit.Assert.assertNotNull(styleableArray42);
        org.junit.Assert.assertNotNull(styleableArray43);
        org.junit.Assert.assertNotNull(styleableArray44);
        org.junit.Assert.assertNotNull(styleableArray45);
        org.junit.Assert.assertNotNull(styleableArray46);
        org.junit.Assert.assertNotNull(styleableArray47);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((double) 2, (double) 5);
// flaky:         woodTotalValues1.redraw((double) (byte) 1, (double) 1);
        java.util.ArrayList<javafx.scene.Node> nodeList10 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: woodTotalValues1.getAll();
// flaky:         woodTotalValues1.redraw((double) (short) 1, 1.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList15 = null; // flaky: woodTotalValues1.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList16 = null; // flaky: woodTotalValues1.getAll();
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList10);
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
// flaky:         org.junit.Assert.assertNotNull(nodeList15);
// flaky:         org.junit.Assert.assertNotNull(nodeList16);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        javafx.scene.Node[] nodeArray6 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList7 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList7, nodeArray6);
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList7.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList13);
        int int16 = nodeList7.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray18 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList19 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList19, nodeArray18);
        boolean boolean21 = nodeList19.isEmpty();
        int int23 = nodeList19.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean29 = false; // flaky: nodeList27.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node31 = null;
        javafx.scene.Node node32 = null; // flaky: nodeList27.set((int) (byte) 1, node31);
        boolean boolean33 = nodeList19.add(node32);
        javafx.scene.Node node34 = null; // flaky: nodeList7.set((int) (short) 0, node32);
        boolean boolean35 = nodeList1.add(node34);
        boolean boolean37 = nodeList1.remove((java.lang.Object) 100L);
        nodeList1.clear();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node40 = nodeList1.remove(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node5 = nodeList1.remove((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        boolean boolean4 = nodeList1.isEmpty();
        nodeList1.clear();
        java.util.ListIterator<javafx.scene.Node> nodeItor7 = nodeList1.listIterator(0);
        Interface.WoodTable woodTable8 = null;
        Interface.WoodTotalValues woodTotalValues9 = null;
        Interface.AddWood addWood10 = null; // flaky: new Interface.AddWood(woodTable8, woodTotalValues9);
        java.util.ArrayList<javafx.scene.Node> nodeList11 = null; // flaky: addWood10.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood10.getAll();
        javafx.scene.Node[] nodeArray13 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList14 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList14, nodeArray13);
        boolean boolean16 = nodeList14.isEmpty();
        int int18 = nodeList14.lastIndexOf((java.lang.Object) 100);
        int int20 = nodeList14.lastIndexOf((java.lang.Object) 10);
        boolean boolean21 = false; // flaky: nodeList12.retainAll((java.util.Collection<javafx.scene.Node>) nodeList14);
        boolean boolean23 = false; // flaky: nodeList12.contains((java.lang.Object) false);
        Interface.WoodTable woodTable24 = null;
        Interface.WoodTotalValues woodTotalValues25 = null;
        Interface.AddWood addWood26 = null; // flaky: new Interface.AddWood(woodTable24, woodTotalValues25);
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood26.getAll();
        boolean boolean28 = false; // flaky: nodeList27.isEmpty();
        boolean boolean30 = false; // flaky: nodeList27.equals((java.lang.Object) 100);
        int int31 = 0; // flaky: nodeList12.lastIndexOf((java.lang.Object) nodeList27);
        java.lang.Object[] objArray32 = null; // flaky: nodeList12.toArray();
        int int33 = nodeList1.lastIndexOf((java.lang.Object) objArray32);
        java.util.ListIterator<javafx.scene.Node> nodeItor34 = nodeList1.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node36 = nodeList1.remove((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(nodeItor7);
// flaky:         org.junit.Assert.assertNotNull(nodeList11);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
// flaky:         org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(nodeItor34);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray14 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList15 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList15, nodeArray14);
        Interface.WoodTable woodTable18 = null;
        Interface.WoodTotalValues woodTotalValues19 = null;
        Interface.AddWood addWood20 = null; // flaky: new Interface.AddWood(woodTable18, woodTotalValues19);
        java.util.ArrayList<javafx.scene.Node> nodeList21 = null; // flaky: addWood20.getAll();
        boolean boolean22 = false; // flaky: nodeList15.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList21);
        int int24 = nodeList15.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        java.lang.Object obj28 = null;
        boolean boolean29 = nodeList26.remove(obj28);
        boolean boolean30 = nodeList26.isEmpty();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray34 = nodeList26.toArray(strArray33);
        boolean boolean35 = nodeList15.equals((java.lang.Object) strArray34);
        int int36 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) boolean35);
        int int38 = 0; // flaky: nodeList4.indexOf((java.lang.Object) 100L);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) (short) -1, (double) (short) 1);
// flaky:         addWood2.redraw((double) 1L, (double) (-1L));
// flaky:         addWood2.redraw((double) 1, (double) (-1.0f));
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        boolean boolean5 = nodeList1.isEmpty();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray9 = nodeList1.toArray(strArray8);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = nodeList1.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        javafx.scene.Node[] nodeArray16 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList17 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList17, nodeArray16);
        boolean boolean19 = nodeList17.isEmpty();
        int int21 = nodeList17.lastIndexOf((java.lang.Object) 100);
        boolean boolean22 = nodeList12.equals((java.lang.Object) nodeList17);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList27 = null; // flaky: addWood25.getAll();
        javafx.scene.Node[] nodeArray28 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList29 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList29, nodeArray28);
        boolean boolean31 = nodeList29.isEmpty();
        int int33 = nodeList29.lastIndexOf((java.lang.Object) 100);
        int int35 = nodeList29.lastIndexOf((java.lang.Object) 10);
        boolean boolean36 = false; // flaky: nodeList27.retainAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        javafx.scene.Node[] nodeArray37 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList38 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList38, nodeArray37);
        java.lang.Object obj40 = null;
        boolean boolean41 = nodeList38.remove(obj40);
        boolean boolean42 = nodeList38.isEmpty();
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        Interface.WoodTable woodTable47 = null;
        Interface.WoodTotalValues woodTotalValues48 = null;
        Interface.AddWood addWood49 = null; // flaky: new Interface.AddWood(woodTable47, woodTotalValues48);
        java.util.ArrayList<javafx.scene.Node> nodeList50 = null; // flaky: addWood49.getAll();
        boolean boolean51 = false; // flaky: nodeList44.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList50);
        int int53 = nodeList44.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray55 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList56 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList56, nodeArray55);
        boolean boolean58 = nodeList56.isEmpty();
        int int60 = nodeList56.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable61 = null;
        Interface.WoodTotalValues woodTotalValues62 = null;
        Interface.AddWood addWood63 = null; // flaky: new Interface.AddWood(woodTable61, woodTotalValues62);
        java.util.ArrayList<javafx.scene.Node> nodeList64 = null; // flaky: addWood63.getAll();
        boolean boolean66 = false; // flaky: nodeList64.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node68 = null;
        javafx.scene.Node node69 = null; // flaky: nodeList64.set((int) (byte) 1, node68);
        boolean boolean70 = nodeList56.add(node69);
        javafx.scene.Node node71 = null; // flaky: nodeList44.set((int) (short) 0, node69);
        boolean boolean72 = nodeList38.add(node71);
        boolean boolean74 = nodeList38.remove((java.lang.Object) 100L);
        boolean boolean75 = nodeList29.remove((java.lang.Object) boolean74);
        boolean boolean76 = nodeList12.addAll((java.util.Collection<javafx.scene.Node>) nodeList29);
        java.lang.Object[] objArray77 = nodeList12.toArray();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator78 = nodeList12.spliterator();
        boolean boolean79 = nodeList1.contains((java.lang.Object) nodeList12);
        java.util.Collection<javafx.scene.Node> nodeCollection80 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = nodeList1.retainAll(nodeCollection80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
// flaky:         org.junit.Assert.assertNotNull(nodeList27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList50);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(nodeSpliterator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null; // flaky: new Interface.WoodTotalValues(woodTable0);
        java.util.ArrayList<javafx.scene.Node> nodeList2 = null; // flaky: woodTotalValues1.getAll();
        Interface.WoodTable woodTable3 = null;
        Interface.WoodTotalValues woodTotalValues4 = null;
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable3, woodTotalValues4);
        java.util.ArrayList<javafx.scene.Node> nodeList6 = null; // flaky: addWood5.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood5.getAll();
        int int8 = 0; // flaky: nodeList2.indexOf((java.lang.Object) addWood5);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood5.getAll();
        boolean boolean10 = false; // flaky: nodeList9.isEmpty();
        java.lang.Class<?> wildcardClass11 = null; // flaky: nodeList9.getClass();
// flaky:         org.junit.Assert.assertNotNull(nodeList2);
// flaky:         org.junit.Assert.assertNotNull(nodeList6);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean11 = false; // flaky: nodeList9.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node13 = null;
        javafx.scene.Node node14 = null; // flaky: nodeList9.set((int) (byte) 1, node13);
        boolean boolean15 = nodeList1.add(node14);
        java.util.stream.Stream<javafx.scene.Node> nodeStream16 = nodeList1.parallelStream();
        java.util.stream.Stream<javafx.scene.Node> nodeStream17 = nodeList1.parallelStream();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeStream16);
        org.junit.Assert.assertNotNull(nodeStream17);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        Interface.WoodTable woodTable10 = null;
        Interface.WoodTotalValues woodTotalValues11 = null;
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable10, woodTotalValues11);
        java.util.ArrayList<javafx.scene.Node> nodeList13 = null; // flaky: addWood12.getAll();
        boolean boolean14 = false; // flaky: nodeList13.isEmpty();
        Interface.WoodTable woodTable15 = null;
        Interface.WoodTotalValues woodTotalValues16 = null;
        Interface.AddWood addWood17 = null; // flaky: new Interface.AddWood(woodTable15, woodTotalValues16);
        java.util.ArrayList<javafx.scene.Node> nodeList18 = null; // flaky: addWood17.getAll();
        boolean boolean19 = false; // flaky: nodeList18.isEmpty();
        javafx.scene.Node[] nodeArray21 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList22 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList22, nodeArray21);
        Interface.WoodTable woodTable25 = null;
        Interface.WoodTotalValues woodTotalValues26 = null;
        Interface.AddWood addWood27 = null; // flaky: new Interface.AddWood(woodTable25, woodTotalValues26);
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood27.getAll();
        boolean boolean29 = false; // flaky: nodeList22.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList28);
        javafx.scene.Node[] nodeArray31 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList32 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList32, nodeArray31);
        boolean boolean34 = nodeList32.isEmpty();
        int int36 = nodeList32.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        boolean boolean42 = false; // flaky: nodeList40.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node44 = null;
        javafx.scene.Node node45 = null; // flaky: nodeList40.set((int) (byte) 1, node44);
        boolean boolean46 = nodeList32.add(node45);
// flaky:         nodeList22.add(1, node45);
        javafx.scene.Node node48 = null; // flaky: nodeList18.set(0, node45);
        boolean boolean49 = false; // flaky: nodeList13.add(node48);
        javafx.scene.Node node50 = null; // flaky: nodeList8.set((int) (short) 1, node48);
        boolean boolean51 = false; // flaky: nodeList8.isEmpty();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
// flaky:         org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertNotNull(node48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        java.lang.Object obj3 = null;
        boolean boolean4 = nodeList1.remove(obj3);
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        Interface.WoodTable woodTable9 = null;
        Interface.WoodTotalValues woodTotalValues10 = null;
        Interface.AddWood addWood11 = null; // flaky: new Interface.AddWood(woodTable9, woodTotalValues10);
        java.util.ArrayList<javafx.scene.Node> nodeList12 = null; // flaky: addWood11.getAll();
        boolean boolean13 = false; // flaky: nodeList6.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray15 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList16 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList16, nodeArray15);
        boolean boolean18 = nodeList16.isEmpty();
        int int20 = nodeList16.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
        boolean boolean26 = false; // flaky: nodeList24.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node28 = null;
        javafx.scene.Node node29 = null; // flaky: nodeList24.set((int) (byte) 1, node28);
        boolean boolean30 = nodeList16.add(node29);
// flaky:         nodeList6.add(1, node29);
        boolean boolean32 = nodeList1.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        javafx.scene.Node[] nodeArray33 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList34 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList34, nodeArray33);
        Interface.WoodTable woodTable37 = null;
        Interface.WoodTotalValues woodTotalValues38 = null;
        Interface.AddWood addWood39 = null; // flaky: new Interface.AddWood(woodTable37, woodTotalValues38);
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood39.getAll();
        boolean boolean41 = false; // flaky: nodeList34.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList40);
        javafx.scene.Node[] nodeArray43 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList44 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList44, nodeArray43);
        boolean boolean46 = nodeList44.isEmpty();
        int int48 = nodeList44.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable49 = null;
        Interface.WoodTotalValues woodTotalValues50 = null;
        Interface.AddWood addWood51 = null; // flaky: new Interface.AddWood(woodTable49, woodTotalValues50);
        java.util.ArrayList<javafx.scene.Node> nodeList52 = null; // flaky: addWood51.getAll();
        boolean boolean54 = false; // flaky: nodeList52.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node56 = null;
        javafx.scene.Node node57 = null; // flaky: nodeList52.set((int) (byte) 1, node56);
        boolean boolean58 = nodeList44.add(node57);
// flaky:         nodeList34.add(1, node57);
        java.util.stream.Stream<javafx.scene.Node> nodeStream60 = nodeList34.stream();
        boolean boolean61 = nodeList34.isEmpty();
        int int62 = nodeList6.lastIndexOf((java.lang.Object) nodeList34);
        java.lang.Object obj63 = null;
        int int64 = nodeList6.indexOf(obj63);
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeStream60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTable woodTable2 = null;
        Interface.WoodTotalValues woodTotalValues3 = null; // flaky: new Interface.WoodTotalValues(woodTable2);
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: woodTotalValues3.getAll();
        Interface.AddWood addWood5 = null; // flaky: new Interface.AddWood(woodTable1, woodTotalValues3);
// flaky:         woodTotalValues3.redraw((double) 0L, (double) '#');
// flaky:         woodTotalValues3.redraw((double) (-1L), (double) (byte) 0);
        Interface.AddWood addWood12 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList4 = null; // flaky: addWood2.getAll();
        javafx.scene.Node[] nodeArray5 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList6 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList6, nodeArray5);
        boolean boolean8 = nodeList6.isEmpty();
        int int10 = nodeList6.lastIndexOf((java.lang.Object) 100);
        int int12 = nodeList6.lastIndexOf((java.lang.Object) 10);
        boolean boolean13 = false; // flaky: nodeList4.retainAll((java.util.Collection<javafx.scene.Node>) nodeList6);
        boolean boolean15 = false; // flaky: nodeList4.contains((java.lang.Object) false);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList19.isEmpty();
        boolean boolean22 = false; // flaky: nodeList19.equals((java.lang.Object) 100);
        int int23 = 0; // flaky: nodeList4.lastIndexOf((java.lang.Object) nodeList19);
        javafx.scene.Node[] nodeArray24 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList25 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList25, nodeArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = nodeList25.remove(obj27);
        javafx.scene.Node[] nodeArray29 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList30 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList30, nodeArray29);
        boolean boolean32 = nodeList30.isEmpty();
        int int34 = nodeList30.lastIndexOf((java.lang.Object) 100);
        boolean boolean35 = nodeList25.equals((java.lang.Object) nodeList30);
        Interface.WoodTable woodTable36 = null;
        Interface.WoodTotalValues woodTotalValues37 = null;
        Interface.AddWood addWood38 = null; // flaky: new Interface.AddWood(woodTable36, woodTotalValues37);
        java.util.ArrayList<javafx.scene.Node> nodeList39 = null; // flaky: addWood38.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList40 = null; // flaky: addWood38.getAll();
        javafx.scene.Node[] nodeArray41 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList42 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList42, nodeArray41);
        boolean boolean44 = nodeList42.isEmpty();
        int int46 = nodeList42.lastIndexOf((java.lang.Object) 100);
        int int48 = nodeList42.lastIndexOf((java.lang.Object) 10);
        boolean boolean49 = false; // flaky: nodeList40.retainAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        javafx.scene.Node[] nodeArray50 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList51 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList51, nodeArray50);
        java.lang.Object obj53 = null;
        boolean boolean54 = nodeList51.remove(obj53);
        boolean boolean55 = nodeList51.isEmpty();
        javafx.scene.Node[] nodeArray56 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList57 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList57, nodeArray56);
        Interface.WoodTable woodTable60 = null;
        Interface.WoodTotalValues woodTotalValues61 = null;
        Interface.AddWood addWood62 = null; // flaky: new Interface.AddWood(woodTable60, woodTotalValues61);
        java.util.ArrayList<javafx.scene.Node> nodeList63 = null; // flaky: addWood62.getAll();
        boolean boolean64 = false; // flaky: nodeList57.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList63);
        int int66 = nodeList57.indexOf((java.lang.Object) true);
        javafx.scene.Node[] nodeArray68 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList69 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList69, nodeArray68);
        boolean boolean71 = nodeList69.isEmpty();
        int int73 = nodeList69.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable74 = null;
        Interface.WoodTotalValues woodTotalValues75 = null;
        Interface.AddWood addWood76 = null; // flaky: new Interface.AddWood(woodTable74, woodTotalValues75);
        java.util.ArrayList<javafx.scene.Node> nodeList77 = null; // flaky: addWood76.getAll();
        boolean boolean79 = false; // flaky: nodeList77.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node81 = null;
        javafx.scene.Node node82 = null; // flaky: nodeList77.set((int) (byte) 1, node81);
        boolean boolean83 = nodeList69.add(node82);
        javafx.scene.Node node84 = null; // flaky: nodeList57.set((int) (short) 0, node82);
        boolean boolean85 = nodeList51.add(node84);
        boolean boolean87 = nodeList51.remove((java.lang.Object) 100L);
        boolean boolean88 = nodeList42.remove((java.lang.Object) boolean87);
        boolean boolean89 = nodeList25.addAll((java.util.Collection<javafx.scene.Node>) nodeList42);
        boolean boolean90 = false; // flaky: nodeList4.equals((java.lang.Object) nodeList42);
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator91 = nodeList42.spliterator();
        boolean boolean92 = nodeList42.isEmpty();
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList39);
// flaky:         org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
// flaky:         org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        Interface.WoodTable woodTable4 = null;
        Interface.WoodTotalValues woodTotalValues5 = null;
        Interface.AddWood addWood6 = null; // flaky: new Interface.AddWood(woodTable4, woodTotalValues5);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood6.getAll();
        boolean boolean8 = false; // flaky: nodeList1.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList7);
        java.util.stream.Stream<javafx.scene.Node> nodeStream9 = null; // flaky: nodeList7.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator10 = null; // flaky: nodeList7.spliterator();
        javafx.scene.Node[] nodeArray11 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList12 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList12, nodeArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = nodeList12.remove(obj14);
        boolean boolean16 = false; // flaky: nodeList7.removeAll((java.util.Collection<javafx.scene.Node>) nodeList12);
        javafx.scene.Node[] nodeArray17 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList18 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList18, nodeArray17);
        boolean boolean20 = nodeList18.isEmpty();
        int int22 = nodeList18.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable23 = null;
        Interface.WoodTotalValues woodTotalValues24 = null;
        Interface.AddWood addWood25 = null; // flaky: new Interface.AddWood(woodTable23, woodTotalValues24);
        java.util.ArrayList<javafx.scene.Node> nodeList26 = null; // flaky: addWood25.getAll();
        boolean boolean28 = false; // flaky: nodeList26.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node30 = null;
        javafx.scene.Node node31 = null; // flaky: nodeList26.set((int) (byte) 1, node30);
        boolean boolean32 = nodeList18.add(node31);
        boolean boolean33 = false; // flaky: nodeList7.add(node31);
        // The following exception was thrown during execution in test generation
        try {
            javafx.scene.Node node35 = null; // flaky: nodeList7.remove((int) (byte) -1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream9);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTable woodTable1 = null;
        Interface.WoodTotalValues woodTotalValues2 = null; // flaky: new Interface.WoodTotalValues(woodTable1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: woodTotalValues2.getAll();
        Interface.AddWood addWood4 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues2);
        java.util.ArrayList<javafx.scene.Node> nodeList5 = null; // flaky: addWood4.getAll();
        Interface.WoodTable woodTable6 = null;
        Interface.WoodTotalValues woodTotalValues7 = null;
        Interface.AddWood addWood8 = null; // flaky: new Interface.AddWood(woodTable6, woodTotalValues7);
        java.util.ArrayList<javafx.scene.Node> nodeList9 = null; // flaky: addWood8.getAll();
        boolean boolean10 = false; // flaky: nodeList9.isEmpty();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        Interface.WoodTable woodTable16 = null;
        Interface.WoodTotalValues woodTotalValues17 = null;
        Interface.AddWood addWood18 = null; // flaky: new Interface.AddWood(woodTable16, woodTotalValues17);
        java.util.ArrayList<javafx.scene.Node> nodeList19 = null; // flaky: addWood18.getAll();
        boolean boolean20 = false; // flaky: nodeList13.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList19);
        javafx.scene.Node[] nodeArray22 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList23 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList23, nodeArray22);
        boolean boolean25 = nodeList23.isEmpty();
        int int27 = nodeList23.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable28 = null;
        Interface.WoodTotalValues woodTotalValues29 = null;
        Interface.AddWood addWood30 = null; // flaky: new Interface.AddWood(woodTable28, woodTotalValues29);
        java.util.ArrayList<javafx.scene.Node> nodeList31 = null; // flaky: addWood30.getAll();
        boolean boolean33 = false; // flaky: nodeList31.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node35 = null;
        javafx.scene.Node node36 = null; // flaky: nodeList31.set((int) (byte) 1, node35);
        boolean boolean37 = nodeList23.add(node36);
// flaky:         nodeList13.add(1, node36);
        javafx.scene.Node node39 = null; // flaky: nodeList9.set(0, node36);
        java.util.ListIterator<javafx.scene.Node> nodeItor40 = null; // flaky: nodeList9.listIterator();
        boolean boolean41 = false; // flaky: nodeList5.addAll((java.util.Collection<javafx.scene.Node>) nodeList9);
        java.util.function.UnaryOperator<javafx.scene.Node> nodeUnaryOperator42 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeList5.replaceAll(nodeUnaryOperator42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList5);
// flaky:         org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertNotNull(node39);
// flaky:         org.junit.Assert.assertNotNull(nodeItor40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        Interface.WoodTable woodTable0 = null;
        Interface.WoodTotalValues woodTotalValues1 = null;
        Interface.AddWood addWood2 = null; // flaky: new Interface.AddWood(woodTable0, woodTotalValues1);
        java.util.ArrayList<javafx.scene.Node> nodeList3 = null; // flaky: addWood2.getAll();
// flaky:         addWood2.redraw((double) 10.0f, (double) 0L);
        java.util.ArrayList<javafx.scene.Node> nodeList7 = null; // flaky: addWood2.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList8 = null; // flaky: addWood2.getAll();
        javafx.scene.Node node10 = null; // flaky: nodeList8.get(2);
        Interface.WoodTable woodTable11 = null;
        Interface.WoodTotalValues woodTotalValues12 = null;
        Interface.AddWood addWood13 = null; // flaky: new Interface.AddWood(woodTable11, woodTotalValues12);
        java.util.ArrayList<javafx.scene.Node> nodeList14 = null; // flaky: addWood13.getAll();
        boolean boolean16 = false; // flaky: nodeList14.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node18 = null;
        javafx.scene.Node node19 = null; // flaky: nodeList14.set((int) (byte) 1, node18);
        java.util.ListIterator<javafx.scene.Node> nodeItor20 = null; // flaky: nodeList14.listIterator();
        Interface.WoodTable woodTable21 = null;
        Interface.WoodTotalValues woodTotalValues22 = null;
        Interface.AddWood addWood23 = null; // flaky: new Interface.AddWood(woodTable21, woodTotalValues22);
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood23.getAll();
// flaky:         addWood23.redraw((double) (short) 0, 10.0d);
        java.util.ArrayList<javafx.scene.Node> nodeList28 = null; // flaky: addWood23.getAll();
        java.util.stream.Stream<javafx.scene.Node> nodeStream29 = null; // flaky: nodeList28.stream();
        java.util.Iterator<javafx.scene.Node> nodeItor30 = null; // flaky: nodeList28.iterator();
        boolean boolean31 = false; // flaky: nodeList14.equals((java.lang.Object) nodeList28);
        boolean boolean32 = false; // flaky: nodeList8.removeAll((java.util.Collection<javafx.scene.Node>) nodeList14);
// flaky:         org.junit.Assert.assertNotNull(nodeList3);
// flaky:         org.junit.Assert.assertNotNull(nodeList7);
// flaky:         org.junit.Assert.assertNotNull(nodeList8);
// flaky:         org.junit.Assert.assertNotNull(node10);
// flaky:         org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(node19);
// flaky:         org.junit.Assert.assertNotNull(nodeItor20);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
// flaky:         org.junit.Assert.assertNotNull(nodeList28);
// flaky:         org.junit.Assert.assertNotNull(nodeStream29);
// flaky:         org.junit.Assert.assertNotNull(nodeItor30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        javafx.scene.Node[] nodeArray0 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList1 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList1, nodeArray0);
        boolean boolean3 = nodeList1.isEmpty();
        int int5 = nodeList1.lastIndexOf((java.lang.Object) 100);
        int int7 = nodeList1.lastIndexOf((java.lang.Object) 10);
        java.util.ListIterator<javafx.scene.Node> nodeItor8 = nodeList1.listIterator();
        int int9 = nodeList1.size();
        boolean boolean10 = nodeList1.isEmpty();
        java.util.stream.Stream<javafx.scene.Node> nodeStream11 = nodeList1.parallelStream();
        javafx.scene.Node[] nodeArray12 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList13 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList13, nodeArray12);
        boolean boolean15 = nodeList13.isEmpty();
        int int17 = nodeList13.lastIndexOf((java.lang.Object) 100);
        int int19 = nodeList13.lastIndexOf((java.lang.Object) 10);
        Interface.WoodTable woodTable20 = null;
        Interface.WoodTotalValues woodTotalValues21 = null;
        Interface.AddWood addWood22 = null; // flaky: new Interface.AddWood(woodTable20, woodTotalValues21);
        java.util.ArrayList<javafx.scene.Node> nodeList23 = null; // flaky: addWood22.getAll();
        java.util.ArrayList<javafx.scene.Node> nodeList24 = null; // flaky: addWood22.getAll();
        javafx.scene.Node[] nodeArray25 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList26 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList26, nodeArray25);
        boolean boolean28 = nodeList26.isEmpty();
        int int30 = nodeList26.lastIndexOf((java.lang.Object) 100);
        int int32 = nodeList26.lastIndexOf((java.lang.Object) 10);
        boolean boolean33 = false; // flaky: nodeList24.retainAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        boolean boolean34 = nodeList13.containsAll((java.util.Collection<javafx.scene.Node>) nodeList26);
        Interface.WoodTable woodTable35 = null;
        Interface.WoodTotalValues woodTotalValues36 = null;
        Interface.AddWood addWood37 = null; // flaky: new Interface.AddWood(woodTable35, woodTotalValues36);
        java.util.ArrayList<javafx.scene.Node> nodeList38 = null; // flaky: addWood37.getAll();
        boolean boolean40 = false; // flaky: nodeList38.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node42 = null;
        javafx.scene.Node node43 = null; // flaky: nodeList38.set((int) (byte) 1, node42);
        boolean boolean44 = false; // flaky: nodeList13.removeAll((java.util.Collection<javafx.scene.Node>) nodeList38);
        int int45 = nodeList1.lastIndexOf((java.lang.Object) nodeList13);
        Interface.WoodTable woodTable46 = null;
        Interface.WoodTotalValues woodTotalValues47 = null; // flaky: new Interface.WoodTotalValues(woodTable46);
        java.util.ArrayList<javafx.scene.Node> nodeList48 = null; // flaky: woodTotalValues47.getAll();
        int int49 = nodeList13.lastIndexOf((java.lang.Object) woodTotalValues47);
        javafx.scene.Node[] nodeArray50 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList51 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList51, nodeArray50);
        boolean boolean53 = nodeList51.isEmpty();
        int int55 = nodeList51.lastIndexOf((java.lang.Object) 100);
        Interface.WoodTable woodTable56 = null;
        Interface.WoodTotalValues woodTotalValues57 = null;
        Interface.AddWood addWood58 = null; // flaky: new Interface.AddWood(woodTable56, woodTotalValues57);
        java.util.ArrayList<javafx.scene.Node> nodeList59 = null; // flaky: addWood58.getAll();
        boolean boolean61 = false; // flaky: nodeList59.equals((java.lang.Object) (byte) 1);
        javafx.scene.Node node63 = null;
        javafx.scene.Node node64 = null; // flaky: nodeList59.set((int) (byte) 1, node63);
        boolean boolean65 = nodeList51.add(node64);
        javafx.scene.Node[] nodeArray66 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList67 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList67, nodeArray66);
        java.lang.Object obj69 = null;
        boolean boolean70 = nodeList67.remove(obj69);
        boolean boolean71 = nodeList51.retainAll((java.util.Collection<javafx.scene.Node>) nodeList67);
        javafx.scene.Node[] nodeArray72 = new javafx.scene.Node[] {};
        java.util.ArrayList<javafx.scene.Node> nodeList73 = new java.util.ArrayList<javafx.scene.Node>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<javafx.scene.Node>) nodeList73, nodeArray72);
        Interface.WoodTable woodTable76 = null;
        Interface.WoodTotalValues woodTotalValues77 = null;
        Interface.AddWood addWood78 = null; // flaky: new Interface.AddWood(woodTable76, woodTotalValues77);
        java.util.ArrayList<javafx.scene.Node> nodeList79 = null; // flaky: addWood78.getAll();
        boolean boolean80 = false; // flaky: nodeList73.addAll(0, (java.util.Collection<javafx.scene.Node>) nodeList79);
        java.util.stream.Stream<javafx.scene.Node> nodeStream81 = null; // flaky: nodeList79.parallelStream();
        java.util.Spliterator<javafx.scene.Node> nodeSpliterator82 = null; // flaky: nodeList79.spliterator();
        boolean boolean83 = false; // flaky: nodeList51.addAll((java.util.Collection<javafx.scene.Node>) nodeList79);
        java.util.Iterator<javafx.scene.Node> nodeItor84 = null; // flaky: nodeList79.iterator();
        javafx.scene.Node node86 = null; // flaky: nodeList79.remove(1);
        boolean boolean87 = nodeList13.add(node86);
        java.lang.Class<?> wildcardClass88 = nodeList13.getClass();
        org.junit.Assert.assertNotNull(nodeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(nodeStream11);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList23);
// flaky:         org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
// flaky:         org.junit.Assert.assertNotNull(nodeList59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(nodeList79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeStream81);
// flaky:         org.junit.Assert.assertNotNull(nodeSpliterator82);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
// flaky:         org.junit.Assert.assertNotNull(nodeItor84);
// flaky:         org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }
}
