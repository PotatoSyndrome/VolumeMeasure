import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        // The following exception was thrown during execution in test generation
        try {
            javafx.stage.Stage stage0 = new javafx.stage.Stage();
            org.junit.Assert.fail("Expected exception of type java.lang.ExceptionInInitializerError; message: null");
        } catch (java.lang.ExceptionInInitializerError e) {
            // Expected exception.
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        java.util.Iterator<javafx.stage.Window> windowItor0 = javafx.stage.Window.impl_getWindows();
        org.junit.Assert.assertNotNull(windowItor0);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        java.lang.String str0 = javafx.application.Application.STYLESHEET_CASPIAN;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "CASPIAN" + "'", str0, "CASPIAN");
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        java.lang.String str0 = javafx.application.Application.STYLESHEET_MODENA;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "MODENA" + "'", str0, "MODENA");
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        java.lang.String str0 = javafx.application.Application.getUserAgentStylesheet();
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "hi!" + "'", str0, "hi!");
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        java.lang.String[] strArray5 = new java.lang.String[] { "MODENA", "CASPIAN", "CASPIAN", "CASPIAN", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("CASPIAN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        logic.YourWood yourWood0 = new logic.YourWood();
        java.lang.Class<?> wildcardClass1 = yourWood0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!", "CASPIAN", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        logic.VolumeDB volumeDB0 = new logic.VolumeDB();
        java.lang.Class<?> wildcardClass1 = volumeDB0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        java.lang.String[] strArray4 = new java.lang.String[] { "RoundVolume(length=97.0, diameter=0, volume=0.0)", "RoundVolume(length=0.0, diameter=0, volume=0.0)", "hi!", "RoundVolume(length=97.0, diameter=0, volume=0.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        java.lang.Class<?> wildcardClass4 = roundVolume3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        java.lang.String[] strArray1 = new java.lang.String[] { "RoundVolume(length=0.0, diameter=100, volume=0.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        roundVolume0.setLength((double) 10L);
        logic.RoundVolume roundVolume6 = new logic.RoundVolume();
        roundVolume6.setVolume((double) 0);
        double double9 = roundVolume6.getVolume();
        java.lang.String str10 = roundVolume6.toString();
        boolean boolean11 = roundVolume0.equals((java.lang.Object) str10);
        roundVolume0.setLength((double) 10L);
        roundVolume0.setDiameter((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str10, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        roundVolume0.setDiameter(100);
        java.lang.String str5 = roundVolume0.toString();
        java.lang.Class<?> wildcardClass6 = roundVolume0.getClass();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str5, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.diameterFirstSortWood();
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume13 = roundVolumeList7.set((int) ' ', roundVolume12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        roundVolume3.setLength(100.0d);
        roundVolume3.setVolume(100.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume16 = roundVolumeList7.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator78 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList60.replaceAll(roundVolumeUnaryOperator78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList36 = roundVolumeList23.subList((int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume9 = new logic.RoundVolume();
        roundVolume9.setVolume((double) 0);
        double double12 = roundVolume9.getVolume();
        roundVolume9.setLength((double) 10L);
        logic.RoundVolume roundVolume15 = new logic.RoundVolume();
        roundVolume15.setVolume((double) 0);
        double double18 = roundVolume15.getVolume();
        java.lang.String str19 = roundVolume15.toString();
        boolean boolean20 = roundVolume9.equals((java.lang.Object) str19);
        roundVolume9.setLength((double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.add((int) ' ', roundVolume9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        logic.YourWood yourWood14 = new logic.YourWood();
// flaky:         yourWood14.addWood((double) 1L, (int) (byte) 100);
        yourWood14.lengthFirstSortWood();
        yourWood14.diameterFirstSortWood();
        yourWood14.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood14.getWood();
        logic.YourWood yourWood22 = new logic.YourWood();
// flaky:         yourWood22.addWood((double) 1L, (int) (byte) 100);
        yourWood22.lengthFirstSortWood();
        boolean boolean27 = roundVolumeList21.contains((java.lang.Object) yourWood22);
        boolean boolean28 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList21);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume30 = roundVolumeList21.remove((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume80 = roundVolumeList69.remove((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=97.0, diameter=0, volume=0.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (-1), (double) (byte) 1);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume34 = roundVolumeList23.get((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList7.equals((java.lang.Object) roundVolumeList39);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream49 = roundVolumeList7.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream49);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean80 = roundVolumeList60.isEmpty();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator81 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList60.replaceAll(roundVolumeUnaryOperator81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume33 = roundVolumeList23.get((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<logic.RoundVolume>[] roundVolumeListArray42 = (java.util.ArrayList<logic.RoundVolume>[]) arrayListArray41;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<logic.RoundVolume>[] roundVolumeListArray43 = roundVolumeList23.toArray((java.util.ArrayList<logic.RoundVolume>[]) arrayListArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(roundVolumeListArray42);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume33 = roundVolumeList7.get((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        Main main0 = new Main();
        javafx.application.Application.Parameters parameters1 = main0.getParameters();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        org.junit.Assert.assertNull(parameters1);
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNull(parameters3);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume35 = roundVolumeList23.remove((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator78 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList69.replaceAll(roundVolumeUnaryOperator78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        Main main0 = new Main();
        main0.init();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        main0.stop();
        org.junit.Assert.assertNull(parameters2);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.stream.Stream[] streamArray33 = new java.util.stream.Stream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.Stream<logic.RoundVolume>[] roundVolumeStreamArray34 = (java.util.stream.Stream<logic.RoundVolume>[]) streamArray33;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<logic.RoundVolume>[] roundVolumeStreamArray35 = roundVolumeList23.toArray(roundVolumeStreamArray34);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(streamArray33);
        org.junit.Assert.assertNotNull(roundVolumeStreamArray34);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor33 = null; // flaky: roundVolumeList23.listIterator((int) (short) 1);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        roundVolume35.setVolume((double) 0);
        double double38 = roundVolume35.getVolume();
        roundVolume35.setLength((double) 10L);
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        double double44 = roundVolume41.getVolume();
        java.lang.String str45 = roundVolume41.toString();
        boolean boolean46 = roundVolume35.equals((java.lang.Object) str45);
        roundVolume35.setLength((double) 10L);
        boolean boolean50 = roundVolume35.equals((java.lang.Object) "CASPIAN");
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList23.add((int) (byte) -1, roundVolume35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor33);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str45, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean78 = roundVolumeList69.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList69.listIterator((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor79 = roundVolumeList60.listIterator((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        logic.RoundVolume roundVolume93 = null;
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume94 = roundVolumeList69.set(0, roundVolume93);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        roundVolume35.setVolume((double) 0);
        double double38 = roundVolume35.getVolume();
        java.lang.String str39 = roundVolume35.toString();
        int int40 = roundVolume35.getDiameter();
        roundVolume35.setLength((double) '#');
        roundVolume35.setVolume(10.0d);
        roundVolume35.setVolume(100.0d);
        boolean boolean47 = roundVolumeList23.add(roundVolume35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList50 = roundVolumeList23.subList((int) '4', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(52) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str39, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setLength((double) 'a');
        boolean boolean40 = roundVolumeList7.add(roundVolume32);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume42 = roundVolumeList7.remove((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume17 = new logic.RoundVolume();
        roundVolume17.setVolume((double) 0);
        double double20 = roundVolume17.getVolume();
        roundVolume17.setLength((double) 10L);
        logic.RoundVolume roundVolume23 = new logic.RoundVolume();
        roundVolume23.setVolume((double) 0);
        double double26 = roundVolume23.getVolume();
        java.lang.String str27 = roundVolume23.toString();
        boolean boolean28 = roundVolume17.equals((java.lang.Object) str27);
        roundVolume17.setLength((double) 10L);
        boolean boolean32 = roundVolume17.equals((java.lang.Object) "CASPIAN");
        roundVolumeList15.add(0, roundVolume17);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume35 = roundVolumeList15.get((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str27, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        yourWood24.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList31 = yourWood24.getWood();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList39.isEmpty();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        yourWood48.diameterFirstSortWood();
        yourWood48.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList55 = yourWood48.getWood();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        boolean boolean61 = roundVolumeList55.contains((java.lang.Object) yourWood56);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor62 = roundVolumeList55.iterator();
        boolean boolean63 = roundVolumeList39.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList55);
        int int64 = roundVolumeList31.indexOf((java.lang.Object) roundVolumeList55);
        boolean boolean65 = roundVolumeList15.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList55);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator66 = roundVolumeList55.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeList31);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeList55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor62);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator66);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setVolume(10.0d);
        roundVolume0.setDiameter((int) (short) 10);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList7.equals((java.lang.Object) roundVolumeList39);
        java.lang.Class<?> wildcardClass49 = roundVolumeList39.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        yourWood0.lengthFirstSortWood();
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream78 = roundVolumeList60.parallelStream();
        logic.RoundVolume roundVolume83 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double84 = roundVolume83.getLength();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume85 = roundVolumeList60.set(0, roundVolume83);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream78);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        java.lang.String[] strArray3 = new java.lang.String[] { "CASPIAN", "RoundVolume(length=0.0, diameter=0, volume=-1.0)", "" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        double double6 = roundVolume3.getLength();
        int int7 = roundVolume3.getDiameter();
        roundVolume3.setLength((double) '#');
        double double10 = roundVolume3.getVolume();
        roundVolume3.setVolume(10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        yourWood23.diameterFirstSortWood();
        boolean boolean30 = roundVolumeList7.remove((java.lang.Object) yourWood23);
        yourWood23.diameterFirstSortWood();
        yourWood23.lengthFirstSortWood();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor40 = roundVolumeList23.iterator();
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        yourWood41.diameterFirstSortWood();
        yourWood41.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList48 = yourWood41.getWood();
        java.util.ArrayList[] arrayListArray50 = new java.util.ArrayList[1];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<logic.RoundVolume>[] roundVolumeListArray51 = (java.util.ArrayList<logic.RoundVolume>[]) arrayListArray50;
        roundVolumeListArray51[0] = roundVolumeList48;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<logic.RoundVolume>[] roundVolumeListArray54 = roundVolumeList23.toArray(roundVolumeListArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor40);
        org.junit.Assert.assertNotNull(roundVolumeList48);
        org.junit.Assert.assertNotNull(arrayListArray50);
        org.junit.Assert.assertNotNull(roundVolumeListArray51);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean78 = roundVolumeList69.isEmpty();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator79 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList69.replaceAll(roundVolumeUnaryOperator79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor33 = null; // flaky: roundVolumeList23.listIterator((int) (short) 1);
        java.lang.String[] strArray34 = new java.lang.String[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable<java.lang.String>[] strComparableArray35 = roundVolumeList23.toArray((java.lang.Comparable<java.lang.String>[]) strArray34);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor33);
        org.junit.Assert.assertNotNull(strArray34);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        double double6 = roundVolume3.getLength();
        int int7 = roundVolume3.getDiameter();
        java.lang.String str8 = roundVolume3.toString();
        int int9 = roundVolume3.getDiameter();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=-1.0)" + "'", str8, "RoundVolume(length=0.0, diameter=0, volume=-1.0)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume35 = roundVolumeList23.remove((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        logic.VolumeDB volumeDB34 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap35 = volumeDB34.getVolumes();
        logic.VolumeDB volumeDB36 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap37 = volumeDB36.getVolumes();
        logic.VolumeDB volumeDB38 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap39 = volumeDB38.getVolumes();
        logic.VolumeDB volumeDB40 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap41 = volumeDB40.getVolumes();
        logic.VolumeDB volumeDB42 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap43 = volumeDB42.getVolumes();
        java.util.HashMap[] hashMapArray45 = new java.util.HashMap[5];
        @SuppressWarnings("unchecked")
        java.util.HashMap<java.lang.String, logic.RoundVolume>[] strMapArray46 = (java.util.HashMap<java.lang.String, logic.RoundVolume>[]) hashMapArray45;
        strMapArray46[0] = strMap35;
        strMapArray46[1] = strMap37;
        strMapArray46[2] = strMap39;
        strMapArray46[3] = strMap41;
        strMapArray46[4] = strMap43;
        // The following exception was thrown during execution in test generation
        try {
            java.util.HashMap<java.lang.String, logic.RoundVolume>[] strMapArray57 = roundVolumeList23.toArray(strMapArray46);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(hashMapArray45);
        org.junit.Assert.assertNotNull(strMapArray46);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream92 = roundVolumeList69.parallelStream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor93 = roundVolumeList69.iterator();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume95 = roundVolumeList69.get((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(roundVolumeStream92);
        org.junit.Assert.assertNotNull(roundVolumeItor93);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        java.lang.Class<?> wildcardClass40 = roundVolumeList23.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        double double6 = roundVolume3.getLength();
        int int7 = roundVolume3.getDiameter();
        roundVolume3.setLength((double) '#');
        boolean boolean11 = roundVolume3.equals((java.lang.Object) "hi!");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (byte) 100, 100, (double) 100);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator80 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList69.replaceAll(roundVolumeUnaryOperator80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        logic.YourWood yourWood49 = new logic.YourWood();
// flaky:         yourWood49.addWood((double) 1L, (int) (byte) 100);
        yourWood49.lengthFirstSortWood();
        yourWood49.diameterFirstSortWood();
        yourWood49.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList56 = yourWood49.getWood();
        logic.YourWood yourWood57 = new logic.YourWood();
// flaky:         yourWood57.addWood((double) 1L, (int) (byte) 100);
        yourWood57.lengthFirstSortWood();
        boolean boolean62 = roundVolumeList56.contains((java.lang.Object) yourWood57);
        boolean boolean63 = roundVolumeList42.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList56);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = roundVolumeList7.addAll((int) (short) 100, (java.util.Collection<logic.RoundVolume>) roundVolumeList42);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream3 = roundVolumeList2.parallelStream();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        boolean boolean18 = roundVolumeList12.contains((java.lang.Object) yourWood13);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList12.iterator();
        logic.YourWood yourWood21 = new logic.YourWood();
// flaky:         yourWood21.addWood((double) 1L, (int) (byte) 100);
        yourWood21.lengthFirstSortWood();
        yourWood21.diameterFirstSortWood();
        yourWood21.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList28 = yourWood21.getWood();
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        boolean boolean34 = roundVolumeList28.contains((java.lang.Object) yourWood29);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList28.iterator();
        boolean boolean36 = roundVolumeList12.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList28);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor37 = roundVolumeList28.listIterator();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume();
        roundVolume38.setVolume((double) 0);
        double double41 = roundVolume38.getVolume();
        roundVolume38.setLength((double) (-1L));
        boolean boolean44 = roundVolumeList28.add(roundVolume38);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor45 = roundVolumeList28.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = roundVolumeList2.addAll((int) (short) 10, (java.util.Collection<logic.RoundVolume>) roundVolumeList28);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeStream3);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor19);
        org.junit.Assert.assertNotNull(roundVolumeList28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor45);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setVolume(10.0d);
        double double10 = roundVolume0.getLength();
        java.lang.String str11 = roundVolume0.toString();
        java.lang.Class<?> wildcardClass12 = roundVolume0.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=35.0, diameter=0, volume=10.0)" + "'", str11, "RoundVolume(length=35.0, diameter=0, volume=10.0)");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList23.isEmpty();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        logic.RoundVolume roundVolume53 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume54 = roundVolumeList15.set((int) (byte) 100, roundVolume53);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setVolume(10.0d);
        roundVolume0.setVolume(100.0d);
        double double12 = roundVolume0.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        java.lang.String[] strArray5 = new java.lang.String[] { "RoundVolume(length=97.0, diameter=0, volume=0.0)", "RoundVolume(length=35.0, diameter=0, volume=10.0)", "RoundVolume(length=10.0, diameter=100, volume=10.0)", "RoundVolume(length=0.0, diameter=0, volume=-1.0)", "" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList5 = yourWood0.getWood();
        java.lang.String[] strArray11 = new java.lang.String[] { "RoundVolume(length=97.0, diameter=0, volume=0.0)", "RoundVolume(length=97.0, diameter=0, volume=0.0)", "RoundVolume(length=10.0, diameter=100, volume=10.0)", "RoundVolume(length=-1.0, diameter=0, volume=0.0)", "RoundVolume(length=-1.0, diameter=0, volume=0.0)" };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray12 = roundVolumeList5.toArray(strArray11);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList5);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream92 = roundVolumeList69.parallelStream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor93 = roundVolumeList69.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream94 = roundVolumeList69.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume96 = roundVolumeList69.get(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(roundVolumeStream92);
        org.junit.Assert.assertNotNull(roundVolumeItor93);
        org.junit.Assert.assertNotNull(roundVolumeStream94);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        logic.RoundVolume roundVolume80 = new logic.RoundVolume();
        roundVolume80.setVolume((double) 0);
        double double83 = roundVolume80.getVolume();
        roundVolume80.setLength((double) 10L);
        logic.RoundVolume roundVolume86 = new logic.RoundVolume();
        roundVolume86.setVolume((double) 0);
        double double89 = roundVolume86.getVolume();
        java.lang.String str90 = roundVolume86.toString();
        boolean boolean91 = roundVolume80.equals((java.lang.Object) str90);
        roundVolume80.setLength((double) 10L);
        boolean boolean95 = roundVolume80.equals((java.lang.Object) "CASPIAN");
        boolean boolean96 = roundVolumeList60.contains((java.lang.Object) boolean95);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor98 = roundVolumeList60.listIterator((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str90, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream79 = roundVolumeList69.parallelStream();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator80 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList69.replaceAll(roundVolumeUnaryOperator80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertNotNull(roundVolumeStream79);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        Main main0 = new Main();
        main0.init();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        main0.init();
        main0.init();
        main0.stop();
        org.junit.Assert.assertNull(parameters2);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        java.lang.String[] strArray3 = new java.lang.String[] { "RoundVolume(length=0.0, diameter=0, volume=-1.0)", "", "RoundVolume(length=10.0, diameter=100, volume=0.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume25 = roundVolumeList7.set((int) (short) -1, roundVolume16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        Main main32 = new Main();
        main32.init();
        main32.init();
        javafx.application.Application.Parameters parameters35 = main32.getParameters();
        boolean boolean36 = roundVolumeList7.contains((java.lang.Object) parameters35);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(parameters35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList5 = yourWood0.getWood();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor7 = roundVolumeList5.listIterator(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList5);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream4 = roundVolumeList3.stream();
        java.lang.Class<?> wildcardClass5 = roundVolumeStream4.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertNotNull(roundVolumeStream4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream4 = roundVolumeList3.stream();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        boolean boolean18 = roundVolumeList12.contains((java.lang.Object) yourWood13);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList12.iterator();
        logic.YourWood yourWood21 = new logic.YourWood();
// flaky:         yourWood21.addWood((double) 1L, (int) (byte) 100);
        yourWood21.lengthFirstSortWood();
        yourWood21.diameterFirstSortWood();
        yourWood21.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList28 = yourWood21.getWood();
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        boolean boolean34 = roundVolumeList28.contains((java.lang.Object) yourWood29);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList28.iterator();
        boolean boolean36 = roundVolumeList12.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList28);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor38 = null; // flaky: roundVolumeList28.listIterator((int) (short) 1);
        boolean boolean39 = roundVolumeList3.remove((java.lang.Object) roundVolumeList28);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume41 = roundVolumeList28.remove((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertNotNull(roundVolumeStream4);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor19);
        org.junit.Assert.assertNotNull(roundVolumeList28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream3 = roundVolumeList2.parallelStream();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume7.setVolume((double) 10);
        java.lang.String str10 = roundVolume7.toString();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume();
        roundVolume11.setVolume((double) 0);
        double double14 = roundVolume11.getVolume();
        java.lang.String str15 = roundVolume11.toString();
        double double16 = roundVolume11.getLength();
        roundVolume11.setLength((double) 'a');
        java.lang.String str19 = roundVolume11.toString();
        logic.RoundVolume roundVolume23 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        double double29 = roundVolume24.getLength();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume33.setVolume((double) 10);
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str40 = roundVolume39.toString();
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume59.setVolume((double) 10);
        java.lang.String str62 = roundVolume59.toString();
        logic.RoundVolume[] roundVolumeArray63 = new logic.RoundVolume[] { roundVolume7, roundVolume11, roundVolume23, roundVolume24, roundVolume33, roundVolume39, roundVolume41, roundVolume44, roundVolume59 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64, roundVolumeArray63);
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        yourWood66.diameterFirstSortWood();
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.YourWood yourWood74 = new logic.YourWood();
// flaky:         yourWood74.addWood((double) 1L, (int) (byte) 100);
        yourWood74.lengthFirstSortWood();
        boolean boolean79 = roundVolumeList73.contains((java.lang.Object) yourWood74);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList73.iterator();
        boolean boolean81 = roundVolumeList64.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        int int82 = roundVolumeList73.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator83 = roundVolumeList73.spliterator();
        int int84 = roundVolumeList2.lastIndexOf((java.lang.Object) roundVolumeList73);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList87 = roundVolumeList73.subList((int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeStream3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str10, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str40, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str62, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.lengthFirstSortWood();
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        logic.YourWood yourWood3 = new logic.YourWood();
// flaky:         yourWood3.addWood((double) 1L, (int) (byte) 100);
        yourWood3.lengthFirstSortWood();
        yourWood3.diameterFirstSortWood();
        yourWood3.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList10 = yourWood3.getWood();
        logic.YourWood yourWood11 = new logic.YourWood();
// flaky:         yourWood11.addWood((double) 1L, (int) (byte) 100);
        yourWood11.lengthFirstSortWood();
        boolean boolean16 = roundVolumeList10.contains((java.lang.Object) yourWood11);
        yourWood11.diameterFirstSortWood();
        boolean boolean18 = roundVolume0.equals((java.lang.Object) yourWood11);
        roundVolume0.setVolume((double) 0L);
        roundVolume0.setDiameter((int) '4');
        roundVolume0.setVolume((double) 'a');
        org.junit.Assert.assertNotNull(roundVolumeList10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream16 = roundVolumeList7.stream();
        java.lang.String[] strArray17 = new java.lang.String[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray18 = roundVolumeList7.toArray(strArray17);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeStream16);
        org.junit.Assert.assertNotNull(strArray17);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream92 = roundVolumeList69.parallelStream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor93 = roundVolumeList69.iterator();
        int int95 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=0.0, diameter=0, volume=-1.0)");
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(roundVolumeStream92);
        org.junit.Assert.assertNotNull(roundVolumeItor93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        logic.YourWood yourWood14 = new logic.YourWood();
// flaky:         yourWood14.addWood((double) 1L, (int) (byte) 100);
        yourWood14.lengthFirstSortWood();
        yourWood14.diameterFirstSortWood();
        yourWood14.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood14.getWood();
        logic.YourWood yourWood22 = new logic.YourWood();
// flaky:         yourWood22.addWood((double) 1L, (int) (byte) 100);
        yourWood22.lengthFirstSortWood();
        boolean boolean27 = roundVolumeList21.contains((java.lang.Object) yourWood22);
        boolean boolean28 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList21);
        int int30 = roundVolumeList21.indexOf((java.lang.Object) "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator31 = roundVolumeList21.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeSpliterator31);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        double double6 = roundVolume3.getLength();
        int int7 = roundVolume3.getDiameter();
        java.lang.String str8 = roundVolume3.toString();
        roundVolume3.setLength(1.0d);
        java.lang.Class<?> wildcardClass11 = roundVolume3.getClass();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=-1.0)" + "'", str8, "RoundVolume(length=0.0, diameter=0, volume=-1.0)");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList7.equals((java.lang.Object) roundVolumeList39);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        int int50 = roundVolume49.getDiameter();
        Main main51 = new Main();
        main51.stop();
        logic.VolumeDB volumeDB53 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap54 = volumeDB53.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap55 = volumeDB53.getVolumes();
        java.lang.Object[] objArray57 = new java.lang.Object[] { roundVolume49, main51, strMap55, 100 };
        logic.RoundVolume roundVolume58 = new logic.RoundVolume();
        int int59 = roundVolume58.getDiameter();
        Main main60 = new Main();
        main60.stop();
        logic.VolumeDB volumeDB62 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap63 = volumeDB62.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap64 = volumeDB62.getVolumes();
        java.lang.Object[] objArray66 = new java.lang.Object[] { roundVolume58, main60, strMap64, 100 };
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        int int68 = roundVolume67.getDiameter();
        Main main69 = new Main();
        main69.stop();
        logic.VolumeDB volumeDB71 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap72 = volumeDB71.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap73 = volumeDB71.getVolumes();
        java.lang.Object[] objArray75 = new java.lang.Object[] { roundVolume67, main69, strMap73, 100 };
        java.lang.Object[][] objArray76 = new java.lang.Object[][] { objArray57, objArray66, objArray75 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[][] objArray77 = roundVolumeList7.toArray(objArray76);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(objArray76);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        boolean boolean17 = roundVolumeList7.contains((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        logic.RoundVolume roundVolume19 = new logic.RoundVolume();
        roundVolume19.setVolume((double) 0);
        roundVolume19.setDiameter(100);
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.add((-1), roundVolume19);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume17 = new logic.RoundVolume();
        roundVolume17.setVolume((double) 0);
        double double20 = roundVolume17.getVolume();
        roundVolume17.setLength((double) 10L);
        logic.RoundVolume roundVolume23 = new logic.RoundVolume();
        roundVolume23.setVolume((double) 0);
        double double26 = roundVolume23.getVolume();
        java.lang.String str27 = roundVolume23.toString();
        boolean boolean28 = roundVolume17.equals((java.lang.Object) str27);
        roundVolume17.setLength((double) 10L);
        boolean boolean32 = roundVolume17.equals((java.lang.Object) "CASPIAN");
        roundVolumeList15.add(0, roundVolume17);
        java.util.Collection<logic.RoundVolume> roundVolumeCollection34 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = roundVolumeList15.addAll(roundVolumeCollection34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str27, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream92 = roundVolumeList69.parallelStream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor93 = roundVolumeList69.iterator();
        Main main94 = new Main();
        main94.init();
        javafx.application.Application.Parameters parameters96 = main94.getParameters();
        int int97 = roundVolumeList69.indexOf((java.lang.Object) main94);
        main94.stop();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(roundVolumeStream92);
        org.junit.Assert.assertNotNull(roundVolumeItor93);
        org.junit.Assert.assertNull(parameters96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        roundVolume3.setDiameter(1);
        double double6 = roundVolume3.getLength();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=35.0, diameter=0, volume=10.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        logic.RoundVolume roundVolume81 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double82 = roundVolume81.getLength();
        boolean boolean83 = roundVolumeList60.add(roundVolume81);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream84 = roundVolumeList60.stream();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator85 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList60.replaceAll(roundVolumeUnaryOperator85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream84);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        java.lang.Class<?> wildcardClass6 = roundVolume0.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume91 = roundVolumeList7.get((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.lang.CharSequence[] charSequenceArray84 = new java.lang.CharSequence[] { "CASPIAN", "RoundVolume(length=0.0, diameter=100, volume=0.0)", "hi!", "RoundVolume(length=97.0, diameter=0, volume=0.0)", "RoundVolume(length=97.0, diameter=0, volume=0.0)", "RoundVolume(length=97.0, diameter=0, volume=0.0)" };
        java.lang.CharSequence[] charSequenceArray85 = roundVolumeList60.toArray(charSequenceArray84);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume87 = roundVolumeList60.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(charSequenceArray84);
        org.junit.Assert.assertNotNull(charSequenceArray85);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        java.lang.String str8 = roundVolume0.toString();
        roundVolume0.setVolume((double) ' ');
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str8, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList57.listIterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        roundVolume67.setLength((double) (-1L));
        boolean boolean73 = roundVolumeList57.add(roundVolume67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor74 = roundVolumeList57.iterator();
        boolean boolean75 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        boolean boolean76 = roundVolumeList57.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList9 = yourWood0.getWood();
        java.lang.Class<?> wildcardClass10 = yourWood0.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertNotNull(roundVolumeList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        logic.YourWood yourWood14 = new logic.YourWood();
// flaky:         yourWood14.addWood((double) 1L, (int) (byte) 100);
        yourWood14.lengthFirstSortWood();
        yourWood14.diameterFirstSortWood();
        yourWood14.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood14.getWood();
        logic.YourWood yourWood22 = new logic.YourWood();
// flaky:         yourWood22.addWood((double) 1L, (int) (byte) 100);
        yourWood22.lengthFirstSortWood();
        boolean boolean27 = roundVolumeList21.contains((java.lang.Object) yourWood22);
        boolean boolean28 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList21);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator29 = roundVolumeList21.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor31 = roundVolumeList21.listIterator((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator29);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        roundVolumeList23.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor36 = roundVolumeList23.listIterator(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean80 = roundVolumeList60.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume82 = roundVolumeList60.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean79 = roundVolumeList60.remove((java.lang.Object) false);
        logic.YourWood yourWood80 = new logic.YourWood();
// flaky:         yourWood80.addWood((double) 1L, (int) (byte) 100);
        yourWood80.lengthFirstSortWood();
        yourWood80.diameterFirstSortWood();
        yourWood80.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList87 = yourWood80.getWood();
        logic.YourWood yourWood88 = new logic.YourWood();
// flaky:         yourWood88.addWood((double) 1L, (int) (byte) 100);
        yourWood88.lengthFirstSortWood();
        boolean boolean93 = roundVolumeList87.contains((java.lang.Object) yourWood88);
        yourWood88.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList95 = yourWood88.getWood();
        int int96 = roundVolumeList60.lastIndexOf((java.lang.Object) yourWood88);
        java.util.Collection<logic.RoundVolume> roundVolumeCollection97 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = roundVolumeList60.containsAll(roundVolumeCollection97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeList87);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(roundVolumeList95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream4 = roundVolumeList3.stream();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        boolean boolean18 = roundVolumeList12.contains((java.lang.Object) yourWood13);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList12.iterator();
        logic.YourWood yourWood21 = new logic.YourWood();
// flaky:         yourWood21.addWood((double) 1L, (int) (byte) 100);
        yourWood21.lengthFirstSortWood();
        yourWood21.diameterFirstSortWood();
        yourWood21.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList28 = yourWood21.getWood();
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        boolean boolean34 = roundVolumeList28.contains((java.lang.Object) yourWood29);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList28.iterator();
        boolean boolean36 = roundVolumeList12.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList28);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor38 = null; // flaky: roundVolumeList28.listIterator((int) (short) 1);
        boolean boolean39 = roundVolumeList3.remove((java.lang.Object) roundVolumeList28);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume41 = roundVolumeList28.remove((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertNotNull(roundVolumeStream4);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor19);
        org.junit.Assert.assertNotNull(roundVolumeList28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        Main main0 = new Main();
        javafx.application.HostServices hostServices1 = main0.getHostServices();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.HostServices hostServices3 = main0.getHostServices();
        org.junit.Assert.assertNotNull(hostServices1);
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNotNull(hostServices3);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.lang.Object[] objArray92 = roundVolumeList69.toArray();
        roundVolumeList69.clear();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume95 = roundVolumeList69.remove((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=0.0, diameter=0, volume=100.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        java.lang.String str8 = roundVolume0.toString();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.lengthFirstSortWood();
        boolean boolean17 = roundVolume0.equals((java.lang.Object) yourWood9);
        double double18 = roundVolume0.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str8, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 97.0d + "'", double18 == 97.0d);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=0.0, diameter=100, volume=0.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        roundVolumeList69.clear();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator81 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList69.replaceAll(roundVolumeUnaryOperator81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        roundVolumeList23.clear();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        boolean boolean36 = roundVolumeList23.equals((java.lang.Object) roundVolume35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor38 = roundVolumeList23.listIterator((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        java.lang.String[] strArray2 = new java.lang.String[] { "RoundVolume(length=0.0, diameter=100, volume=0.0)", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor33 = null; // flaky: roundVolumeList23.listIterator((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList36 = roundVolumeList23.subList(10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor33);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList23.replaceAll(roundVolumeUnaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        java.lang.String[] strArray6 = new java.lang.String[] { "RoundVolume(length=52.0, diameter=0, volume=0.0)", "RoundVolume(length=0.0, diameter=100, volume=0.0)", "RoundVolume(length=0.0, diameter=0, volume=-1.0)", "", "RoundVolume(length=52.0, diameter=0, volume=0.0)", "RoundVolume(length=-1.0, diameter=0, volume=0.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        boolean boolean38 = roundVolumeList23.remove((java.lang.Object) (-1));
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume40 = roundVolumeList23.remove((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        logic.RoundVolume roundVolume18 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double19 = roundVolume18.getLength();
        int int20 = roundVolume18.getDiameter();
        double double21 = roundVolume18.getLength();
        int int22 = roundVolume18.getDiameter();
        boolean boolean23 = roundVolumeList7.contains((java.lang.Object) int22);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume25 = roundVolumeList7.get((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        yourWood0.lengthFirstSortWood();
        yourWood0.lengthFirstSortWood();
        yourWood0.lengthFirstSortWood();
        org.junit.Assert.assertNotNull(roundVolumeList2);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.lang.Object[] objArray66 = roundVolumeList57.toArray();
        java.lang.Object[] objArray67 = roundVolumeList57.toArray();
        boolean boolean68 = roundVolumeList7.equals((java.lang.Object) roundVolumeList57);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume70 = roundVolumeList57.remove((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=-1.0, diameter=0, volume=0.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        java.lang.String[] strArray3 = new java.lang.String[] { "MODENA", "RoundVolume(length=10.0, diameter=100, volume=0.0)", "" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream31 = roundVolumeList23.stream();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        logic.RoundVolume roundVolume50 = null; // flaky: roundVolumeList15.remove(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream51 = roundVolumeList15.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList54 = roundVolumeList15.subList(100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeStream31);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertNotNull(roundVolume50);
        org.junit.Assert.assertNotNull(roundVolumeStream51);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.lang.Object[] objArray92 = roundVolumeList69.toArray();
        roundVolumeList69.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor95 = roundVolumeList69.listIterator(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        roundVolumeList2.clear();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor5 = roundVolumeList2.listIterator(0);
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeItor5);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        yourWood78.diameterFirstSortWood();
        yourWood78.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood78.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList86 = yourWood78.getWood();
        int int87 = roundVolumeList69.lastIndexOf((java.lang.Object) roundVolumeList86);
        java.lang.Object[] objArray88 = roundVolumeList86.toArray();
        java.lang.Class<?> wildcardClass89 = objArray88.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertNotNull(roundVolumeList86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(objArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.lang.Object obj16 = null;
        int int17 = roundVolumeList7.indexOf(obj16);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        yourWood42.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList49 = yourWood42.getWood();
        logic.RoundVolume roundVolume51 = new logic.RoundVolume();
        roundVolume51.setVolume((double) 0);
        double double54 = roundVolume51.getVolume();
        roundVolume51.setLength((double) 10L);
        logic.RoundVolume roundVolume57 = new logic.RoundVolume();
        roundVolume57.setVolume((double) 0);
        double double60 = roundVolume57.getVolume();
        java.lang.String str61 = roundVolume57.toString();
        boolean boolean62 = roundVolume51.equals((java.lang.Object) str61);
        roundVolume51.setLength((double) 10L);
        boolean boolean66 = roundVolume51.equals((java.lang.Object) "CASPIAN");
        roundVolumeList49.add(0, roundVolume51);
        logic.RoundVolume roundVolume71 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean72 = roundVolumeList49.remove((java.lang.Object) (byte) 1);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor73 = roundVolumeList49.listIterator();
        logic.RoundVolume roundVolume78 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume78.setVolume((double) 10);
        java.lang.String str81 = roundVolume78.toString();
        logic.RoundVolume roundVolume82 = roundVolumeList49.set((int) (byte) 0, roundVolume78);
        roundVolume78.setDiameter((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume85 = roundVolumeList23.set((int) (short) -1, roundVolume78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeList49);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str61, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor73);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str81, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolume82);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume20.setVolume((double) 10);
        java.lang.String str23 = roundVolume20.toString();
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        double double29 = roundVolume24.getLength();
        roundVolume24.setLength((double) 'a');
        java.lang.String str32 = roundVolume24.toString();
        logic.RoundVolume roundVolume36 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        double double40 = roundVolume37.getVolume();
        java.lang.String str41 = roundVolume37.toString();
        double double42 = roundVolume37.getLength();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume46.setVolume((double) 10);
        logic.RoundVolume roundVolume52 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str53 = roundVolume52.toString();
        logic.RoundVolume roundVolume54 = new logic.RoundVolume();
        roundVolume54.setVolume((double) 0);
        logic.RoundVolume roundVolume57 = new logic.RoundVolume();
        roundVolume57.setVolume((double) 0);
        double double60 = roundVolume57.getVolume();
        roundVolume57.setLength((double) 10L);
        logic.RoundVolume roundVolume63 = new logic.RoundVolume();
        roundVolume63.setVolume((double) 0);
        double double66 = roundVolume63.getVolume();
        java.lang.String str67 = roundVolume63.toString();
        boolean boolean68 = roundVolume57.equals((java.lang.Object) str67);
        logic.RoundVolume roundVolume72 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume72.setVolume((double) 10);
        java.lang.String str75 = roundVolume72.toString();
        logic.RoundVolume[] roundVolumeArray76 = new logic.RoundVolume[] { roundVolume20, roundVolume24, roundVolume36, roundVolume37, roundVolume46, roundVolume52, roundVolume54, roundVolume57, roundVolume72 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList77 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList77, roundVolumeArray76);
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        yourWood79.diameterFirstSortWood();
        yourWood79.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList86 = yourWood79.getWood();
        logic.YourWood yourWood87 = new logic.YourWood();
// flaky:         yourWood87.addWood((double) 1L, (int) (byte) 100);
        yourWood87.lengthFirstSortWood();
        boolean boolean92 = roundVolumeList86.contains((java.lang.Object) yourWood87);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor93 = roundVolumeList86.iterator();
        boolean boolean94 = roundVolumeList77.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList86);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor95 = roundVolumeList86.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream96 = roundVolumeList86.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = roundVolumeList7.addAll((int) 'a', (java.util.Collection<logic.RoundVolume>) roundVolumeList86);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str23, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str32, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str41, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str53, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str67, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str75, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(roundVolumeList86);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor95);
        org.junit.Assert.assertNotNull(roundVolumeStream96);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator40 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList23.replaceAll(roundVolumeUnaryOperator40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean79 = roundVolumeList60.remove((java.lang.Object) false);
        Main main80 = new Main();
        main80.init();
        javafx.application.Application.Parameters parameters82 = main80.getParameters();
        boolean boolean83 = roundVolumeList60.contains((java.lang.Object) parameters82);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor84 = roundVolumeList60.iterator();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(parameters82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor84);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        Main main0 = new Main();
        main0.init();
        main0.init();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        main0.stop();
        javafx.application.Application.Parameters parameters5 = main0.getParameters();
        javafx.application.Application.Parameters parameters6 = main0.getParameters();
        org.junit.Assert.assertNull(parameters3);
        org.junit.Assert.assertNull(parameters5);
        org.junit.Assert.assertNull(parameters6);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        roundVolume3.setLength(100.0d);
        roundVolume3.setLength(52.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.lang.Object[] objArray66 = roundVolumeList57.toArray();
        java.lang.Object[] objArray67 = roundVolumeList57.toArray();
        boolean boolean68 = roundVolumeList7.equals((java.lang.Object) roundVolumeList57);
        java.lang.Object obj69 = null;
        boolean boolean70 = roundVolumeList57.contains(obj69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor71 = roundVolumeList57.iterator();
        java.util.Collection<logic.RoundVolume> roundVolumeCollection73 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = roundVolumeList57.addAll((int) (byte) 100, roundVolumeCollection73);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor71);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (-1), (int) '#', 0.0d);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=10.0, diameter=100, volume=0.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        logic.RoundVolume roundVolume17 = new logic.RoundVolume();
        roundVolume17.setVolume((double) 0);
        logic.RoundVolume roundVolume23 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume23.setVolume((double) 10);
        java.lang.String str26 = roundVolume23.toString();
        logic.RoundVolume roundVolume27 = new logic.RoundVolume();
        roundVolume27.setVolume((double) 0);
        double double30 = roundVolume27.getVolume();
        java.lang.String str31 = roundVolume27.toString();
        double double32 = roundVolume27.getLength();
        roundVolume27.setLength((double) 'a');
        java.lang.String str35 = roundVolume27.toString();
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        java.lang.String str44 = roundVolume40.toString();
        double double45 = roundVolume40.getLength();
        logic.RoundVolume roundVolume49 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume49.setVolume((double) 10);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str56 = roundVolume55.toString();
        logic.RoundVolume roundVolume57 = new logic.RoundVolume();
        roundVolume57.setVolume((double) 0);
        logic.RoundVolume roundVolume60 = new logic.RoundVolume();
        roundVolume60.setVolume((double) 0);
        double double63 = roundVolume60.getVolume();
        roundVolume60.setLength((double) 10L);
        logic.RoundVolume roundVolume66 = new logic.RoundVolume();
        roundVolume66.setVolume((double) 0);
        double double69 = roundVolume66.getVolume();
        java.lang.String str70 = roundVolume66.toString();
        boolean boolean71 = roundVolume60.equals((java.lang.Object) str70);
        logic.RoundVolume roundVolume75 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume75.setVolume((double) 10);
        java.lang.String str78 = roundVolume75.toString();
        logic.RoundVolume[] roundVolumeArray79 = new logic.RoundVolume[] { roundVolume23, roundVolume27, roundVolume39, roundVolume40, roundVolume49, roundVolume55, roundVolume57, roundVolume60, roundVolume75 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList80 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList80, roundVolumeArray79);
        logic.YourWood yourWood82 = new logic.YourWood();
// flaky:         yourWood82.addWood((double) 1L, (int) (byte) 100);
        yourWood82.lengthFirstSortWood();
        yourWood82.diameterFirstSortWood();
        yourWood82.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList89 = yourWood82.getWood();
        logic.YourWood yourWood90 = new logic.YourWood();
// flaky:         yourWood90.addWood((double) 1L, (int) (byte) 100);
        yourWood90.lengthFirstSortWood();
        boolean boolean95 = roundVolumeList89.contains((java.lang.Object) yourWood90);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor96 = roundVolumeList89.iterator();
        boolean boolean97 = roundVolumeList80.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList89);
        boolean boolean98 = roundVolume17.equals((java.lang.Object) roundVolumeList80);
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.add((int) ' ', roundVolume17);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str26, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str31, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str35, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str44, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str56, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str70, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str78, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(roundVolumeList89);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.lang.Object[] objArray90 = roundVolumeList7.toArray();
        boolean boolean91 = roundVolumeList7.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor93 = roundVolumeList7.listIterator((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator14 = roundVolumeList7.spliterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        boolean boolean30 = roundVolumeList22.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray31 = roundVolumeList22.toArray();
        boolean boolean32 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList22);
        logic.YourWood yourWood33 = new logic.YourWood();
// flaky:         yourWood33.addWood((double) 1L, (int) (byte) 100);
        yourWood33.lengthFirstSortWood();
        yourWood33.diameterFirstSortWood();
        yourWood33.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList40 = yourWood33.getWood();
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        boolean boolean46 = roundVolumeList40.contains((java.lang.Object) yourWood41);
        yourWood41.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList48 = yourWood41.getWood();
        logic.YourWood yourWood49 = new logic.YourWood();
// flaky:         yourWood49.addWood((double) 1L, (int) (byte) 100);
        yourWood49.lengthFirstSortWood();
        yourWood49.diameterFirstSortWood();
        yourWood49.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList56 = yourWood49.getWood();
        logic.YourWood yourWood57 = new logic.YourWood();
// flaky:         yourWood57.addWood((double) 1L, (int) (byte) 100);
        yourWood57.lengthFirstSortWood();
        boolean boolean62 = roundVolumeList56.contains((java.lang.Object) yourWood57);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor63 = roundVolumeList56.iterator();
        boolean boolean64 = roundVolumeList56.isEmpty();
        logic.YourWood yourWood65 = new logic.YourWood();
// flaky:         yourWood65.addWood((double) 1L, (int) (byte) 100);
        yourWood65.lengthFirstSortWood();
        yourWood65.diameterFirstSortWood();
        yourWood65.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList72 = yourWood65.getWood();
        logic.YourWood yourWood73 = new logic.YourWood();
// flaky:         yourWood73.addWood((double) 1L, (int) (byte) 100);
        yourWood73.lengthFirstSortWood();
        boolean boolean78 = roundVolumeList72.contains((java.lang.Object) yourWood73);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor79 = roundVolumeList72.iterator();
        boolean boolean80 = roundVolumeList56.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList72);
        int int81 = roundVolumeList48.indexOf((java.lang.Object) roundVolumeList72);
        logic.RoundVolume roundVolume82 = new logic.RoundVolume();
        roundVolume82.setVolume((double) 0);
        double double85 = roundVolume82.getVolume();
        roundVolume82.setLength((double) (-1L));
        boolean boolean88 = roundVolumeList48.add(roundVolume82);
        boolean boolean89 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList48);
        logic.RoundVolume roundVolume91 = new logic.RoundVolume();
        roundVolume91.setVolume((double) 0);
        double double94 = roundVolume91.getVolume();
        roundVolume91.setLength((double) (-1L));
        java.lang.String str97 = roundVolume91.toString();
        roundVolumeList7.add((int) (byte) 0, roundVolume91);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor99 = roundVolumeList7.listIterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(roundVolumeList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(roundVolumeList48);
        org.junit.Assert.assertNotNull(roundVolumeList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeList72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "RoundVolume(length=-1.0, diameter=0, volume=0.0)" + "'", str97, "RoundVolume(length=-1.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertNotNull(roundVolumeItor99);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        java.lang.Object[] objArray79 = roundVolumeList69.toArray();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator80 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList69.replaceAll(roundVolumeUnaryOperator80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertNotNull(objArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=0.0, diameter=0, volume=0.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        Main main0 = new Main();
        main0.init();
        main0.init();
        main0.init();
        main0.stop();
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setDiameter((int) 'a');
        roundVolume0.setLength((double) (byte) 1);
        logic.YourWood yourWood12 = new logic.YourWood();
// flaky:         yourWood12.addWood((double) 1L, (int) (byte) 100);
        yourWood12.lengthFirstSortWood();
        yourWood12.diameterFirstSortWood();
        yourWood12.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList19 = yourWood12.getWood();
        logic.YourWood yourWood20 = new logic.YourWood();
// flaky:         yourWood20.addWood((double) 1L, (int) (byte) 100);
        yourWood20.lengthFirstSortWood();
        boolean boolean25 = roundVolumeList19.contains((java.lang.Object) yourWood20);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor26 = roundVolumeList19.iterator();
        boolean boolean27 = roundVolumeList19.isEmpty();
        logic.YourWood yourWood28 = new logic.YourWood();
// flaky:         yourWood28.addWood((double) 1L, (int) (byte) 100);
        yourWood28.lengthFirstSortWood();
        yourWood28.diameterFirstSortWood();
        yourWood28.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList35 = yourWood28.getWood();
        logic.YourWood yourWood36 = new logic.YourWood();
// flaky:         yourWood36.addWood((double) 1L, (int) (byte) 100);
        yourWood36.lengthFirstSortWood();
        boolean boolean41 = roundVolumeList35.contains((java.lang.Object) yourWood36);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor42 = roundVolumeList35.iterator();
        boolean boolean43 = roundVolumeList19.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList35);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        java.lang.String str48 = roundVolume44.toString();
        double double49 = roundVolume44.getLength();
        roundVolume44.setLength((double) 'a');
        boolean boolean52 = roundVolumeList19.add(roundVolume44);
        double double53 = roundVolume44.getLength();
        roundVolume44.setLength((double) '4');
        double double56 = roundVolume44.getVolume();
        boolean boolean57 = roundVolume0.equals((java.lang.Object) roundVolume44);
        java.lang.String str58 = roundVolume44.toString();
        roundVolume44.setLength(0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(roundVolumeList19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(roundVolumeList35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor42);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str48, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 97.0d + "'", double53 == 97.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=52.0, diameter=0, volume=0.0)" + "'", str58, "RoundVolume(length=52.0, diameter=0, volume=0.0)");
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setLength((double) 'a');
        boolean boolean40 = roundVolumeList7.add(roundVolume32);
        java.util.HashMap[] hashMapArray42 = new java.util.HashMap[0];
        @SuppressWarnings("unchecked")
        java.util.HashMap<java.lang.String, logic.RoundVolume>[] strMapArray43 = (java.util.HashMap<java.lang.String, logic.RoundVolume>[]) hashMapArray42;
        // The following exception was thrown during execution in test generation
        try {
            java.util.HashMap<java.lang.String, logic.RoundVolume>[] strMapArray44 = roundVolumeList7.toArray((java.util.HashMap<java.lang.String, logic.RoundVolume>[]) hashMapArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(hashMapArray42);
        org.junit.Assert.assertNotNull(strMapArray43);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        logic.RoundVolume roundVolume80 = new logic.RoundVolume();
        roundVolume80.setVolume((double) 0);
        double double83 = roundVolume80.getVolume();
        roundVolume80.setLength((double) 10L);
        logic.RoundVolume roundVolume86 = new logic.RoundVolume();
        roundVolume86.setVolume((double) 0);
        double double89 = roundVolume86.getVolume();
        java.lang.String str90 = roundVolume86.toString();
        boolean boolean91 = roundVolume80.equals((java.lang.Object) str90);
        roundVolume80.setLength((double) 10L);
        boolean boolean95 = roundVolume80.equals((java.lang.Object) "CASPIAN");
        boolean boolean96 = roundVolumeList60.contains((java.lang.Object) boolean95);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList99 = roundVolumeList60.subList((int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str90, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream31 = roundVolumeList23.stream();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList15.listIterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeStream31);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeItor49);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.lang.Class<?> wildcardClass16 = roundVolumeStream15.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume17 = new logic.RoundVolume();
        roundVolume17.setVolume((double) 0);
        double double20 = roundVolume17.getVolume();
        roundVolume17.setLength((double) 10L);
        logic.RoundVolume roundVolume23 = new logic.RoundVolume();
        roundVolume23.setVolume((double) 0);
        double double26 = roundVolume23.getVolume();
        java.lang.String str27 = roundVolume23.toString();
        boolean boolean28 = roundVolume17.equals((java.lang.Object) str27);
        roundVolume17.setLength((double) 10L);
        boolean boolean32 = roundVolume17.equals((java.lang.Object) "CASPIAN");
        roundVolumeList15.add(0, roundVolume17);
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean38 = roundVolumeList15.remove((java.lang.Object) (byte) 1);
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        yourWood47.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList54 = yourWood47.getWood();
        logic.RoundVolume roundVolume56 = new logic.RoundVolume();
        roundVolume56.setVolume((double) 0);
        double double59 = roundVolume56.getVolume();
        roundVolume56.setLength((double) 10L);
        logic.RoundVolume roundVolume62 = new logic.RoundVolume();
        roundVolume62.setVolume((double) 0);
        double double65 = roundVolume62.getVolume();
        java.lang.String str66 = roundVolume62.toString();
        boolean boolean67 = roundVolume56.equals((java.lang.Object) str66);
        roundVolume56.setLength((double) 10L);
        boolean boolean71 = roundVolume56.equals((java.lang.Object) "CASPIAN");
        roundVolumeList54.add(0, roundVolume56);
        boolean boolean73 = roundVolumeList54.isEmpty();
        boolean boolean74 = roundVolumeList15.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList54);
        logic.RoundVolume roundVolume75 = new logic.RoundVolume();
        roundVolume75.setVolume((double) 0);
        double double78 = roundVolume75.getVolume();
        java.lang.String str79 = roundVolume75.toString();
        int int80 = roundVolume75.getDiameter();
        roundVolume75.setLength((double) '#');
        roundVolume75.setDiameter((int) 'a');
        roundVolume75.setLength((double) (byte) 1);
        boolean boolean87 = roundVolumeList15.add(roundVolume75);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str27, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeList54);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str66, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str79, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        logic.RoundVolume roundVolume82 = new logic.RoundVolume(1.0d, (int) (short) 10, (double) 10L);
        boolean boolean83 = roundVolumeList69.add(roundVolume82);
        boolean boolean85 = roundVolumeList69.equals((java.lang.Object) (short) 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator14 = roundVolumeList7.spliterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        boolean boolean30 = roundVolumeList22.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray31 = roundVolumeList22.toArray();
        boolean boolean32 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList22);
        roundVolumeList7.clear();
        java.util.Collection<logic.RoundVolume> roundVolumeCollection34 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = roundVolumeList7.retainAll(roundVolumeCollection34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        roundVolume0.setDiameter(100);
        java.lang.String str5 = roundVolume0.toString();
        roundVolume0.setVolume((double) (-1.0f));
        roundVolume0.setVolume((double) (short) -1);
        logic.YourWood yourWood10 = new logic.YourWood();
// flaky:         yourWood10.addWood((double) 1L, (int) (byte) 100);
        yourWood10.lengthFirstSortWood();
        yourWood10.diameterFirstSortWood();
        yourWood10.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList17 = yourWood10.getWood();
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        boolean boolean23 = roundVolumeList17.contains((java.lang.Object) yourWood18);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor24 = roundVolumeList17.iterator();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        yourWood26.diameterFirstSortWood();
        yourWood26.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList33 = yourWood26.getWood();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        boolean boolean39 = roundVolumeList33.contains((java.lang.Object) yourWood34);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor40 = roundVolumeList33.iterator();
        boolean boolean41 = roundVolumeList17.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList33);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor42 = roundVolumeList33.listIterator();
        java.lang.Object[] objArray43 = roundVolumeList33.toArray();
        roundVolumeList33.clear();
        logic.RoundVolume roundVolume45 = new logic.RoundVolume();
        boolean boolean46 = roundVolumeList33.equals((java.lang.Object) roundVolume45);
        boolean boolean47 = roundVolume0.equals((java.lang.Object) roundVolume45);
        roundVolume0.setLength((double) 1.0f);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str5, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertNotNull(roundVolumeList17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor24);
        org.junit.Assert.assertNotNull(roundVolumeList33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor42);
        org.junit.Assert.assertNotNull(objArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (short) 0, 0, (double) '#');
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        java.lang.String[] strArray2 = new java.lang.String[] { "RoundVolume(length=0.0, diameter=0, volume=0.0)", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList7.equals((java.lang.Object) roundVolumeList39);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        double double55 = roundVolume50.getLength();
        java.lang.String str56 = roundVolume50.toString();
        double double57 = roundVolume50.getLength();
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList39.add((int) '#', roundVolume50);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str56, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean80 = roundVolumeList60.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList83 = roundVolumeList60.subList((int) ' ', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        roundVolume32.setLength((double) 10L);
        logic.RoundVolume roundVolume38 = new logic.RoundVolume();
        roundVolume38.setVolume((double) 0);
        double double41 = roundVolume38.getVolume();
        java.lang.String str42 = roundVolume38.toString();
        boolean boolean43 = roundVolume32.equals((java.lang.Object) str42);
        double double44 = roundVolume32.getVolume();
        boolean boolean45 = roundVolumeList7.add(roundVolume32);
        int int46 = roundVolumeList7.size();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str42, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream92 = roundVolumeList69.parallelStream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor93 = roundVolumeList69.iterator();
        Main main94 = new Main();
        main94.init();
        javafx.application.Application.Parameters parameters96 = main94.getParameters();
        int int97 = roundVolumeList69.indexOf((java.lang.Object) main94);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor98 = roundVolumeList69.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream99 = roundVolumeList69.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(roundVolumeStream92);
        org.junit.Assert.assertNotNull(roundVolumeItor93);
        org.junit.Assert.assertNull(parameters96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeItor98);
        org.junit.Assert.assertNotNull(roundVolumeStream99);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.lang.Object[] objArray66 = roundVolumeList57.toArray();
        java.lang.Object[] objArray67 = roundVolumeList57.toArray();
        boolean boolean68 = roundVolumeList7.equals((java.lang.Object) roundVolumeList57);
        java.lang.Object obj69 = null;
        boolean boolean70 = roundVolumeList57.contains(obj69);
        boolean boolean71 = roundVolumeList57.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.lengthFirstSortWood();
        yourWood8.diameterFirstSortWood();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator80 = roundVolumeList60.spliterator();
        boolean boolean82 = roundVolumeList60.remove((java.lang.Object) (short) 10);
        logic.RoundVolume roundVolume84 = new logic.RoundVolume();
        roundVolume84.setVolume((double) 0);
        roundVolume84.setDiameter(100);
        java.lang.String str89 = roundVolume84.toString();
        boolean boolean91 = roundVolume84.equals((java.lang.Object) (-1L));
        java.lang.String str92 = roundVolume84.toString();
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList60.add((-1), roundVolume84);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeSpliterator80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str89, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str92, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.io.Serializable[] serializableArray92 = new java.io.Serializable[] { 1.0d, (-1L) };
        java.io.Serializable[] serializableArray93 = roundVolumeList69.toArray(serializableArray92);
        logic.RoundVolume roundVolume95 = null;
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume96 = roundVolumeList69.set((int) '4', roundVolume95);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(serializableArray92);
        org.junit.Assert.assertNotNull(serializableArray93);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        boolean boolean34 = roundVolumeList23.isEmpty();
        boolean boolean35 = roundVolumeList23.isEmpty();
        logic.YourWood yourWood36 = new logic.YourWood();
// flaky:         yourWood36.addWood((double) 1L, (int) (byte) 100);
        yourWood36.lengthFirstSortWood();
        yourWood36.diameterFirstSortWood();
        yourWood36.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList43 = yourWood36.getWood();
        logic.YourWood yourWood44 = new logic.YourWood();
// flaky:         yourWood44.addWood((double) 1L, (int) (byte) 100);
        yourWood44.lengthFirstSortWood();
        boolean boolean49 = roundVolumeList43.contains((java.lang.Object) yourWood44);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList43.iterator();
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        boolean boolean67 = roundVolumeList43.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList59);
        logic.RoundVolume roundVolume68 = new logic.RoundVolume();
        roundVolume68.setVolume((double) 0);
        double double71 = roundVolume68.getVolume();
        roundVolume68.setLength((double) 10L);
        logic.RoundVolume roundVolume74 = new logic.RoundVolume();
        roundVolume74.setVolume((double) 0);
        double double77 = roundVolume74.getVolume();
        java.lang.String str78 = roundVolume74.toString();
        boolean boolean79 = roundVolume68.equals((java.lang.Object) str78);
        double double80 = roundVolume68.getVolume();
        boolean boolean81 = roundVolumeList43.add(roundVolume68);
        boolean boolean82 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList43);
        java.util.Collection<logic.RoundVolume> roundVolumeCollection83 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = roundVolumeList23.retainAll(roundVolumeCollection83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(roundVolumeList43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str78, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList40 = yourWood32.getWood();
        boolean boolean41 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList40);
        logic.RoundVolume roundVolume43 = null; // flaky: roundVolumeList23.get((int) (byte) 1);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertNotNull(roundVolumeList40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolume43);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) (short) 0);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.replaceAll(roundVolumeUnaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume17 = roundVolumeList15.get((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.lang.CharSequence[] charSequenceArray84 = new java.lang.CharSequence[] { "CASPIAN", "RoundVolume(length=0.0, diameter=100, volume=0.0)", "hi!", "RoundVolume(length=97.0, diameter=0, volume=0.0)", "RoundVolume(length=97.0, diameter=0, volume=0.0)", "RoundVolume(length=97.0, diameter=0, volume=0.0)" };
        java.lang.CharSequence[] charSequenceArray85 = roundVolumeList60.toArray(charSequenceArray84);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume87 = roundVolumeList60.remove((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(charSequenceArray84);
        org.junit.Assert.assertNotNull(charSequenceArray85);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.lang.Object[] objArray92 = roundVolumeList69.toArray();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume94 = roundVolumeList69.remove((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor36 = null; // flaky: roundVolumeList23.listIterator(1);
        java.lang.Class<?> wildcardClass37 = null; // flaky: roundVolumeItor36.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor36);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        java.lang.String[] strArray5 = new java.lang.String[] { "RoundVolume(length=52.0, diameter=0, volume=0.0)", "RoundVolume(length=97.0, diameter=0, volume=0.0)", "RoundVolume(length=52.0, diameter=0, volume=0.0)", "RoundVolume(length=10.0, diameter=100, volume=10.0)", "" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream79 = roundVolumeList69.parallelStream();
        int int80 = roundVolumeList69.size();
        logic.YourWood yourWood81 = new logic.YourWood();
        yourWood81.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList83 = yourWood81.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream84 = roundVolumeList83.parallelStream();
        int int85 = roundVolumeList69.lastIndexOf((java.lang.Object) roundVolumeStream84);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertNotNull(roundVolumeStream79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList83);
        org.junit.Assert.assertNotNull(roundVolumeStream84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getLength();
        roundVolume0.setVolume(100.0d);
        java.lang.String str6 = roundVolume0.toString();
        logic.YourWood yourWood7 = new logic.YourWood();
        yourWood7.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList9 = yourWood7.getWood();
        yourWood7.lengthFirstSortWood();
        yourWood7.lengthFirstSortWood();
        boolean boolean12 = roundVolume0.equals((java.lang.Object) yourWood7);
        roundVolume0.setVolume((double) 3);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str6, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
        org.junit.Assert.assertNotNull(roundVolumeList9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setDiameter((int) 'a');
        roundVolume0.setVolume((double) 100);
        double double12 = roundVolume0.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        roundVolume0.setLength((double) 10L);
        logic.RoundVolume roundVolume6 = new logic.RoundVolume();
        roundVolume6.setVolume((double) 0);
        double double9 = roundVolume6.getVolume();
        java.lang.String str10 = roundVolume6.toString();
        boolean boolean11 = roundVolume0.equals((java.lang.Object) str10);
        double double12 = roundVolume0.getVolume();
        double double13 = roundVolume0.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str10, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor79 = roundVolumeList60.listIterator((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        double double6 = roundVolume3.getLength();
        int int7 = roundVolume3.getDiameter();
        java.lang.String str8 = roundVolume3.toString();
        roundVolume3.setLength(1.0d);
        roundVolume3.setDiameter(5);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=-1.0)" + "'", str8, "RoundVolume(length=0.0, diameter=0, volume=-1.0)");
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList18 = roundVolumeList7.subList((int) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(97) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume36 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean37 = roundVolumeList23.contains((java.lang.Object) (byte) 1);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator38 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList23.replaceAll(roundVolumeUnaryOperator38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        boolean boolean38 = roundVolumeList23.remove((java.lang.Object) (-1));
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor53 = roundVolumeList46.iterator();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        yourWood55.diameterFirstSortWood();
        yourWood55.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList62 = yourWood55.getWood();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        boolean boolean68 = roundVolumeList62.contains((java.lang.Object) yourWood63);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList62.iterator();
        boolean boolean70 = roundVolumeList46.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor71 = roundVolumeList46.iterator();
        logic.RoundVolume roundVolume75 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double76 = roundVolume75.getLength();
        boolean boolean77 = roundVolumeList46.add(roundVolume75);
        boolean boolean78 = roundVolumeList23.contains((java.lang.Object) boolean77);
        java.lang.Object obj79 = null;
        int int80 = roundVolumeList23.indexOf(obj79);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList83 = null; // flaky: roundVolumeList23.subList(2, (int) (byte) 1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(2) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor53);
        org.junit.Assert.assertNotNull(roundVolumeList62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor71);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator17 = roundVolumeList15.spliterator();
        int int18 = roundVolumeList15.size();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator14 = roundVolumeList7.spliterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        boolean boolean30 = roundVolumeList22.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray31 = roundVolumeList22.toArray();
        boolean boolean32 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList22);
        roundVolumeList7.clear();
        java.lang.Object[] objArray34 = roundVolumeList7.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor36 = roundVolumeList7.listIterator(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume36 = new logic.RoundVolume(35.0d, (int) (short) 100, 10.0d);
// flaky:         roundVolumeList23.add(1, roundVolume36);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator38 = roundVolumeList23.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator38);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean79 = roundVolumeList60.remove((java.lang.Object) false);
        logic.YourWood yourWood80 = new logic.YourWood();
// flaky:         yourWood80.addWood((double) 1L, (int) (byte) 100);
        yourWood80.lengthFirstSortWood();
        yourWood80.diameterFirstSortWood();
        yourWood80.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList87 = yourWood80.getWood();
        logic.YourWood yourWood88 = new logic.YourWood();
// flaky:         yourWood88.addWood((double) 1L, (int) (byte) 100);
        yourWood88.lengthFirstSortWood();
        boolean boolean93 = roundVolumeList87.contains((java.lang.Object) yourWood88);
        yourWood88.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList95 = yourWood88.getWood();
        int int96 = roundVolumeList60.lastIndexOf((java.lang.Object) yourWood88);
        yourWood88.lengthFirstSortWood();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeList87);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(roundVolumeList95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        logic.RoundVolume roundVolume18 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double19 = roundVolume18.getLength();
        int int20 = roundVolume18.getDiameter();
        double double21 = roundVolume18.getLength();
        int int22 = roundVolume18.getDiameter();
        boolean boolean23 = roundVolumeList7.contains((java.lang.Object) int22);
        java.util.Collection<logic.RoundVolume> roundVolumeCollection24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = roundVolumeList7.removeAll(roundVolumeCollection24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getLength();
        roundVolume0.setVolume(100.0d);
        java.lang.String str6 = roundVolume0.toString();
        roundVolume0.setVolume((double) 0);
        int int9 = roundVolume0.getDiameter();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str6, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        java.lang.String[] strArray5 = new java.lang.String[] { "RoundVolume(length=0.0, diameter=0, volume=100.0)", "RoundVolume(length=0.0, diameter=100, volume=0.0)", "RoundVolume(length=0.0, diameter=0, volume=0.0)", "RoundVolume(length=52.0, diameter=0, volume=0.0)", "RoundVolume(length=10.0, diameter=100, volume=0.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        double double6 = roundVolume3.getLength();
        int int7 = roundVolume3.getDiameter();
        roundVolume3.setDiameter((int) '4');
        double double10 = roundVolume3.getLength();
        int int11 = roundVolume3.getDiameter();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood16.getWood();
        int int22 = roundVolumeList7.lastIndexOf((java.lang.Object) roundVolumeList21);
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        yourWood23.diameterFirstSortWood();
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList30 = yourWood23.getWood();
        logic.YourWood yourWood31 = new logic.YourWood();
// flaky:         yourWood31.addWood((double) 1L, (int) (byte) 100);
        yourWood31.lengthFirstSortWood();
        boolean boolean36 = roundVolumeList30.contains((java.lang.Object) yourWood31);
        yourWood31.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList38 = yourWood31.getWood();
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        roundVolume40.setLength((double) 10L);
        boolean boolean55 = roundVolume40.equals((java.lang.Object) "CASPIAN");
        roundVolumeList38.add(0, roundVolume40);
        logic.RoundVolume roundVolume60 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean61 = roundVolumeList38.remove((java.lang.Object) (byte) 1);
        boolean boolean62 = roundVolumeList21.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList38);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor63 = roundVolumeList38.iterator();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator64 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList38.replaceAll(roundVolumeUnaryOperator64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(roundVolumeList38);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor63);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream92 = roundVolumeList69.parallelStream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor93 = roundVolumeList69.iterator();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume95 = roundVolumeList69.get((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(roundVolumeStream92);
        org.junit.Assert.assertNotNull(roundVolumeItor93);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList57.listIterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        roundVolume67.setLength((double) (-1L));
        boolean boolean73 = roundVolumeList57.add(roundVolume67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor74 = roundVolumeList57.iterator();
        boolean boolean75 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        logic.RoundVolume roundVolume77 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList23.add(10, roundVolume77);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume17 = new logic.RoundVolume();
        roundVolume17.setVolume((double) 0);
        double double20 = roundVolume17.getVolume();
        roundVolume17.setLength((double) 10L);
        logic.RoundVolume roundVolume23 = new logic.RoundVolume();
        roundVolume23.setVolume((double) 0);
        double double26 = roundVolume23.getVolume();
        java.lang.String str27 = roundVolume23.toString();
        boolean boolean28 = roundVolume17.equals((java.lang.Object) str27);
        roundVolume17.setLength((double) 10L);
        boolean boolean32 = roundVolume17.equals((java.lang.Object) "CASPIAN");
        roundVolumeList15.add(0, roundVolume17);
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean38 = roundVolumeList15.remove((java.lang.Object) (byte) 1);
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        yourWood47.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList54 = yourWood47.getWood();
        logic.RoundVolume roundVolume56 = new logic.RoundVolume();
        roundVolume56.setVolume((double) 0);
        double double59 = roundVolume56.getVolume();
        roundVolume56.setLength((double) 10L);
        logic.RoundVolume roundVolume62 = new logic.RoundVolume();
        roundVolume62.setVolume((double) 0);
        double double65 = roundVolume62.getVolume();
        java.lang.String str66 = roundVolume62.toString();
        boolean boolean67 = roundVolume56.equals((java.lang.Object) str66);
        roundVolume56.setLength((double) 10L);
        boolean boolean71 = roundVolume56.equals((java.lang.Object) "CASPIAN");
        roundVolumeList54.add(0, roundVolume56);
        boolean boolean73 = roundVolumeList54.isEmpty();
        boolean boolean74 = roundVolumeList15.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList54);
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        yourWood75.diameterFirstSortWood();
        yourWood75.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList82 = yourWood75.getWood();
        logic.YourWood yourWood83 = new logic.YourWood();
// flaky:         yourWood83.addWood((double) 1L, (int) (byte) 100);
        yourWood83.lengthFirstSortWood();
        boolean boolean88 = roundVolumeList82.contains((java.lang.Object) yourWood83);
        yourWood83.diameterFirstSortWood();
        yourWood83.lengthFirstSortWood();
        boolean boolean91 = roundVolumeList15.remove((java.lang.Object) yourWood83);
        boolean boolean92 = roundVolumeList15.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str27, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeList54);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str66, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(roundVolumeList82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean14 = roundVolumeList7.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume16 = roundVolumeList7.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (short) 0, (int) (byte) -1, (double) 0.0f);
        double double4 = roundVolume3.getLength();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        logic.RoundVolume roundVolume4 = new logic.RoundVolume();
        roundVolume4.setVolume((double) 0);
        roundVolume4.setDiameter(100);
        java.lang.String str9 = roundVolume4.toString();
        java.lang.String str10 = roundVolume4.toString();
        boolean boolean11 = roundVolume3.equals((java.lang.Object) str10);
        double double12 = roundVolume3.getVolume();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str9, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str10, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.lang.Object[] objArray90 = roundVolumeList7.toArray();
        boolean boolean91 = roundVolumeList7.isEmpty();
        java.lang.Object[] objArray92 = roundVolumeList7.toArray();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume94 = roundVolumeList7.get((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        Main main0 = new Main();
        main0.init();
        main0.init();
        main0.init();
        javafx.application.Application.Parameters parameters4 = main0.getParameters();
        main0.stop();
        org.junit.Assert.assertNull(parameters4);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        yourWood8.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList16 = yourWood8.getWood();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList16);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume7.setVolume((double) 10);
        java.lang.String str10 = roundVolume7.toString();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume();
        roundVolume11.setVolume((double) 0);
        double double14 = roundVolume11.getVolume();
        java.lang.String str15 = roundVolume11.toString();
        double double16 = roundVolume11.getLength();
        roundVolume11.setLength((double) 'a');
        java.lang.String str19 = roundVolume11.toString();
        logic.RoundVolume roundVolume23 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        double double29 = roundVolume24.getLength();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume33.setVolume((double) 10);
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str40 = roundVolume39.toString();
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume59.setVolume((double) 10);
        java.lang.String str62 = roundVolume59.toString();
        logic.RoundVolume[] roundVolumeArray63 = new logic.RoundVolume[] { roundVolume7, roundVolume11, roundVolume23, roundVolume24, roundVolume33, roundVolume39, roundVolume41, roundVolume44, roundVolume59 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64, roundVolumeArray63);
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        yourWood66.diameterFirstSortWood();
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.YourWood yourWood74 = new logic.YourWood();
// flaky:         yourWood74.addWood((double) 1L, (int) (byte) 100);
        yourWood74.lengthFirstSortWood();
        boolean boolean79 = roundVolumeList73.contains((java.lang.Object) yourWood74);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList73.iterator();
        boolean boolean81 = roundVolumeList64.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        boolean boolean83 = roundVolumeList64.remove((java.lang.Object) false);
        boolean boolean84 = roundVolumeList3.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64);
        roundVolumeList3.clear();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str10, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str40, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str62, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getVolume();
        java.lang.String str6 = roundVolume0.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str6, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume17 = new logic.RoundVolume();
        roundVolume17.setVolume((double) 0);
        double double20 = roundVolume17.getVolume();
        roundVolume17.setLength((double) 10L);
        logic.RoundVolume roundVolume23 = new logic.RoundVolume();
        roundVolume23.setVolume((double) 0);
        double double26 = roundVolume23.getVolume();
        java.lang.String str27 = roundVolume23.toString();
        boolean boolean28 = roundVolume17.equals((java.lang.Object) str27);
        roundVolume17.setLength((double) 10L);
        boolean boolean32 = roundVolume17.equals((java.lang.Object) "CASPIAN");
        roundVolumeList15.add(0, roundVolume17);
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean38 = roundVolumeList15.remove((java.lang.Object) (byte) 1);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor39 = roundVolumeList15.listIterator();
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume44.setVolume((double) 10);
        java.lang.String str47 = roundVolume44.toString();
        logic.RoundVolume roundVolume48 = roundVolumeList15.set((int) (byte) 0, roundVolume44);
        logic.RoundVolume roundVolume50 = roundVolumeList15.remove((int) (short) 0);
        java.util.Collection<logic.RoundVolume> roundVolumeCollection51 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = roundVolumeList15.removeAll(roundVolumeCollection51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str27, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor39);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str47, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolume48);
        org.junit.Assert.assertNotNull(roundVolume50);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        yourWood23.diameterFirstSortWood();
        boolean boolean30 = roundVolumeList7.remove((java.lang.Object) yourWood23);
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList32 = yourWood23.getWood();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume34 = roundVolumeList32.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeList32);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (short) -1, (int) ' ', (double) (short) -1);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        roundVolume0.setLength((double) 10L);
        logic.RoundVolume roundVolume6 = new logic.RoundVolume();
        roundVolume6.setVolume((double) 0);
        double double9 = roundVolume6.getVolume();
        java.lang.String str10 = roundVolume6.toString();
        boolean boolean11 = roundVolume0.equals((java.lang.Object) str10);
        int int12 = roundVolume0.getDiameter();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str10, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getLength();
        roundVolume0.setVolume(100.0d);
        java.lang.String str6 = roundVolume0.toString();
        logic.YourWood yourWood7 = new logic.YourWood();
        yourWood7.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList9 = yourWood7.getWood();
        yourWood7.lengthFirstSortWood();
        yourWood7.lengthFirstSortWood();
        boolean boolean12 = roundVolume0.equals((java.lang.Object) yourWood7);
        java.lang.String str13 = roundVolume0.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str6, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
        org.junit.Assert.assertNotNull(roundVolumeList9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str13, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator14 = roundVolumeList7.spliterator();
        java.lang.Object obj15 = null;
        boolean boolean16 = roundVolumeList7.remove(obj15);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.replaceAll(roundVolumeUnaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        roundVolumeList69.clear();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream81 = roundVolumeList69.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList84 = roundVolumeList69.subList(10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
        org.junit.Assert.assertNotNull(roundVolumeStream81);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolumeList3.remove(obj4);
        logic.RoundVolume roundVolume6 = new logic.RoundVolume();
        roundVolume6.setVolume((double) 0);
        double double9 = roundVolume6.getVolume();
        roundVolume6.setLength((double) 10L);
        logic.RoundVolume roundVolume12 = new logic.RoundVolume();
        roundVolume12.setVolume((double) 0);
        double double15 = roundVolume12.getVolume();
        java.lang.String str16 = roundVolume12.toString();
        boolean boolean17 = roundVolume6.equals((java.lang.Object) str16);
        roundVolume6.setLength((double) 10L);
        boolean boolean20 = roundVolumeList3.remove((java.lang.Object) roundVolume6);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList3.replaceAll(roundVolumeUnaryOperator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str16, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setDiameter(3);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        roundVolume3.setLength(100.0d);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume7.setVolume((double) 10);
        java.lang.String str10 = roundVolume7.toString();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume();
        roundVolume11.setVolume((double) 0);
        double double14 = roundVolume11.getVolume();
        java.lang.String str15 = roundVolume11.toString();
        double double16 = roundVolume11.getLength();
        roundVolume11.setLength((double) 'a');
        java.lang.String str19 = roundVolume11.toString();
        logic.RoundVolume roundVolume23 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        double double29 = roundVolume24.getLength();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume33.setVolume((double) 10);
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str40 = roundVolume39.toString();
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume59.setVolume((double) 10);
        java.lang.String str62 = roundVolume59.toString();
        logic.RoundVolume[] roundVolumeArray63 = new logic.RoundVolume[] { roundVolume7, roundVolume11, roundVolume23, roundVolume24, roundVolume33, roundVolume39, roundVolume41, roundVolume44, roundVolume59 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64, roundVolumeArray63);
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        yourWood66.diameterFirstSortWood();
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.YourWood yourWood74 = new logic.YourWood();
// flaky:         yourWood74.addWood((double) 1L, (int) (byte) 100);
        yourWood74.lengthFirstSortWood();
        boolean boolean79 = roundVolumeList73.contains((java.lang.Object) yourWood74);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList73.iterator();
        boolean boolean81 = roundVolumeList64.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        boolean boolean83 = roundVolumeList64.remove((java.lang.Object) false);
        boolean boolean84 = roundVolumeList3.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64);
        logic.RoundVolume roundVolume86 = new logic.RoundVolume();
        roundVolume86.setVolume((double) 0);
        double double89 = roundVolume86.getLength();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume90 = roundVolumeList3.set(0, roundVolume86);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str10, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str40, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str62, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        java.util.List<logic.RoundVolume> roundVolumeList82 = null; // flaky: roundVolumeList69.subList(0, (int) (short) 1);
        boolean boolean83 = roundVolumeList69.isEmpty();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeList82);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.lang.Object[] objArray66 = roundVolumeList57.toArray();
        java.lang.Object[] objArray67 = roundVolumeList57.toArray();
        boolean boolean68 = roundVolumeList7.equals((java.lang.Object) roundVolumeList57);
        java.lang.Object obj69 = null;
        boolean boolean70 = roundVolumeList57.contains(obj69);
        logic.RoundVolume roundVolume75 = new logic.RoundVolume((double) (byte) 1, (int) '4', (double) (byte) -1);
        roundVolume75.setDiameter((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume78 = roundVolumeList57.set(52, roundVolume75);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        boolean boolean30 = roundVolumeList24.contains((java.lang.Object) yourWood25);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor31 = roundVolumeList24.iterator();
        logic.YourWood yourWood33 = new logic.YourWood();
// flaky:         yourWood33.addWood((double) 1L, (int) (byte) 100);
        yourWood33.lengthFirstSortWood();
        yourWood33.diameterFirstSortWood();
        yourWood33.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList40 = yourWood33.getWood();
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        boolean boolean46 = roundVolumeList40.contains((java.lang.Object) yourWood41);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor47 = roundVolumeList40.iterator();
        boolean boolean48 = roundVolumeList24.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList40);
        java.lang.Object obj49 = null;
        boolean boolean50 = roundVolumeList24.remove(obj49);
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        logic.YourWood yourWood67 = new logic.YourWood();
// flaky:         yourWood67.addWood((double) 1L, (int) (byte) 100);
        yourWood67.lengthFirstSortWood();
        yourWood67.diameterFirstSortWood();
        yourWood67.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList74 = yourWood67.getWood();
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        boolean boolean80 = roundVolumeList74.contains((java.lang.Object) yourWood75);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor81 = roundVolumeList74.iterator();
        boolean boolean82 = roundVolumeList58.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        java.lang.Object[] objArray83 = roundVolumeList74.toArray();
        java.lang.Object[] objArray84 = roundVolumeList74.toArray();
        boolean boolean85 = roundVolumeList24.equals((java.lang.Object) roundVolumeList74);
        java.lang.Object obj86 = null;
        boolean boolean87 = roundVolumeList74.contains(obj86);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor88 = roundVolumeList74.iterator();
        boolean boolean89 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList92 = roundVolumeList7.subList((int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor31);
        org.junit.Assert.assertNotNull(roundVolumeList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
        org.junit.Assert.assertNotNull(roundVolumeList74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor81);
// flaky:         org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor88);
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        yourWood0.lengthFirstSortWood();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume4 = roundVolumeList2.remove((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList7.listIterator((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        roundVolumeList23.clear();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        boolean boolean36 = roundVolumeList23.equals((java.lang.Object) roundVolume35);
        java.lang.String str37 = roundVolume35.toString();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str37, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean80 = roundVolumeList60.isEmpty();
        logic.YourWood yourWood81 = new logic.YourWood();
// flaky:         yourWood81.addWood((double) 1L, (int) (byte) 100);
        yourWood81.lengthFirstSortWood();
        yourWood81.diameterFirstSortWood();
        yourWood81.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList88 = yourWood81.getWood();
        logic.YourWood yourWood89 = new logic.YourWood();
// flaky:         yourWood89.addWood((double) 1L, (int) (byte) 100);
        yourWood89.lengthFirstSortWood();
        boolean boolean94 = roundVolumeList88.contains((java.lang.Object) yourWood89);
        yourWood89.diameterFirstSortWood();
        yourWood89.lengthFirstSortWood();
        boolean boolean97 = roundVolumeList60.equals((java.lang.Object) yourWood89);
        yourWood89.diameterFirstSortWood();
        yourWood89.diameterFirstSortWood();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(roundVolumeList88);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume17 = new logic.RoundVolume();
        roundVolume17.setVolume((double) 0);
        double double20 = roundVolume17.getVolume();
        roundVolume17.setLength((double) 10L);
        logic.RoundVolume roundVolume23 = new logic.RoundVolume();
        roundVolume23.setVolume((double) 0);
        double double26 = roundVolume23.getVolume();
        java.lang.String str27 = roundVolume23.toString();
        boolean boolean28 = roundVolume17.equals((java.lang.Object) str27);
        roundVolume17.setLength((double) 10L);
        boolean boolean32 = roundVolume17.equals((java.lang.Object) "CASPIAN");
        roundVolumeList15.add(0, roundVolume17);
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean38 = roundVolumeList15.remove((java.lang.Object) (byte) 1);
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        yourWood47.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList54 = yourWood47.getWood();
        logic.RoundVolume roundVolume56 = new logic.RoundVolume();
        roundVolume56.setVolume((double) 0);
        double double59 = roundVolume56.getVolume();
        roundVolume56.setLength((double) 10L);
        logic.RoundVolume roundVolume62 = new logic.RoundVolume();
        roundVolume62.setVolume((double) 0);
        double double65 = roundVolume62.getVolume();
        java.lang.String str66 = roundVolume62.toString();
        boolean boolean67 = roundVolume56.equals((java.lang.Object) str66);
        roundVolume56.setLength((double) 10L);
        boolean boolean71 = roundVolume56.equals((java.lang.Object) "CASPIAN");
        roundVolumeList54.add(0, roundVolume56);
        boolean boolean73 = roundVolumeList54.isEmpty();
        boolean boolean74 = roundVolumeList15.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList54);
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        yourWood75.diameterFirstSortWood();
        yourWood75.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList82 = yourWood75.getWood();
        logic.YourWood yourWood83 = new logic.YourWood();
// flaky:         yourWood83.addWood((double) 1L, (int) (byte) 100);
        yourWood83.lengthFirstSortWood();
        boolean boolean88 = roundVolumeList82.contains((java.lang.Object) yourWood83);
        yourWood83.diameterFirstSortWood();
        yourWood83.lengthFirstSortWood();
        boolean boolean91 = roundVolumeList15.remove((java.lang.Object) yourWood83);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor92 = roundVolumeList15.iterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str27, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeList54);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str66, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(roundVolumeList82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor92);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        logic.RoundVolume roundVolume80 = new logic.RoundVolume();
        roundVolume80.setVolume((double) 0);
        double double83 = roundVolume80.getVolume();
        roundVolume80.setLength((double) 10L);
        logic.RoundVolume roundVolume86 = new logic.RoundVolume();
        roundVolume86.setVolume((double) 0);
        double double89 = roundVolume86.getVolume();
        java.lang.String str90 = roundVolume86.toString();
        boolean boolean91 = roundVolume80.equals((java.lang.Object) str90);
        roundVolume80.setLength((double) 10L);
        boolean boolean95 = roundVolume80.equals((java.lang.Object) "CASPIAN");
        boolean boolean96 = roundVolumeList60.contains((java.lang.Object) boolean95);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream97 = roundVolumeList60.stream();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str90, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream97);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        boolean boolean80 = roundVolumeList69.contains((java.lang.Object) "");
        java.util.Iterator<logic.RoundVolume> roundVolumeItor81 = roundVolumeList69.iterator();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor81);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        boolean boolean38 = roundVolumeList23.remove((java.lang.Object) (-1));
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor53 = roundVolumeList46.iterator();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        yourWood55.diameterFirstSortWood();
        yourWood55.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList62 = yourWood55.getWood();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        boolean boolean68 = roundVolumeList62.contains((java.lang.Object) yourWood63);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList62.iterator();
        boolean boolean70 = roundVolumeList46.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor71 = roundVolumeList46.iterator();
        logic.RoundVolume roundVolume75 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double76 = roundVolume75.getLength();
        boolean boolean77 = roundVolumeList46.add(roundVolume75);
        boolean boolean78 = roundVolumeList23.contains((java.lang.Object) boolean77);
        java.lang.Object obj79 = null;
        int int80 = roundVolumeList23.indexOf(obj79);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor82 = roundVolumeList23.listIterator((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor53);
        org.junit.Assert.assertNotNull(roundVolumeList62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor71);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        logic.RoundVolume roundVolume82 = new logic.RoundVolume(1.0d, (int) (short) 10, (double) 10L);
        boolean boolean83 = roundVolumeList69.add(roundVolume82);
        double double84 = roundVolume82.getLength();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume(1.0d, (int) (short) 10, (double) 10L);
        roundVolume3.setDiameter((int) (short) 1);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        logic.YourWood yourWood20 = new logic.YourWood();
// flaky:         yourWood20.addWood((double) 1L, (int) (byte) 100);
        yourWood20.lengthFirstSortWood();
        yourWood20.diameterFirstSortWood();
        yourWood20.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList27 = yourWood20.getWood();
        logic.YourWood yourWood28 = new logic.YourWood();
// flaky:         yourWood28.addWood((double) 1L, (int) (byte) 100);
        yourWood28.lengthFirstSortWood();
        boolean boolean33 = roundVolumeList27.contains((java.lang.Object) yourWood28);
        int int34 = roundVolumeList27.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream35 = roundVolumeList27.stream();
        boolean boolean36 = roundVolume19.equals((java.lang.Object) roundVolumeStream35);
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.add((int) (byte) 10, roundVolume19);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList57.listIterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        roundVolume67.setLength((double) (-1L));
        boolean boolean73 = roundVolumeList57.add(roundVolume67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor74 = roundVolumeList57.iterator();
        boolean boolean75 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream76 = roundVolumeList57.stream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor77 = roundVolumeList57.iterator();
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        yourWood78.diameterFirstSortWood();
        yourWood78.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood78.getWood();
        logic.YourWood yourWood86 = new logic.YourWood();
// flaky:         yourWood86.addWood((double) 1L, (int) (byte) 100);
        yourWood86.lengthFirstSortWood();
        boolean boolean91 = roundVolumeList85.contains((java.lang.Object) yourWood86);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor92 = roundVolumeList85.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream93 = roundVolumeList85.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor95 = roundVolumeList85.listIterator((int) (short) 0);
        boolean boolean96 = roundVolumeList57.equals((java.lang.Object) roundVolumeList85);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume98 = roundVolumeList85.get((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream76);
        org.junit.Assert.assertNotNull(roundVolumeItor77);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor92);
        org.junit.Assert.assertNotNull(roundVolumeStream93);
        org.junit.Assert.assertNotNull(roundVolumeItor95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setLength((double) 'a');
        boolean boolean40 = roundVolumeList7.add(roundVolume32);
        double double41 = roundVolume32.getLength();
        roundVolume32.setLength((double) '4');
        double double44 = roundVolume32.getVolume();
        roundVolume32.setLength((double) 'a');
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 97.0d + "'", double41 == 97.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean79 = roundVolumeList60.remove((java.lang.Object) false);
        Main main80 = new Main();
        main80.init();
        javafx.application.Application.Parameters parameters82 = main80.getParameters();
        boolean boolean83 = roundVolumeList60.contains((java.lang.Object) parameters82);
        logic.YourWood yourWood84 = new logic.YourWood();
        yourWood84.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList86 = yourWood84.getWood();
        boolean boolean87 = roundVolumeList60.equals((java.lang.Object) yourWood84);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator88 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList60.replaceAll(roundVolumeUnaryOperator88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(parameters82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(roundVolumeList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        boolean boolean80 = roundVolumeList69.contains((java.lang.Object) "");
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream81 = roundVolumeList69.stream();
        int int82 = roundVolumeList69.size();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList85 = roundVolumeList69.subList((int) (short) 1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setVolume((double) (-1L));
        boolean boolean40 = roundVolumeList23.contains((java.lang.Object) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList43 = roundVolumeList23.subList(10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=10.0, diameter=100, volume=10.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolumeList3.remove(obj4);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor6 = roundVolumeList3.listIterator();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor7 = roundVolumeList3.iterator();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor6);
        org.junit.Assert.assertNotNull(roundVolumeItor7);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume11.setVolume((double) 10);
        java.lang.String str14 = roundVolume11.toString();
        logic.RoundVolume roundVolume15 = new logic.RoundVolume();
        roundVolume15.setVolume((double) 0);
        double double18 = roundVolume15.getVolume();
        java.lang.String str19 = roundVolume15.toString();
        double double20 = roundVolume15.getLength();
        roundVolume15.setLength((double) 'a');
        java.lang.String str23 = roundVolume15.toString();
        logic.RoundVolume roundVolume27 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume28 = new logic.RoundVolume();
        roundVolume28.setVolume((double) 0);
        double double31 = roundVolume28.getVolume();
        java.lang.String str32 = roundVolume28.toString();
        double double33 = roundVolume28.getLength();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume37.setVolume((double) 10);
        logic.RoundVolume roundVolume43 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str44 = roundVolume43.toString();
        logic.RoundVolume roundVolume45 = new logic.RoundVolume();
        roundVolume45.setVolume((double) 0);
        logic.RoundVolume roundVolume48 = new logic.RoundVolume();
        roundVolume48.setVolume((double) 0);
        double double51 = roundVolume48.getVolume();
        roundVolume48.setLength((double) 10L);
        logic.RoundVolume roundVolume54 = new logic.RoundVolume();
        roundVolume54.setVolume((double) 0);
        double double57 = roundVolume54.getVolume();
        java.lang.String str58 = roundVolume54.toString();
        boolean boolean59 = roundVolume48.equals((java.lang.Object) str58);
        logic.RoundVolume roundVolume63 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume63.setVolume((double) 10);
        java.lang.String str66 = roundVolume63.toString();
        logic.RoundVolume[] roundVolumeArray67 = new logic.RoundVolume[] { roundVolume11, roundVolume15, roundVolume27, roundVolume28, roundVolume37, roundVolume43, roundVolume45, roundVolume48, roundVolume63 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList68 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList68, roundVolumeArray67);
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        yourWood70.diameterFirstSortWood();
        yourWood70.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList77 = yourWood70.getWood();
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        boolean boolean83 = roundVolumeList77.contains((java.lang.Object) yourWood78);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor84 = roundVolumeList77.iterator();
        boolean boolean85 = roundVolumeList68.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList77);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream86 = roundVolumeList68.parallelStream();
        boolean boolean87 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList68);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor88 = roundVolumeList7.iterator();
        logic.RoundVolume roundVolume90 = new logic.RoundVolume();
        roundVolume90.setVolume((double) 0);
        roundVolume90.setDiameter((int) (byte) 10);
        double double95 = roundVolume90.getLength();
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.add((int) (short) -1, roundVolume90);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str14, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str23, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str32, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str44, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str58, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str66, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(roundVolumeList77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor88);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList57.listIterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        roundVolume67.setLength((double) (-1L));
        boolean boolean73 = roundVolumeList57.add(roundVolume67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor74 = roundVolumeList57.iterator();
        boolean boolean75 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        logic.RoundVolume roundVolume76 = new logic.RoundVolume();
        roundVolume76.setVolume((double) 0);
        double double79 = roundVolume76.getLength();
        roundVolume76.setVolume(100.0d);
        java.lang.String str82 = roundVolume76.toString();
        logic.YourWood yourWood83 = new logic.YourWood();
        yourWood83.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood83.getWood();
        yourWood83.lengthFirstSortWood();
        yourWood83.lengthFirstSortWood();
        boolean boolean88 = roundVolume76.equals((java.lang.Object) yourWood83);
        boolean boolean89 = roundVolumeList57.remove((java.lang.Object) boolean88);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str82, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream3 = roundVolumeList2.parallelStream();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume7.setVolume((double) 10);
        java.lang.String str10 = roundVolume7.toString();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume();
        roundVolume11.setVolume((double) 0);
        double double14 = roundVolume11.getVolume();
        java.lang.String str15 = roundVolume11.toString();
        double double16 = roundVolume11.getLength();
        roundVolume11.setLength((double) 'a');
        java.lang.String str19 = roundVolume11.toString();
        logic.RoundVolume roundVolume23 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        double double29 = roundVolume24.getLength();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume33.setVolume((double) 10);
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str40 = roundVolume39.toString();
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume59.setVolume((double) 10);
        java.lang.String str62 = roundVolume59.toString();
        logic.RoundVolume[] roundVolumeArray63 = new logic.RoundVolume[] { roundVolume7, roundVolume11, roundVolume23, roundVolume24, roundVolume33, roundVolume39, roundVolume41, roundVolume44, roundVolume59 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64, roundVolumeArray63);
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        yourWood66.diameterFirstSortWood();
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.YourWood yourWood74 = new logic.YourWood();
// flaky:         yourWood74.addWood((double) 1L, (int) (byte) 100);
        yourWood74.lengthFirstSortWood();
        boolean boolean79 = roundVolumeList73.contains((java.lang.Object) yourWood74);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList73.iterator();
        boolean boolean81 = roundVolumeList64.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        int int82 = roundVolumeList73.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator83 = roundVolumeList73.spliterator();
        int int84 = roundVolumeList2.lastIndexOf((java.lang.Object) roundVolumeList73);
        logic.RoundVolume roundVolume89 = new logic.RoundVolume((double) (byte) 1, (int) '4', (double) (byte) -1);
        roundVolume89.setDiameter((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList73.add((int) (short) -1, roundVolume89);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeStream3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str10, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str40, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str62, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream31 = roundVolumeList23.stream();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        boolean boolean49 = roundVolumeList15.isEmpty();
        int int50 = roundVolumeList15.size();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeStream31);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream3 = roundVolumeList2.parallelStream();
        logic.RoundVolume roundVolume5 = new logic.RoundVolume();
        roundVolume5.setVolume((double) 0);
        roundVolume5.setDiameter(100);
        java.lang.String str10 = roundVolume5.toString();
        boolean boolean12 = roundVolume5.equals((java.lang.Object) (-1L));
        java.lang.String str13 = roundVolume5.toString();
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList2.add((int) (short) 10, roundVolume5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeStream3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str10, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str13, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) (short) 0);
        java.lang.Object[] objArray18 = roundVolumeList7.toArray();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
        org.junit.Assert.assertNotNull(objArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("MODENA");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList80 = roundVolumeList60.subList(4, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) (byte) 1, (int) '4', (double) (byte) -1);
        boolean boolean38 = roundVolumeList7.add(roundVolume37);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator39 = roundVolumeList7.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator39);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume(0.0d, (int) (short) 10, 100.0d);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        java.lang.String[] strArray3 = new java.lang.String[] { "RoundVolume(length=10.0, diameter=100, volume=0.0)", "CASPIAN", "RoundVolume(length=0.0, diameter=100, volume=-1.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Error: class sun.reflect.NativeMethodAccessorImpl is not a subclass of javafx.application.Application");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        roundVolume16.setDiameter(100);
        java.lang.String str21 = roundVolume16.toString();
        roundVolume16.setVolume((double) (-1.0f));
        roundVolume16.setVolume((double) (short) -1);
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        yourWood26.diameterFirstSortWood();
        yourWood26.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList33 = yourWood26.getWood();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        boolean boolean39 = roundVolumeList33.contains((java.lang.Object) yourWood34);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor40 = roundVolumeList33.iterator();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        yourWood42.diameterFirstSortWood();
        yourWood42.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList49 = yourWood42.getWood();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        boolean boolean55 = roundVolumeList49.contains((java.lang.Object) yourWood50);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor56 = roundVolumeList49.iterator();
        boolean boolean57 = roundVolumeList33.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList49);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor58 = roundVolumeList49.listIterator();
        java.lang.Object[] objArray59 = roundVolumeList49.toArray();
        roundVolumeList49.clear();
        logic.RoundVolume roundVolume61 = new logic.RoundVolume();
        boolean boolean62 = roundVolumeList49.equals((java.lang.Object) roundVolume61);
        boolean boolean63 = roundVolume16.equals((java.lang.Object) roundVolume61);
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.add((int) 'a', roundVolume61);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str21, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertNotNull(roundVolumeList33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor40);
        org.junit.Assert.assertNotNull(roundVolumeList49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor58);
        org.junit.Assert.assertNotNull(objArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        java.lang.String[] strArray5 = new java.lang.String[] { "RoundVolume(length=0.0, diameter=0, volume=-1.0)", "RoundVolume(length=0.0, diameter=0, volume=100.0)", "RoundVolume(length=35.0, diameter=0, volume=10.0)", "RoundVolume(length=0.0, diameter=100, volume=-1.0)", "CASPIAN" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor70");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        roundVolume0.setLength((double) (-1L));
        java.lang.String str6 = roundVolume0.toString();
        double double7 = roundVolume0.getVolume();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=-1.0, diameter=0, volume=0.0)" + "'", str6, "RoundVolume(length=-1.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        boolean boolean38 = roundVolumeList23.remove((java.lang.Object) (-1));
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator39 = roundVolumeList23.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator39);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        roundVolume0.setLength((double) 10L);
        java.lang.String str6 = roundVolume0.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=0, volume=0.0)" + "'", str6, "RoundVolume(length=10.0, diameter=0, volume=0.0)");
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator17 = roundVolumeList15.spliterator();
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        int int32 = roundVolumeList25.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream33 = roundVolumeList25.stream();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood34.getWood();
        int int40 = roundVolumeList25.lastIndexOf((java.lang.Object) roundVolumeList39);
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        yourWood41.diameterFirstSortWood();
        yourWood41.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList48 = yourWood41.getWood();
        logic.YourWood yourWood49 = new logic.YourWood();
// flaky:         yourWood49.addWood((double) 1L, (int) (byte) 100);
        yourWood49.lengthFirstSortWood();
        boolean boolean54 = roundVolumeList48.contains((java.lang.Object) yourWood49);
        yourWood49.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList56 = yourWood49.getWood();
        logic.RoundVolume roundVolume58 = new logic.RoundVolume();
        roundVolume58.setVolume((double) 0);
        double double61 = roundVolume58.getVolume();
        roundVolume58.setLength((double) 10L);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume();
        roundVolume64.setVolume((double) 0);
        double double67 = roundVolume64.getVolume();
        java.lang.String str68 = roundVolume64.toString();
        boolean boolean69 = roundVolume58.equals((java.lang.Object) str68);
        roundVolume58.setLength((double) 10L);
        boolean boolean73 = roundVolume58.equals((java.lang.Object) "CASPIAN");
        roundVolumeList56.add(0, roundVolume58);
        logic.RoundVolume roundVolume78 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean79 = roundVolumeList56.remove((java.lang.Object) (byte) 1);
        boolean boolean80 = roundVolumeList39.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList56);
        boolean boolean81 = roundVolumeList15.remove((java.lang.Object) boolean80);
        logic.YourWood yourWood82 = new logic.YourWood();
// flaky:         yourWood82.addWood((double) 1L, (int) (byte) 100);
        yourWood82.lengthFirstSortWood();
        yourWood82.diameterFirstSortWood();
        yourWood82.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList89 = yourWood82.getWood();
        logic.YourWood yourWood90 = new logic.YourWood();
// flaky:         yourWood90.addWood((double) 1L, (int) (byte) 100);
        yourWood90.lengthFirstSortWood();
        boolean boolean95 = roundVolumeList89.contains((java.lang.Object) yourWood90);
        boolean boolean96 = roundVolumeList89.isEmpty();
        int int97 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList89);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream33);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(roundVolumeList56);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str68, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(roundVolumeList89);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        int int34 = roundVolumeList23.lastIndexOf((java.lang.Object) (-1.0f));
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str40 = roundVolume39.toString();
        java.lang.String str41 = roundVolume39.toString();
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList23.add((int) (byte) -1, roundVolume39);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str40, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str41, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        java.lang.String[] strArray5 = new java.lang.String[] { "RoundVolume(length=0.0, diameter=0, volume=100.0)", "RoundVolume(length=10.0, diameter=0, volume=0.0)", "RoundVolume(length=0.0, diameter=100, volume=-1.0)", "RoundVolume(length=10.0, diameter=100, volume=10.0)", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor70");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        double double8 = roundVolume0.getLength();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList16 = yourWood9.getWood();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        boolean boolean22 = roundVolumeList16.contains((java.lang.Object) yourWood17);
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor25 = roundVolumeList24.listIterator();
        boolean boolean26 = roundVolume0.equals((java.lang.Object) roundVolumeList24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor27 = roundVolumeList24.iterator();
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "RoundVolume(length=0.0, diameter=0, volume=100.0)", "RoundVolume(length=10.0, diameter=0, volume=0.0)", "hi!", "RoundVolume(length=0.0, diameter=100, volume=-1.0)", "MODENA", "RoundVolume(length=52.0, diameter=0, volume=0.0)" };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence[] charSequenceArray35 = roundVolumeList24.toArray(charSequenceArray34);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 97.0d + "'", double8 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertNotNull(roundVolumeItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor27);
        org.junit.Assert.assertNotNull(charSequenceArray34);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList36 = roundVolumeList23.subList((int) (short) 10, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        boolean boolean38 = roundVolumeList23.remove((java.lang.Object) (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor40 = roundVolumeList23.listIterator(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=100, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        logic.RoundVolume roundVolume41 = roundVolumeList23.get((int) (short) 0);
        roundVolume41.setDiameter((int) (byte) 1);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(roundVolume41);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        roundVolumeList7.clear();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setVolume((double) (-1L));
        boolean boolean40 = roundVolumeList23.contains((java.lang.Object) (-1L));
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator41 = roundVolumeList23.spliterator();
        logic.RoundVolume roundVolume43 = new logic.RoundVolume();
        roundVolume43.setVolume((double) 0);
        double double46 = roundVolume43.getLength();
        double double47 = roundVolume43.getVolume();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        yourWood48.diameterFirstSortWood();
        yourWood48.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList55 = yourWood48.getWood();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        boolean boolean61 = roundVolumeList55.contains((java.lang.Object) yourWood56);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor62 = roundVolumeList55.iterator();
        logic.YourWood yourWood64 = new logic.YourWood();
// flaky:         yourWood64.addWood((double) 1L, (int) (byte) 100);
        yourWood64.lengthFirstSortWood();
        yourWood64.diameterFirstSortWood();
        yourWood64.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList71 = yourWood64.getWood();
        logic.YourWood yourWood72 = new logic.YourWood();
// flaky:         yourWood72.addWood((double) 1L, (int) (byte) 100);
        yourWood72.lengthFirstSortWood();
        boolean boolean77 = roundVolumeList71.contains((java.lang.Object) yourWood72);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList71.iterator();
        boolean boolean79 = roundVolumeList55.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList71);
        java.lang.Object[] objArray80 = roundVolumeList71.toArray();
        boolean boolean81 = roundVolume43.equals((java.lang.Object) objArray80);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume82 = roundVolumeList23.set((int) ' ', roundVolume43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator41);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(roundVolumeList55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor62);
        org.junit.Assert.assertNotNull(roundVolumeList71);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor70");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator17 = roundVolumeList15.spliterator();
        java.lang.Object[] objArray18 = roundVolumeList15.toArray();
        logic.RoundVolume roundVolume22 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double23 = roundVolume22.getLength();
        int int24 = roundVolumeList15.lastIndexOf((java.lang.Object) double23);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator17);
        org.junit.Assert.assertNotNull(objArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList57.listIterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        roundVolume67.setLength((double) (-1L));
        boolean boolean73 = roundVolumeList57.add(roundVolume67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor74 = roundVolumeList57.iterator();
        boolean boolean75 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream76 = roundVolumeList57.stream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor77 = roundVolumeList57.iterator();
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        yourWood78.diameterFirstSortWood();
        yourWood78.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood78.getWood();
        logic.YourWood yourWood86 = new logic.YourWood();
// flaky:         yourWood86.addWood((double) 1L, (int) (byte) 100);
        yourWood86.lengthFirstSortWood();
        boolean boolean91 = roundVolumeList85.contains((java.lang.Object) yourWood86);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor92 = roundVolumeList85.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream93 = roundVolumeList85.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor95 = roundVolumeList85.listIterator((int) (short) 0);
        boolean boolean96 = roundVolumeList57.equals((java.lang.Object) roundVolumeList85);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator97 = roundVolumeList57.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream76);
        org.junit.Assert.assertNotNull(roundVolumeItor77);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor92);
        org.junit.Assert.assertNotNull(roundVolumeStream93);
        org.junit.Assert.assertNotNull(roundVolumeItor95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator97);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream79 = roundVolumeList69.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume81 = roundVolumeList69.get((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertNotNull(roundVolumeStream79);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setVolume((double) (-1L));
        boolean boolean40 = roundVolumeList23.contains((java.lang.Object) (-1L));
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator41 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList23.replaceAll(roundVolumeUnaryOperator41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        java.lang.Object[] objArray79 = roundVolumeList69.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList82 = roundVolumeList69.subList(4, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(4) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertNotNull(objArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        int int26 = roundVolumeList7.indexOf((java.lang.Object) yourWood17);
        int int27 = roundVolumeList7.size();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        double double44 = roundVolume41.getVolume();
        java.lang.String str45 = roundVolume41.toString();
        double double46 = roundVolume41.getLength();
        roundVolume41.setLength((double) 'a');
        roundVolume41.setLength((double) (short) 0);
        logic.RoundVolume roundVolume51 = null; // flaky: roundVolumeList23.set((int) (short) 1, roundVolume41);
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        logic.YourWood yourWood68 = new logic.YourWood();
// flaky:         yourWood68.addWood((double) 1L, (int) (byte) 100);
        yourWood68.lengthFirstSortWood();
        yourWood68.diameterFirstSortWood();
        yourWood68.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList75 = yourWood68.getWood();
        logic.YourWood yourWood76 = new logic.YourWood();
// flaky:         yourWood76.addWood((double) 1L, (int) (byte) 100);
        yourWood76.lengthFirstSortWood();
        boolean boolean81 = roundVolumeList75.contains((java.lang.Object) yourWood76);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor82 = roundVolumeList75.iterator();
        boolean boolean83 = roundVolumeList59.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList75);
        java.lang.Object[] objArray84 = roundVolumeList75.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream85 = roundVolumeList75.parallelStream();
        boolean boolean86 = roundVolumeList23.remove((java.lang.Object) roundVolumeList75);
        java.lang.Object[] objArray87 = roundVolumeList75.toArray();
        logic.YourWood yourWood88 = new logic.YourWood();
// flaky:         yourWood88.addWood((double) 1L, (int) (byte) 100);
        yourWood88.lengthFirstSortWood();
        int int93 = roundVolumeList75.indexOf((java.lang.Object) yourWood88);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str45, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
// flaky:         org.junit.Assert.assertNotNull(roundVolume51);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertNotNull(roundVolumeList75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor82);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume34 = new logic.RoundVolume();
        roundVolume34.setVolume((double) 0);
        double double37 = roundVolume34.getVolume();
        java.lang.String str38 = roundVolume34.toString();
        double double39 = roundVolume34.getLength();
        roundVolume34.setLength((double) 'a');
        roundVolume34.setLength((double) (short) 0);
        boolean boolean44 = roundVolumeList23.add(roundVolume34);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str38, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        boolean boolean80 = roundVolumeList69.contains((java.lang.Object) "");
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor81 = roundVolumeList69.listIterator();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor81);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str4 = roundVolume3.toString();
        double double5 = roundVolume3.getLength();
        int int6 = roundVolume3.getDiameter();
        double double7 = roundVolume3.getVolume();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str4, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        double double8 = roundVolume0.getVolume();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        java.lang.String[] strArray2 = new java.lang.String[] { "CASPIAN", "CASPIAN" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor70");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        logic.RoundVolume roundVolume91 = null; // flaky: roundVolumeList7.remove(0);
        roundVolumeList7.clear();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertNotNull(roundVolume91);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList39.isEmpty();
        boolean boolean49 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        java.util.Collection<logic.RoundVolume> roundVolumeCollection50 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = roundVolumeList39.containsAll(roundVolumeCollection50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        java.util.List<logic.RoundVolume> roundVolumeList82 = null; // flaky: roundVolumeList69.subList(0, (int) (short) 1);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator83 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList69.replaceAll(roundVolumeUnaryOperator83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeList82);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolumeList3.remove(obj4);
        roundVolumeList3.clear();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        yourWood8.diameterFirstSortWood();
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        boolean boolean21 = roundVolumeList15.contains((java.lang.Object) yourWood16);
        boolean boolean23 = roundVolumeList15.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray24 = roundVolumeList15.toArray();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        yourWood25.diameterFirstSortWood();
        yourWood25.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList32 = yourWood25.getWood();
        logic.YourWood yourWood33 = new logic.YourWood();
// flaky:         yourWood33.addWood((double) 1L, (int) (byte) 100);
        yourWood33.lengthFirstSortWood();
        boolean boolean38 = roundVolumeList32.contains((java.lang.Object) yourWood33);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor39 = roundVolumeList32.iterator();
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        yourWood41.diameterFirstSortWood();
        yourWood41.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList48 = yourWood41.getWood();
        logic.YourWood yourWood49 = new logic.YourWood();
// flaky:         yourWood49.addWood((double) 1L, (int) (byte) 100);
        yourWood49.lengthFirstSortWood();
        boolean boolean54 = roundVolumeList48.contains((java.lang.Object) yourWood49);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor55 = roundVolumeList48.iterator();
        boolean boolean56 = roundVolumeList32.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList48);
        java.lang.Object obj57 = null;
        boolean boolean58 = roundVolumeList32.remove(obj57);
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        yourWood59.diameterFirstSortWood();
        yourWood59.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList66 = yourWood59.getWood();
        logic.YourWood yourWood67 = new logic.YourWood();
// flaky:         yourWood67.addWood((double) 1L, (int) (byte) 100);
        yourWood67.lengthFirstSortWood();
        boolean boolean72 = roundVolumeList66.contains((java.lang.Object) yourWood67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor73 = roundVolumeList66.iterator();
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        yourWood75.diameterFirstSortWood();
        yourWood75.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList82 = yourWood75.getWood();
        logic.YourWood yourWood83 = new logic.YourWood();
// flaky:         yourWood83.addWood((double) 1L, (int) (byte) 100);
        yourWood83.lengthFirstSortWood();
        boolean boolean88 = roundVolumeList82.contains((java.lang.Object) yourWood83);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor89 = roundVolumeList82.iterator();
        boolean boolean90 = roundVolumeList66.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList82);
        java.lang.Object[] objArray91 = roundVolumeList82.toArray();
        java.lang.Object[] objArray92 = roundVolumeList82.toArray();
        boolean boolean93 = roundVolumeList32.equals((java.lang.Object) roundVolumeList82);
        java.lang.Object obj94 = null;
        boolean boolean95 = roundVolumeList82.contains(obj94);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor96 = roundVolumeList82.iterator();
        boolean boolean97 = roundVolumeList15.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList82);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = roundVolumeList3.addAll((int) (short) -1, (java.util.Collection<logic.RoundVolume>) roundVolumeList82);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor39);
        org.junit.Assert.assertNotNull(roundVolumeList48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor55);
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(roundVolumeList66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor73);
        org.junit.Assert.assertNotNull(roundVolumeList82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor89);
// flaky:         org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(objArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor96);
// flaky:         org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream92 = roundVolumeList69.parallelStream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor93 = roundVolumeList69.listIterator();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor94 = roundVolumeList69.iterator();
        boolean boolean95 = roundVolumeList69.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(roundVolumeStream92);
        org.junit.Assert.assertNotNull(roundVolumeItor93);
        org.junit.Assert.assertNotNull(roundVolumeItor94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        logic.YourWood yourWood14 = new logic.YourWood();
// flaky:         yourWood14.addWood((double) 1L, (int) (byte) 100);
        yourWood14.lengthFirstSortWood();
        yourWood14.diameterFirstSortWood();
        yourWood14.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood14.getWood();
        logic.YourWood yourWood22 = new logic.YourWood();
// flaky:         yourWood22.addWood((double) 1L, (int) (byte) 100);
        yourWood22.lengthFirstSortWood();
        boolean boolean27 = roundVolumeList21.contains((java.lang.Object) yourWood22);
        boolean boolean28 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList21);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume30 = roundVolumeList7.remove(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        Main main6 = new Main();
        javafx.application.HostServices hostServices7 = main6.getHostServices();
        boolean boolean8 = roundVolume0.equals((java.lang.Object) hostServices7);
        java.lang.String str9 = roundVolume0.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(hostServices7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str9, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) (short) 0);
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList25.iterator();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        boolean boolean49 = roundVolumeList25.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList41.listIterator();
        java.lang.Object[] objArray51 = roundVolumeList41.toArray();
        roundVolumeList41.clear();
        boolean boolean53 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor54 = roundVolumeList41.iterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertNotNull(objArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor54);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        java.lang.String[] strArray5 = new java.lang.String[] { "RoundVolume(length=0.0, diameter=100, volume=-1.0)", "", "RoundVolume(length=10.0, diameter=100, volume=0.0)", "hi!", "RoundVolume(length=10.0, diameter=0, volume=0.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor70");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        int int1 = roundVolume0.getDiameter();
        logic.YourWood yourWood2 = new logic.YourWood();
// flaky:         yourWood2.addWood((double) 1L, (int) (byte) 100);
        yourWood2.lengthFirstSortWood();
        yourWood2.diameterFirstSortWood();
        yourWood2.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList9 = yourWood2.getWood();
        logic.YourWood yourWood10 = new logic.YourWood();
// flaky:         yourWood10.addWood((double) 1L, (int) (byte) 100);
        yourWood10.lengthFirstSortWood();
        boolean boolean15 = roundVolumeList9.contains((java.lang.Object) yourWood10);
        boolean boolean17 = roundVolumeList9.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray18 = roundVolumeList9.toArray();
        logic.YourWood yourWood19 = new logic.YourWood();
// flaky:         yourWood19.addWood((double) 1L, (int) (byte) 100);
        yourWood19.lengthFirstSortWood();
        yourWood19.diameterFirstSortWood();
        yourWood19.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList26 = yourWood19.getWood();
        logic.YourWood yourWood27 = new logic.YourWood();
// flaky:         yourWood27.addWood((double) 1L, (int) (byte) 100);
        yourWood27.lengthFirstSortWood();
        boolean boolean32 = roundVolumeList26.contains((java.lang.Object) yourWood27);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor33 = roundVolumeList26.iterator();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        boolean boolean50 = roundVolumeList26.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList42);
        java.lang.Object obj51 = null;
        boolean boolean52 = roundVolumeList26.remove(obj51);
        logic.YourWood yourWood53 = new logic.YourWood();
// flaky:         yourWood53.addWood((double) 1L, (int) (byte) 100);
        yourWood53.lengthFirstSortWood();
        yourWood53.diameterFirstSortWood();
        yourWood53.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = yourWood53.getWood();
        logic.YourWood yourWood61 = new logic.YourWood();
// flaky:         yourWood61.addWood((double) 1L, (int) (byte) 100);
        yourWood61.lengthFirstSortWood();
        boolean boolean66 = roundVolumeList60.contains((java.lang.Object) yourWood61);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor67 = roundVolumeList60.iterator();
        logic.YourWood yourWood69 = new logic.YourWood();
// flaky:         yourWood69.addWood((double) 1L, (int) (byte) 100);
        yourWood69.lengthFirstSortWood();
        yourWood69.diameterFirstSortWood();
        yourWood69.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList76 = yourWood69.getWood();
        logic.YourWood yourWood77 = new logic.YourWood();
// flaky:         yourWood77.addWood((double) 1L, (int) (byte) 100);
        yourWood77.lengthFirstSortWood();
        boolean boolean82 = roundVolumeList76.contains((java.lang.Object) yourWood77);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor83 = roundVolumeList76.iterator();
        boolean boolean84 = roundVolumeList60.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList76);
        java.lang.Object[] objArray85 = roundVolumeList76.toArray();
        java.lang.Object[] objArray86 = roundVolumeList76.toArray();
        boolean boolean87 = roundVolumeList26.equals((java.lang.Object) roundVolumeList76);
        java.lang.Object obj88 = null;
        boolean boolean89 = roundVolumeList76.contains(obj88);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor90 = roundVolumeList76.iterator();
        boolean boolean91 = roundVolumeList9.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList76);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator92 = roundVolumeList9.spliterator();
        boolean boolean93 = roundVolume0.equals((java.lang.Object) roundVolumeSpliterator92);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(roundVolumeList9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor33);
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeList60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor67);
        org.junit.Assert.assertNotNull(roundVolumeList76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor83);
// flaky:         org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(objArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor90);
// flaky:         org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor79 = roundVolumeList69.listIterator();
        java.lang.Class<?> wildcardClass80 = roundVolumeList69.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(roundVolumeItor79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList57.listIterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        roundVolume67.setLength((double) (-1L));
        boolean boolean73 = roundVolumeList57.add(roundVolume67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor74 = roundVolumeList57.iterator();
        boolean boolean75 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator76 = roundVolumeList57.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator76);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        boolean boolean38 = roundVolumeList23.remove((java.lang.Object) (-1));
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor53 = roundVolumeList46.iterator();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        yourWood55.diameterFirstSortWood();
        yourWood55.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList62 = yourWood55.getWood();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        boolean boolean68 = roundVolumeList62.contains((java.lang.Object) yourWood63);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList62.iterator();
        boolean boolean70 = roundVolumeList46.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor71 = roundVolumeList46.iterator();
        logic.RoundVolume roundVolume75 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double76 = roundVolume75.getLength();
        boolean boolean77 = roundVolumeList46.add(roundVolume75);
        boolean boolean78 = roundVolumeList23.contains((java.lang.Object) boolean77);
        boolean boolean79 = roundVolumeList23.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor53);
        org.junit.Assert.assertNotNull(roundVolumeList62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor71);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList15.listIterator();
        logic.YourWood yourWood19 = new logic.YourWood();
// flaky:         yourWood19.addWood((double) 1L, (int) (byte) 100);
        yourWood19.lengthFirstSortWood();
        yourWood19.diameterFirstSortWood();
        yourWood19.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList26 = yourWood19.getWood();
        logic.YourWood yourWood27 = new logic.YourWood();
// flaky:         yourWood27.addWood((double) 1L, (int) (byte) 100);
        yourWood27.lengthFirstSortWood();
        boolean boolean32 = roundVolumeList26.contains((java.lang.Object) yourWood27);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor33 = roundVolumeList26.iterator();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        yourWood42.diameterFirstSortWood();
        boolean boolean49 = roundVolumeList26.remove((java.lang.Object) yourWood42);
        logic.RoundVolume roundVolume53 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double54 = roundVolume53.getLength();
        int int55 = roundVolume53.getDiameter();
        roundVolume53.setLength(100.0d);
        boolean boolean58 = roundVolumeList26.add(roundVolume53);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = roundVolumeList15.addAll(4, (java.util.Collection<logic.RoundVolume>) roundVolumeList26);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
        org.junit.Assert.assertNotNull(roundVolumeList26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor33);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        roundVolume0.setLength((double) (-1L));
        double double6 = roundVolume0.getLength();
        roundVolume0.setDiameter((int) (byte) -1);
        roundVolume0.setDiameter(100);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        boolean boolean80 = roundVolumeList69.contains((java.lang.Object) "");
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream81 = roundVolumeList69.stream();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream82 = roundVolumeList69.parallelStream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor83 = roundVolumeList69.listIterator();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream81);
        org.junit.Assert.assertNotNull(roundVolumeStream82);
        org.junit.Assert.assertNotNull(roundVolumeItor83);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        java.lang.String[] strArray6 = new java.lang.String[] { "RoundVolume(length=0.0, diameter=100, volume=0.0)", "RoundVolume(length=0.0, diameter=0, volume=100.0)", "RoundVolume(length=0.0, diameter=0, volume=100.0)", "RoundVolume(length=10.0, diameter=0, volume=0.0)", "RoundVolume(length=-1.0, diameter=0, volume=0.0)", "RoundVolume(length=0.0, diameter=0, volume=-1.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor70");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        logic.RoundVolume roundVolume41 = roundVolumeList23.get((int) (short) 0);
        int int42 = roundVolume41.getDiameter();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(roundVolume41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood16.getWood();
        int int22 = roundVolumeList7.lastIndexOf((java.lang.Object) roundVolumeList21);
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        yourWood23.diameterFirstSortWood();
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList30 = yourWood23.getWood();
        logic.YourWood yourWood31 = new logic.YourWood();
// flaky:         yourWood31.addWood((double) 1L, (int) (byte) 100);
        yourWood31.lengthFirstSortWood();
        boolean boolean36 = roundVolumeList30.contains((java.lang.Object) yourWood31);
        yourWood31.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList38 = yourWood31.getWood();
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        roundVolume40.setLength((double) 10L);
        boolean boolean55 = roundVolume40.equals((java.lang.Object) "CASPIAN");
        roundVolumeList38.add(0, roundVolume40);
        logic.RoundVolume roundVolume60 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean61 = roundVolumeList38.remove((java.lang.Object) (byte) 1);
        boolean boolean62 = roundVolumeList21.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList38);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor63 = roundVolumeList21.iterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(roundVolumeList38);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor63);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList7.iterator();
        logic.RoundVolume roundVolume36 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double37 = roundVolume36.getLength();
        boolean boolean38 = roundVolumeList7.add(roundVolume36);
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor53 = roundVolumeList46.iterator();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        yourWood55.diameterFirstSortWood();
        yourWood55.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList62 = yourWood55.getWood();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        boolean boolean68 = roundVolumeList62.contains((java.lang.Object) yourWood63);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList62.iterator();
        boolean boolean70 = roundVolumeList46.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        logic.RoundVolume roundVolume75 = new logic.RoundVolume(35.0d, (int) (short) 100, 10.0d);
// flaky:         roundVolumeList62.add(1, roundVolume75);
        boolean boolean77 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator78 = roundVolumeList62.spliterator();
        logic.RoundVolume roundVolume79 = new logic.RoundVolume();
        roundVolume79.setVolume((double) 0);
        double double82 = roundVolume79.getVolume();
        java.lang.String str83 = roundVolume79.toString();
        double double84 = roundVolume79.getLength();
        java.lang.String str85 = roundVolume79.toString();
        int int86 = roundVolume79.getDiameter();
        roundVolume79.setLength((double) 0.0f);
        int int89 = roundVolumeList62.indexOf((java.lang.Object) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList92 = roundVolumeList62.subList((int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor53);
        org.junit.Assert.assertNotNull(roundVolumeList62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator78);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str83, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str85, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        boolean boolean34 = roundVolumeList23.isEmpty();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream35 = roundVolumeList23.parallelStream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream35);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume16 = null;
        boolean boolean17 = roundVolumeList15.add(roundVolume16);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator18 = roundVolumeList15.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator18);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.lang.Object[] objArray66 = roundVolumeList57.toArray();
        java.lang.Object[] objArray67 = roundVolumeList57.toArray();
        boolean boolean68 = roundVolumeList7.equals((java.lang.Object) roundVolumeList57);
        boolean boolean69 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        yourWood70.diameterFirstSortWood();
        yourWood70.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList77 = yourWood70.getWood();
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        boolean boolean83 = roundVolumeList77.contains((java.lang.Object) yourWood78);
        boolean boolean85 = roundVolumeList77.equals((java.lang.Object) (short) 100);
        boolean boolean87 = roundVolumeList77.contains((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean88 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList77);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor89 = roundVolumeList7.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList92 = roundVolumeList7.subList((int) (byte) 10, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(roundVolumeList77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor89);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        roundVolume35.setVolume((double) 0);
        double double38 = roundVolume35.getVolume();
        java.lang.String str39 = roundVolume35.toString();
        int int40 = roundVolume35.getDiameter();
        roundVolume35.setLength((double) '#');
        roundVolume35.setVolume(10.0d);
        roundVolume35.setVolume(100.0d);
        boolean boolean47 = roundVolumeList23.add(roundVolume35);
        int int49 = roundVolumeList23.lastIndexOf((java.lang.Object) (short) 1);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList23.replaceAll(roundVolumeUnaryOperator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str39, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        roundVolume3.setLength(100.0d);
        java.lang.Object obj8 = null;
        boolean boolean9 = roundVolume3.equals(obj8);
        double double10 = roundVolume3.getVolume();
        double double11 = roundVolume3.getLength();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        roundVolume35.setVolume((double) 0);
        double double38 = roundVolume35.getVolume();
        java.lang.String str39 = roundVolume35.toString();
        int int40 = roundVolume35.getDiameter();
        roundVolume35.setLength((double) '#');
        roundVolume35.setVolume(10.0d);
        roundVolume35.setVolume(100.0d);
        boolean boolean47 = roundVolumeList23.add(roundVolume35);
        int int49 = roundVolumeList23.lastIndexOf((java.lang.Object) (short) 1);
        boolean boolean50 = roundVolumeList23.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str39, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream79 = roundVolumeList69.parallelStream();
        int int80 = roundVolumeList69.size();
        boolean boolean81 = roundVolumeList69.isEmpty();
        int int82 = roundVolumeList69.size();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertNotNull(roundVolumeStream79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream33 = roundVolumeList23.parallelStream();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        boolean boolean48 = roundVolumeList23.remove((java.lang.Object) boolean47);
        java.lang.Object[] objArray49 = roundVolumeList23.toArray();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream33);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        roundVolumeList23.clear();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator48 = roundVolumeList41.spliterator();
        logic.YourWood yourWood49 = new logic.YourWood();
// flaky:         yourWood49.addWood((double) 1L, (int) (byte) 100);
        yourWood49.lengthFirstSortWood();
        yourWood49.diameterFirstSortWood();
        yourWood49.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList56 = yourWood49.getWood();
        logic.YourWood yourWood57 = new logic.YourWood();
// flaky:         yourWood57.addWood((double) 1L, (int) (byte) 100);
        yourWood57.lengthFirstSortWood();
        boolean boolean62 = roundVolumeList56.contains((java.lang.Object) yourWood57);
        boolean boolean64 = roundVolumeList56.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray65 = roundVolumeList56.toArray();
        boolean boolean66 = roundVolumeList41.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList56);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator67 = roundVolumeList41.spliterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator68 = roundVolumeList41.spliterator();
        boolean boolean69 = roundVolumeList23.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream70 = roundVolumeList23.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator48);
        org.junit.Assert.assertNotNull(roundVolumeList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator67);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream70);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        boolean boolean34 = roundVolumeList23.isEmpty();
        boolean boolean35 = roundVolumeList23.isEmpty();
        logic.RoundVolume roundVolume40 = new logic.RoundVolume((double) 52, 2, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList23.add((int) '#', roundVolume40);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        roundVolume0.setLength((double) 10);
        int int7 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) 100);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        double double8 = roundVolume0.getLength();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList16 = yourWood9.getWood();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        boolean boolean22 = roundVolumeList16.contains((java.lang.Object) yourWood17);
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor25 = roundVolumeList24.listIterator();
        boolean boolean26 = roundVolume0.equals((java.lang.Object) roundVolumeList24);
        logic.YourWood yourWood27 = new logic.YourWood();
// flaky:         yourWood27.addWood((double) 1L, (int) (byte) 100);
        yourWood27.lengthFirstSortWood();
        yourWood27.diameterFirstSortWood();
        yourWood27.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList34 = yourWood27.getWood();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        boolean boolean40 = roundVolumeList34.contains((java.lang.Object) yourWood35);
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        roundVolume44.setLength((double) 10L);
        boolean boolean59 = roundVolume44.equals((java.lang.Object) "CASPIAN");
        roundVolumeList42.add(0, roundVolume44);
        boolean boolean61 = roundVolumeList42.isEmpty();
        boolean boolean62 = roundVolumeList24.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList42);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream63 = roundVolumeList24.stream();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 97.0d + "'", double8 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertNotNull(roundVolumeItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(roundVolumeList34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream63);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        java.lang.String str8 = roundVolume0.toString();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.lengthFirstSortWood();
        boolean boolean17 = roundVolume0.equals((java.lang.Object) yourWood9);
        roundVolume0.setDiameter((int) (byte) 0);
        int int20 = roundVolume0.getDiameter();
        roundVolume0.setVolume(35.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str8, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        Main main0 = new Main();
        javafx.application.HostServices hostServices1 = main0.getHostServices();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        main0.init();
        javafx.application.HostServices hostServices5 = main0.getHostServices();
        org.junit.Assert.assertNotNull(hostServices1);
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNull(parameters3);
        org.junit.Assert.assertNotNull(hostServices5);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume4 = roundVolumeList2.get(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        logic.YourWood yourWood14 = new logic.YourWood();
// flaky:         yourWood14.addWood((double) 1L, (int) (byte) 100);
        yourWood14.lengthFirstSortWood();
        yourWood14.diameterFirstSortWood();
        yourWood14.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood14.getWood();
        logic.YourWood yourWood22 = new logic.YourWood();
// flaky:         yourWood22.addWood((double) 1L, (int) (byte) 100);
        yourWood22.lengthFirstSortWood();
        boolean boolean27 = roundVolumeList21.contains((java.lang.Object) yourWood22);
        boolean boolean28 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList21);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator29 = roundVolumeList21.spliterator();
        logic.RoundVolume roundVolume30 = new logic.RoundVolume();
        roundVolume30.setVolume((double) 0);
        double double33 = roundVolume30.getVolume();
        java.lang.String str34 = roundVolume30.toString();
        double double35 = roundVolume30.getLength();
        roundVolume30.setLength((double) 'a');
        double double38 = roundVolume30.getLength();
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        yourWood47.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList54 = yourWood47.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor55 = roundVolumeList54.listIterator();
        boolean boolean56 = roundVolume30.equals((java.lang.Object) roundVolumeList54);
        roundVolume30.setLength(10.0d);
        boolean boolean59 = roundVolumeList21.add(roundVolume30);
        java.lang.String str60 = roundVolume30.toString();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator29);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str34, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 97.0d + "'", double38 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeList54);
        org.junit.Assert.assertNotNull(roundVolumeItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "RoundVolume(length=10.0, diameter=0, volume=0.0)" + "'", str60, "RoundVolume(length=10.0, diameter=0, volume=0.0)");
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        roundVolume35.setVolume((double) 0);
        double double38 = roundVolume35.getVolume();
        java.lang.String str39 = roundVolume35.toString();
        int int40 = roundVolume35.getDiameter();
        roundVolume35.setLength((double) '#');
        roundVolume35.setVolume(10.0d);
        roundVolume35.setVolume(100.0d);
        boolean boolean47 = roundVolumeList23.add(roundVolume35);
        int int48 = roundVolumeList23.size();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str39, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator32 = roundVolumeList23.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator32);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        java.lang.String str8 = roundVolume0.toString();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.lengthFirstSortWood();
        boolean boolean17 = roundVolume0.equals((java.lang.Object) yourWood9);
        java.util.ArrayList<logic.RoundVolume> roundVolumeList18 = yourWood9.getWood();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str8, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(roundVolumeList18);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        roundVolume0.setDiameter(100);
        java.lang.String str5 = roundVolume0.toString();
        java.lang.String str6 = roundVolume0.toString();
        int int7 = roundVolume0.getDiameter();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str5, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str6, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList7.iterator();
        logic.RoundVolume roundVolume36 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double37 = roundVolume36.getLength();
        boolean boolean38 = roundVolumeList7.add(roundVolume36);
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor53 = roundVolumeList46.iterator();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        yourWood55.diameterFirstSortWood();
        yourWood55.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList62 = yourWood55.getWood();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        boolean boolean68 = roundVolumeList62.contains((java.lang.Object) yourWood63);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList62.iterator();
        boolean boolean70 = roundVolumeList46.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        logic.RoundVolume roundVolume75 = new logic.RoundVolume(35.0d, (int) (short) 100, 10.0d);
// flaky:         roundVolumeList62.add(1, roundVolume75);
        boolean boolean77 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator78 = roundVolumeList62.spliterator();
        Main main79 = new Main();
        main79.init();
        main79.stop();
        javafx.application.HostServices hostServices82 = main79.getHostServices();
        Main[] mainArray83 = new Main[] { main79 };
        // The following exception was thrown during execution in test generation
        try {
            Main[] mainArray84 = roundVolumeList62.toArray(mainArray83);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor53);
        org.junit.Assert.assertNotNull(roundVolumeList62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator78);
        org.junit.Assert.assertNotNull(hostServices82);
        org.junit.Assert.assertNotNull(mainArray83);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        double double6 = roundVolume3.getVolume();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.RoundVolume roundVolume15 = new logic.RoundVolume();
        roundVolume15.setVolume((double) 0);
        double double18 = roundVolume15.getVolume();
        roundVolume15.setLength((double) 10L);
        boolean boolean21 = roundVolumeList7.equals((java.lang.Object) 10L);
        logic.YourWood yourWood23 = new logic.YourWood();
        yourWood23.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood23.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList26 = yourWood23.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream27 = roundVolumeList26.stream();
        logic.YourWood yourWood28 = new logic.YourWood();
// flaky:         yourWood28.addWood((double) 1L, (int) (byte) 100);
        yourWood28.lengthFirstSortWood();
        yourWood28.diameterFirstSortWood();
        yourWood28.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList35 = yourWood28.getWood();
        logic.YourWood yourWood36 = new logic.YourWood();
// flaky:         yourWood36.addWood((double) 1L, (int) (byte) 100);
        yourWood36.lengthFirstSortWood();
        boolean boolean41 = roundVolumeList35.contains((java.lang.Object) yourWood36);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor42 = roundVolumeList35.iterator();
        logic.YourWood yourWood44 = new logic.YourWood();
// flaky:         yourWood44.addWood((double) 1L, (int) (byte) 100);
        yourWood44.lengthFirstSortWood();
        yourWood44.diameterFirstSortWood();
        yourWood44.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList51 = yourWood44.getWood();
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        boolean boolean57 = roundVolumeList51.contains((java.lang.Object) yourWood52);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor58 = roundVolumeList51.iterator();
        boolean boolean59 = roundVolumeList35.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList51);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor61 = null; // flaky: roundVolumeList51.listIterator((int) (short) 1);
        boolean boolean62 = roundVolumeList26.remove((java.lang.Object) roundVolumeList51);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream63 = roundVolumeList26.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = roundVolumeList7.addAll((int) '4', (java.util.Collection<logic.RoundVolume>) roundVolumeList26);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertNotNull(roundVolumeList26);
        org.junit.Assert.assertNotNull(roundVolumeStream27);
        org.junit.Assert.assertNotNull(roundVolumeList35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor42);
        org.junit.Assert.assertNotNull(roundVolumeList51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor58);
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream63);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        boolean boolean34 = roundVolumeList23.isEmpty();
        boolean boolean35 = roundVolumeList23.isEmpty();
        logic.YourWood yourWood36 = new logic.YourWood();
// flaky:         yourWood36.addWood((double) 1L, (int) (byte) 100);
        yourWood36.lengthFirstSortWood();
        yourWood36.diameterFirstSortWood();
        yourWood36.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList43 = yourWood36.getWood();
        logic.YourWood yourWood44 = new logic.YourWood();
// flaky:         yourWood44.addWood((double) 1L, (int) (byte) 100);
        yourWood44.lengthFirstSortWood();
        boolean boolean49 = roundVolumeList43.contains((java.lang.Object) yourWood44);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList43.iterator();
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        boolean boolean67 = roundVolumeList43.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList59);
        logic.RoundVolume roundVolume68 = new logic.RoundVolume();
        roundVolume68.setVolume((double) 0);
        double double71 = roundVolume68.getVolume();
        roundVolume68.setLength((double) 10L);
        logic.RoundVolume roundVolume74 = new logic.RoundVolume();
        roundVolume74.setVolume((double) 0);
        double double77 = roundVolume74.getVolume();
        java.lang.String str78 = roundVolume74.toString();
        boolean boolean79 = roundVolume68.equals((java.lang.Object) str78);
        double double80 = roundVolume68.getVolume();
        boolean boolean81 = roundVolumeList43.add(roundVolume68);
        boolean boolean82 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList43);
        java.lang.Class<?> wildcardClass83 = roundVolumeList43.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(roundVolumeList43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str78, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getLength();
        roundVolume0.setDiameter((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        yourWood0.lengthFirstSortWood();
        yourWood0.lengthFirstSortWood();
        org.junit.Assert.assertNotNull(roundVolumeList7);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean79 = roundVolumeList60.remove((java.lang.Object) false);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList60.iterator();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        Main main0 = new Main();
        main0.init();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.HostServices hostServices3 = main0.getHostServices();
        javafx.application.Application.Parameters parameters4 = main0.getParameters();
        main0.init();
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNotNull(hostServices3);
        org.junit.Assert.assertNull(parameters4);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream3 = roundVolumeList2.parallelStream();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume7.setVolume((double) 10);
        java.lang.String str10 = roundVolume7.toString();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume();
        roundVolume11.setVolume((double) 0);
        double double14 = roundVolume11.getVolume();
        java.lang.String str15 = roundVolume11.toString();
        double double16 = roundVolume11.getLength();
        roundVolume11.setLength((double) 'a');
        java.lang.String str19 = roundVolume11.toString();
        logic.RoundVolume roundVolume23 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        double double29 = roundVolume24.getLength();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume33.setVolume((double) 10);
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str40 = roundVolume39.toString();
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume59.setVolume((double) 10);
        java.lang.String str62 = roundVolume59.toString();
        logic.RoundVolume[] roundVolumeArray63 = new logic.RoundVolume[] { roundVolume7, roundVolume11, roundVolume23, roundVolume24, roundVolume33, roundVolume39, roundVolume41, roundVolume44, roundVolume59 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64, roundVolumeArray63);
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        yourWood66.diameterFirstSortWood();
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.YourWood yourWood74 = new logic.YourWood();
// flaky:         yourWood74.addWood((double) 1L, (int) (byte) 100);
        yourWood74.lengthFirstSortWood();
        boolean boolean79 = roundVolumeList73.contains((java.lang.Object) yourWood74);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList73.iterator();
        boolean boolean81 = roundVolumeList64.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        int int82 = roundVolumeList73.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator83 = roundVolumeList73.spliterator();
        int int84 = roundVolumeList2.lastIndexOf((java.lang.Object) roundVolumeList73);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList73.iterator();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeStream3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str10, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str40, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str62, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeItor85);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList8 = yourWood0.getWood();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator9 = roundVolumeList8.spliterator();
        logic.RoundVolume roundVolume10 = new logic.RoundVolume();
        roundVolume10.setVolume((double) 0);
        double double13 = roundVolume10.getVolume();
        java.lang.String str14 = roundVolume10.toString();
        int int15 = roundVolume10.getDiameter();
        roundVolume10.setLength((double) '#');
        roundVolume10.setVolume(10.0d);
        int int20 = roundVolumeList8.lastIndexOf((java.lang.Object) 10.0d);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream21 = roundVolumeList8.stream();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList8.replaceAll(roundVolumeUnaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertNotNull(roundVolumeList8);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str14, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeStream21);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList23.isEmpty();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) (-1L));
        boolean boolean55 = roundVolumeList15.add(roundVolume49);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume57 = roundVolumeList15.get((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean79 = roundVolumeList60.remove((java.lang.Object) false);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream80 = roundVolumeList60.stream();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream80);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume(52.0d, 0, (double) 1L);
        roundVolume3.setDiameter((int) (byte) -1);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
// flaky:         yourWood0.addWood((double) 1L, 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList10 = yourWood0.getWood();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume12 = roundVolumeList10.get((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList10);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
// flaky:         yourWood0.addWood((double) 1L, 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        Main main0 = new Main();
        main0.init();
        javafx.application.HostServices hostServices2 = main0.getHostServices();
        main0.init();
        javafx.application.HostServices hostServices4 = main0.getHostServices();
        org.junit.Assert.assertNotNull(hostServices2);
        org.junit.Assert.assertNotNull(hostServices4);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        double double44 = roundVolume41.getVolume();
        java.lang.String str45 = roundVolume41.toString();
        double double46 = roundVolume41.getLength();
        roundVolume41.setLength((double) 'a');
        roundVolume41.setLength((double) (short) 0);
        logic.RoundVolume roundVolume51 = null; // flaky: roundVolumeList23.set((int) (short) 1, roundVolume41);
        double double52 = 0.0; // flaky: roundVolume51.getVolume();
// flaky:         roundVolume51.setDiameter((-1));
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str45, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
// flaky:         org.junit.Assert.assertNotNull(roundVolume51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList57.listIterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        roundVolume67.setLength((double) (-1L));
        boolean boolean73 = roundVolumeList57.add(roundVolume67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor74 = roundVolumeList57.iterator();
        boolean boolean75 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList57.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume78 = roundVolumeList57.remove((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        yourWood23.diameterFirstSortWood();
        boolean boolean30 = roundVolumeList7.remove((java.lang.Object) yourWood23);
        yourWood23.diameterFirstSortWood();
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList33 = yourWood23.getWood();
// flaky:         yourWood23.addWood((double) 10, (int) (short) 10);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeList33);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor79 = roundVolumeList69.listIterator();
        int int80 = roundVolumeList69.size();
        java.util.Collection<logic.RoundVolume> roundVolumeCollection81 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = roundVolumeList69.addAll(roundVolumeCollection81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(roundVolumeItor79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        boolean boolean30 = roundVolumeList24.contains((java.lang.Object) yourWood25);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor31 = roundVolumeList24.iterator();
        logic.YourWood yourWood33 = new logic.YourWood();
// flaky:         yourWood33.addWood((double) 1L, (int) (byte) 100);
        yourWood33.lengthFirstSortWood();
        yourWood33.diameterFirstSortWood();
        yourWood33.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList40 = yourWood33.getWood();
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        boolean boolean46 = roundVolumeList40.contains((java.lang.Object) yourWood41);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor47 = roundVolumeList40.iterator();
        boolean boolean48 = roundVolumeList24.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList40);
        java.lang.Object obj49 = null;
        boolean boolean50 = roundVolumeList24.remove(obj49);
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        logic.YourWood yourWood67 = new logic.YourWood();
// flaky:         yourWood67.addWood((double) 1L, (int) (byte) 100);
        yourWood67.lengthFirstSortWood();
        yourWood67.diameterFirstSortWood();
        yourWood67.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList74 = yourWood67.getWood();
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        boolean boolean80 = roundVolumeList74.contains((java.lang.Object) yourWood75);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor81 = roundVolumeList74.iterator();
        boolean boolean82 = roundVolumeList58.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        java.lang.Object[] objArray83 = roundVolumeList74.toArray();
        java.lang.Object[] objArray84 = roundVolumeList74.toArray();
        boolean boolean85 = roundVolumeList24.equals((java.lang.Object) roundVolumeList74);
        java.lang.Object obj86 = null;
        boolean boolean87 = roundVolumeList74.contains(obj86);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor88 = roundVolumeList74.iterator();
        boolean boolean89 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator90 = roundVolumeList7.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList93 = roundVolumeList7.subList((int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: fromIndex = -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor31);
        org.junit.Assert.assertNotNull(roundVolumeList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
        org.junit.Assert.assertNotNull(roundVolumeList74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor81);
// flaky:         org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor88);
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator90);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        logic.YourWood yourWood14 = new logic.YourWood();
// flaky:         yourWood14.addWood((double) 1L, (int) (byte) 100);
        yourWood14.lengthFirstSortWood();
        yourWood14.diameterFirstSortWood();
        yourWood14.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood14.getWood();
        logic.YourWood yourWood22 = new logic.YourWood();
// flaky:         yourWood22.addWood((double) 1L, (int) (byte) 100);
        yourWood22.lengthFirstSortWood();
        boolean boolean27 = roundVolumeList21.contains((java.lang.Object) yourWood22);
        boolean boolean28 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList21);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream29 = roundVolumeList21.parallelStream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream29);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream31 = roundVolumeList23.stream();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        logic.RoundVolume roundVolume50 = null; // flaky: roundVolumeList15.remove(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream51 = roundVolumeList15.stream();
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        logic.YourWood yourWood67 = new logic.YourWood();
// flaky:         yourWood67.addWood((double) 1L, (int) (byte) 100);
        yourWood67.lengthFirstSortWood();
        yourWood67.diameterFirstSortWood();
        yourWood67.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList74 = yourWood67.getWood();
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        boolean boolean80 = roundVolumeList74.contains((java.lang.Object) yourWood75);
        yourWood75.diameterFirstSortWood();
        boolean boolean82 = roundVolumeList59.remove((java.lang.Object) yourWood75);
        logic.RoundVolume roundVolume86 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double87 = roundVolume86.getLength();
        int int88 = roundVolume86.getDiameter();
        roundVolume86.setLength(100.0d);
        boolean boolean91 = roundVolumeList59.add(roundVolume86);
        boolean boolean92 = roundVolumeList15.remove((java.lang.Object) roundVolume86);
        Main main93 = new Main();
        main93.init();
        javafx.application.Application.Parameters parameters95 = main93.getParameters();
        javafx.application.HostServices hostServices96 = main93.getHostServices();
        javafx.application.Application.Parameters parameters97 = main93.getParameters();
        javafx.application.HostServices hostServices98 = main93.getHostServices();
        int int99 = roundVolumeList15.lastIndexOf((java.lang.Object) main93);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeStream31);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertNotNull(roundVolume50);
        org.junit.Assert.assertNotNull(roundVolumeStream51);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertNotNull(roundVolumeList74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(parameters95);
        org.junit.Assert.assertNotNull(hostServices96);
        org.junit.Assert.assertNull(parameters97);
        org.junit.Assert.assertNotNull(hostServices98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        boolean boolean80 = roundVolumeList69.contains((java.lang.Object) "");
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator81 = roundVolumeList69.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume83 = roundVolumeList69.remove((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator81);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean80 = roundVolumeList60.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList83 = roundVolumeList60.subList(1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.RoundVolume roundVolume17 = null;
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume18 = roundVolumeList7.set((int) 'a', roundVolume17);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        Main main15 = new Main();
        main15.init();
        main15.init();
        javafx.application.Application.Parameters parameters18 = main15.getParameters();
        main15.stop();
        boolean boolean20 = roundVolumeList7.contains((java.lang.Object) main15);
        javafx.application.HostServices hostServices21 = main15.getHostServices();
        main15.stop();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(parameters18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(hostServices21);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        roundVolumeList23.clear();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator48 = roundVolumeList41.spliterator();
        logic.YourWood yourWood49 = new logic.YourWood();
// flaky:         yourWood49.addWood((double) 1L, (int) (byte) 100);
        yourWood49.lengthFirstSortWood();
        yourWood49.diameterFirstSortWood();
        yourWood49.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList56 = yourWood49.getWood();
        logic.YourWood yourWood57 = new logic.YourWood();
// flaky:         yourWood57.addWood((double) 1L, (int) (byte) 100);
        yourWood57.lengthFirstSortWood();
        boolean boolean62 = roundVolumeList56.contains((java.lang.Object) yourWood57);
        boolean boolean64 = roundVolumeList56.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray65 = roundVolumeList56.toArray();
        boolean boolean66 = roundVolumeList41.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList56);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator67 = roundVolumeList41.spliterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator68 = roundVolumeList41.spliterator();
        boolean boolean69 = roundVolumeList23.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        int int70 = roundVolumeList41.size();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator48);
        org.junit.Assert.assertNotNull(roundVolumeList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator67);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        boolean boolean80 = roundVolumeList69.contains((java.lang.Object) "");
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator81 = roundVolumeList69.spliterator();
        java.lang.Class<?> wildcardClass82 = roundVolumeSpliterator81.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood16.getWood();
        int int22 = roundVolumeList7.lastIndexOf((java.lang.Object) roundVolumeList21);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor24 = roundVolumeList7.listIterator(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator17 = roundVolumeList15.spliterator();
        java.lang.Object[] objArray18 = roundVolumeList15.toArray();
        java.util.Collection<logic.RoundVolume> roundVolumeCollection19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = roundVolumeList15.addAll(roundVolumeCollection19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator17);
        org.junit.Assert.assertNotNull(objArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream3 = roundVolumeList2.parallelStream();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume7.setVolume((double) 10);
        java.lang.String str10 = roundVolume7.toString();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume();
        roundVolume11.setVolume((double) 0);
        double double14 = roundVolume11.getVolume();
        java.lang.String str15 = roundVolume11.toString();
        double double16 = roundVolume11.getLength();
        roundVolume11.setLength((double) 'a');
        java.lang.String str19 = roundVolume11.toString();
        logic.RoundVolume roundVolume23 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        double double29 = roundVolume24.getLength();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume33.setVolume((double) 10);
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str40 = roundVolume39.toString();
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume59.setVolume((double) 10);
        java.lang.String str62 = roundVolume59.toString();
        logic.RoundVolume[] roundVolumeArray63 = new logic.RoundVolume[] { roundVolume7, roundVolume11, roundVolume23, roundVolume24, roundVolume33, roundVolume39, roundVolume41, roundVolume44, roundVolume59 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64, roundVolumeArray63);
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        yourWood66.diameterFirstSortWood();
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.YourWood yourWood74 = new logic.YourWood();
// flaky:         yourWood74.addWood((double) 1L, (int) (byte) 100);
        yourWood74.lengthFirstSortWood();
        boolean boolean79 = roundVolumeList73.contains((java.lang.Object) yourWood74);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList73.iterator();
        boolean boolean81 = roundVolumeList64.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        int int82 = roundVolumeList73.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator83 = roundVolumeList73.spliterator();
        int int84 = roundVolumeList2.lastIndexOf((java.lang.Object) roundVolumeList73);
        logic.RoundVolume roundVolume89 = new logic.RoundVolume((double) ' ', (int) '#', 52.0d);
        java.lang.String str90 = roundVolume89.toString();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume91 = roundVolumeList2.set(10, roundVolume89);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeStream3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str10, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str40, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str62, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "RoundVolume(length=32.0, diameter=35, volume=52.0)" + "'", str90, "RoundVolume(length=32.0, diameter=35, volume=52.0)");
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        roundVolume35.setVolume((double) 0);
        double double38 = roundVolume35.getVolume();
        java.lang.String str39 = roundVolume35.toString();
        int int40 = roundVolume35.getDiameter();
        roundVolume35.setLength((double) '#');
        roundVolume35.setVolume(10.0d);
        roundVolume35.setVolume(100.0d);
        boolean boolean47 = roundVolumeList23.add(roundVolume35);
        logic.RoundVolume roundVolume48 = new logic.RoundVolume();
        roundVolume48.setVolume((double) 0);
        double double51 = roundVolume48.getVolume();
        java.lang.String str52 = roundVolume48.toString();
        int int53 = roundVolume48.getDiameter();
        boolean boolean54 = roundVolume35.equals((java.lang.Object) int53);
        roundVolume35.setDiameter((int) (byte) 100);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str39, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str52, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream3 = roundVolumeList2.parallelStream();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume7.setVolume((double) 10);
        java.lang.String str10 = roundVolume7.toString();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume();
        roundVolume11.setVolume((double) 0);
        double double14 = roundVolume11.getVolume();
        java.lang.String str15 = roundVolume11.toString();
        double double16 = roundVolume11.getLength();
        roundVolume11.setLength((double) 'a');
        java.lang.String str19 = roundVolume11.toString();
        logic.RoundVolume roundVolume23 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        double double29 = roundVolume24.getLength();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume33.setVolume((double) 10);
        logic.RoundVolume roundVolume39 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str40 = roundVolume39.toString();
        logic.RoundVolume roundVolume41 = new logic.RoundVolume();
        roundVolume41.setVolume((double) 0);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume59.setVolume((double) 10);
        java.lang.String str62 = roundVolume59.toString();
        logic.RoundVolume[] roundVolumeArray63 = new logic.RoundVolume[] { roundVolume7, roundVolume11, roundVolume23, roundVolume24, roundVolume33, roundVolume39, roundVolume41, roundVolume44, roundVolume59 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList64 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList64, roundVolumeArray63);
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        yourWood66.diameterFirstSortWood();
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.YourWood yourWood74 = new logic.YourWood();
// flaky:         yourWood74.addWood((double) 1L, (int) (byte) 100);
        yourWood74.lengthFirstSortWood();
        boolean boolean79 = roundVolumeList73.contains((java.lang.Object) yourWood74);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList73.iterator();
        boolean boolean81 = roundVolumeList64.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        int int82 = roundVolumeList73.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator83 = roundVolumeList73.spliterator();
        int int84 = roundVolumeList2.lastIndexOf((java.lang.Object) roundVolumeList73);
        logic.RoundVolume roundVolume86 = null; // flaky: roundVolumeList73.remove(0);
        double double87 = 0.0; // flaky: roundVolume86.getLength();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeStream3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str10, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str40, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str62, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
// flaky:         org.junit.Assert.assertNotNull(roundVolume86);
// flaky:         org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        double double6 = roundVolume3.getLength();
        java.lang.String str7 = roundVolume3.toString();
        roundVolume3.setVolume(1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=-1.0)" + "'", str7, "RoundVolume(length=0.0, diameter=0, volume=-1.0)");
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) (short) 0);
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList25.iterator();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        boolean boolean49 = roundVolumeList25.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList41.listIterator();
        java.lang.Object[] objArray51 = roundVolumeList41.toArray();
        roundVolumeList41.clear();
        boolean boolean53 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume55 = roundVolumeList41.remove(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertNotNull(objArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (byte) 100, 1, (double) 0.0f);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor36 = null; // flaky: roundVolumeList23.listIterator(1);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor37 = roundVolumeList23.iterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor36);
        org.junit.Assert.assertNotNull(roundVolumeItor37);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        boolean boolean34 = roundVolumeList23.isEmpty();
        boolean boolean35 = roundVolumeList23.isEmpty();
        logic.YourWood yourWood36 = new logic.YourWood();
// flaky:         yourWood36.addWood((double) 1L, (int) (byte) 100);
        yourWood36.lengthFirstSortWood();
        yourWood36.diameterFirstSortWood();
        yourWood36.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList43 = yourWood36.getWood();
        logic.YourWood yourWood44 = new logic.YourWood();
// flaky:         yourWood44.addWood((double) 1L, (int) (byte) 100);
        yourWood44.lengthFirstSortWood();
        boolean boolean49 = roundVolumeList43.contains((java.lang.Object) yourWood44);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList43.iterator();
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList59.iterator();
        boolean boolean67 = roundVolumeList43.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList59);
        logic.RoundVolume roundVolume68 = new logic.RoundVolume();
        roundVolume68.setVolume((double) 0);
        double double71 = roundVolume68.getVolume();
        roundVolume68.setLength((double) 10L);
        logic.RoundVolume roundVolume74 = new logic.RoundVolume();
        roundVolume74.setVolume((double) 0);
        double double77 = roundVolume74.getVolume();
        java.lang.String str78 = roundVolume74.toString();
        boolean boolean79 = roundVolume68.equals((java.lang.Object) str78);
        double double80 = roundVolume68.getVolume();
        boolean boolean81 = roundVolumeList43.add(roundVolume68);
        boolean boolean82 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList43);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator83 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList23.replaceAll(roundVolumeUnaryOperator83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(roundVolumeList43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str78, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        Main main0 = new Main();
        javafx.application.Application.Parameters parameters1 = main0.getParameters();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        main0.stop();
        javafx.application.Application.Parameters parameters4 = main0.getParameters();
        org.junit.Assert.assertNull(parameters1);
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNull(parameters4);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume16 = null;
        boolean boolean17 = roundVolumeList15.add(roundVolume16);
        logic.RoundVolume roundVolume19 = new logic.RoundVolume();
        roundVolume19.setVolume((double) 0);
        roundVolume19.setDiameter(100);
        roundVolume19.setLength((double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList15.add((int) (byte) -1, roundVolume19);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator14 = roundVolumeList7.spliterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        boolean boolean30 = roundVolumeList22.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray31 = roundVolumeList22.toArray();
        boolean boolean32 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList22);
        roundVolumeList7.clear();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream34 = roundVolumeList7.parallelStream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream34);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream4 = roundVolumeList3.stream();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        boolean boolean18 = roundVolumeList12.contains((java.lang.Object) yourWood13);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList12.iterator();
        logic.YourWood yourWood21 = new logic.YourWood();
// flaky:         yourWood21.addWood((double) 1L, (int) (byte) 100);
        yourWood21.lengthFirstSortWood();
        yourWood21.diameterFirstSortWood();
        yourWood21.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList28 = yourWood21.getWood();
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        boolean boolean34 = roundVolumeList28.contains((java.lang.Object) yourWood29);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList28.iterator();
        boolean boolean36 = roundVolumeList12.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList28);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor38 = null; // flaky: roundVolumeList28.listIterator((int) (short) 1);
        boolean boolean39 = roundVolumeList3.remove((java.lang.Object) roundVolumeList28);
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        yourWood40.diameterFirstSortWood();
        yourWood40.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList47 = yourWood40.getWood();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        boolean boolean53 = roundVolumeList47.contains((java.lang.Object) yourWood48);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor54 = roundVolumeList47.iterator();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        yourWood56.diameterFirstSortWood();
        yourWood56.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList63 = yourWood56.getWood();
        logic.YourWood yourWood64 = new logic.YourWood();
// flaky:         yourWood64.addWood((double) 1L, (int) (byte) 100);
        yourWood64.lengthFirstSortWood();
        boolean boolean69 = roundVolumeList63.contains((java.lang.Object) yourWood64);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor70 = roundVolumeList63.iterator();
        boolean boolean71 = roundVolumeList47.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList63);
        boolean boolean72 = roundVolumeList63.isEmpty();
        java.lang.Object[] objArray73 = roundVolumeList63.toArray();
        int int74 = roundVolumeList3.indexOf((java.lang.Object) roundVolumeList63);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor75 = roundVolumeList3.iterator();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertNotNull(roundVolumeStream4);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor19);
        org.junit.Assert.assertNotNull(roundVolumeList28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeList47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor54);
        org.junit.Assert.assertNotNull(roundVolumeList63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor70);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeItor75);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolumeList3.remove(obj4);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor6 = roundVolumeList3.listIterator();
        java.lang.Class<?> wildcardClass7 = roundVolumeItor6.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream31 = roundVolumeList23.stream();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        boolean boolean49 = roundVolumeList15.isEmpty();
        Main main50 = new Main();
        main50.init();
        javafx.application.Application.Parameters parameters52 = main50.getParameters();
        javafx.application.HostServices hostServices53 = main50.getHostServices();
        javafx.application.Application.Parameters parameters54 = main50.getParameters();
        javafx.application.HostServices hostServices55 = main50.getHostServices();
        javafx.application.HostServices hostServices56 = main50.getHostServices();
        java.lang.Class<?> wildcardClass57 = hostServices56.getClass();
        boolean boolean58 = roundVolumeList15.remove((java.lang.Object) wildcardClass57);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeStream31);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(parameters52);
        org.junit.Assert.assertNotNull(hostServices53);
        org.junit.Assert.assertNull(parameters54);
        org.junit.Assert.assertNotNull(hostServices55);
        org.junit.Assert.assertNotNull(hostServices56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        java.lang.Object[] objArray79 = roundVolumeList69.toArray();
        roundVolumeList69.clear();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream81 = roundVolumeList69.parallelStream();
        java.lang.Class<?> wildcardClass82 = roundVolumeList69.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertNotNull(objArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=0.0, diameter=0, volume=-1.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        roundVolume3.setDiameter(1);
        roundVolume3.setLength((double) 100);
        java.lang.String str8 = roundVolume3.toString();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RoundVolume(length=100.0, diameter=1, volume=1.0)" + "'", str8, "RoundVolume(length=100.0, diameter=1, volume=1.0)");
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        java.lang.Object[] objArray79 = roundVolumeList69.toArray();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(objArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.RoundVolume roundVolume15 = new logic.RoundVolume();
        roundVolume15.setVolume((double) 0);
        double double18 = roundVolume15.getVolume();
        roundVolume15.setLength((double) 10L);
        boolean boolean21 = roundVolumeList7.equals((java.lang.Object) 10L);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor22 = roundVolumeList7.listIterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor22);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        Main main0 = new Main();
        main0.stop();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        javafx.application.HostServices hostServices4 = main0.getHostServices();
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNull(parameters3);
        org.junit.Assert.assertNotNull(hostServices4);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator34 = roundVolumeList23.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeSpliterator34);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 52, 10, (double) 0);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        double double8 = roundVolume0.getLength();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList16 = yourWood9.getWood();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        boolean boolean22 = roundVolumeList16.contains((java.lang.Object) yourWood17);
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor25 = roundVolumeList24.listIterator();
        boolean boolean26 = roundVolume0.equals((java.lang.Object) roundVolumeList24);
        logic.YourWood yourWood27 = new logic.YourWood();
// flaky:         yourWood27.addWood((double) 1L, (int) (byte) 100);
        yourWood27.lengthFirstSortWood();
        yourWood27.diameterFirstSortWood();
        yourWood27.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList34 = yourWood27.getWood();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        boolean boolean40 = roundVolumeList34.contains((java.lang.Object) yourWood35);
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        roundVolume44.setLength((double) 10L);
        boolean boolean59 = roundVolume44.equals((java.lang.Object) "CASPIAN");
        roundVolumeList42.add(0, roundVolume44);
        boolean boolean61 = roundVolumeList42.isEmpty();
        boolean boolean62 = roundVolumeList24.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList42);
        java.lang.Class<?> wildcardClass63 = roundVolumeList42.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 97.0d + "'", double8 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertNotNull(roundVolumeItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(roundVolumeList34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=100.0, diameter=1, volume=1.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        roundVolumeList2.clear();
        logic.RoundVolume roundVolume4 = new logic.RoundVolume();
        roundVolume4.setVolume((double) 0);
        double double7 = roundVolume4.getVolume();
        roundVolume4.setLength((double) (-1L));
        java.lang.Class<?> wildcardClass10 = roundVolume4.getClass();
        boolean boolean11 = roundVolumeList2.remove((java.lang.Object) wildcardClass10);
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        yourWood13.diameterFirstSortWood();
        yourWood13.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList20 = yourWood13.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood13.getWood();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator22 = roundVolumeList21.spliterator();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        yourWood23.diameterFirstSortWood();
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList30 = yourWood23.getWood();
        logic.YourWood yourWood31 = new logic.YourWood();
// flaky:         yourWood31.addWood((double) 1L, (int) (byte) 100);
        yourWood31.lengthFirstSortWood();
        boolean boolean36 = roundVolumeList30.contains((java.lang.Object) yourWood31);
        boolean boolean38 = roundVolumeList30.equals((java.lang.Object) (short) 100);
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor53 = roundVolumeList46.iterator();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        yourWood55.diameterFirstSortWood();
        yourWood55.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList62 = yourWood55.getWood();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        boolean boolean68 = roundVolumeList62.contains((java.lang.Object) yourWood63);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList62.iterator();
        boolean boolean70 = roundVolumeList46.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        boolean boolean71 = roundVolumeList30.equals((java.lang.Object) roundVolumeList62);
        logic.RoundVolume roundVolume72 = new logic.RoundVolume();
        roundVolume72.setVolume((double) 0);
        double double75 = roundVolume72.getVolume();
        java.lang.String str76 = roundVolume72.toString();
        int int77 = roundVolume72.getDiameter();
        roundVolume72.setLength((double) '#');
        roundVolume72.setVolume(10.0d);
        double double82 = roundVolume72.getLength();
        boolean boolean83 = roundVolumeList62.add(roundVolume72);
        boolean boolean84 = roundVolumeList21.equals((java.lang.Object) roundVolume72);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream85 = roundVolumeList21.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = roundVolumeList2.addAll((int) (short) 100, (java.util.Collection<logic.RoundVolume>) roundVolumeList21);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(roundVolumeList20);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator22);
        org.junit.Assert.assertNotNull(roundVolumeList30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor53);
        org.junit.Assert.assertNotNull(roundVolumeList62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str76, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 35.0d + "'", double82 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream85);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume17 = new logic.RoundVolume();
        roundVolume17.setVolume((double) 0);
        double double20 = roundVolume17.getVolume();
        roundVolume17.setLength((double) 10L);
        logic.RoundVolume roundVolume23 = new logic.RoundVolume();
        roundVolume23.setVolume((double) 0);
        double double26 = roundVolume23.getVolume();
        java.lang.String str27 = roundVolume23.toString();
        boolean boolean28 = roundVolume17.equals((java.lang.Object) str27);
        roundVolume17.setLength((double) 10L);
        boolean boolean32 = roundVolume17.equals((java.lang.Object) "CASPIAN");
        roundVolumeList15.add(0, roundVolume17);
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean38 = roundVolumeList15.remove((java.lang.Object) (byte) 1);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor39 = roundVolumeList15.listIterator();
        java.lang.Class<?> wildcardClass40 = roundVolumeList15.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str27, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        logic.RoundVolume roundVolume18 = new logic.RoundVolume();
        roundVolume18.setVolume((double) 0);
        double double21 = roundVolume18.getVolume();
        roundVolume18.setLength((double) 10L);
        logic.RoundVolume roundVolume24 = new logic.RoundVolume();
        roundVolume24.setVolume((double) 0);
        double double27 = roundVolume24.getVolume();
        java.lang.String str28 = roundVolume24.toString();
        boolean boolean29 = roundVolume18.equals((java.lang.Object) str28);
        roundVolume18.setLength((double) 10L);
        boolean boolean33 = roundVolume18.equals((java.lang.Object) "CASPIAN");
        int int34 = roundVolume18.getDiameter();
        double double35 = roundVolume18.getLength();
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList15.add(100, roundVolume18);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str28, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolumeList3.remove(obj4);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator6 = roundVolumeList3.spliterator();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        int int15 = roundVolumeList3.lastIndexOf((java.lang.Object) roundVolume7);
        java.lang.Object obj16 = null;
        int int17 = roundVolumeList3.indexOf(obj16);
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList8 = yourWood0.getWood();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator9 = roundVolumeList8.spliterator();
        logic.YourWood yourWood10 = new logic.YourWood();
// flaky:         yourWood10.addWood((double) 1L, (int) (byte) 100);
        yourWood10.lengthFirstSortWood();
        yourWood10.diameterFirstSortWood();
        yourWood10.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList17 = yourWood10.getWood();
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        boolean boolean23 = roundVolumeList17.contains((java.lang.Object) yourWood18);
        boolean boolean25 = roundVolumeList17.equals((java.lang.Object) (short) 100);
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        yourWood26.diameterFirstSortWood();
        yourWood26.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList33 = yourWood26.getWood();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        boolean boolean39 = roundVolumeList33.contains((java.lang.Object) yourWood34);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor40 = roundVolumeList33.iterator();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        yourWood42.diameterFirstSortWood();
        yourWood42.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList49 = yourWood42.getWood();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        boolean boolean55 = roundVolumeList49.contains((java.lang.Object) yourWood50);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor56 = roundVolumeList49.iterator();
        boolean boolean57 = roundVolumeList33.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList49);
        boolean boolean58 = roundVolumeList17.equals((java.lang.Object) roundVolumeList49);
        logic.RoundVolume roundVolume59 = new logic.RoundVolume();
        roundVolume59.setVolume((double) 0);
        double double62 = roundVolume59.getVolume();
        java.lang.String str63 = roundVolume59.toString();
        int int64 = roundVolume59.getDiameter();
        roundVolume59.setLength((double) '#');
        roundVolume59.setVolume(10.0d);
        double double69 = roundVolume59.getLength();
        boolean boolean70 = roundVolumeList49.add(roundVolume59);
        boolean boolean71 = roundVolumeList8.equals((java.lang.Object) roundVolume59);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume73 = roundVolumeList8.get(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertNotNull(roundVolumeList8);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator9);
        org.junit.Assert.assertNotNull(roundVolumeList17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(roundVolumeList33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor40);
        org.junit.Assert.assertNotNull(roundVolumeList49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str63, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 35.0d + "'", double69 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList4 = yourWood0.getWood();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor6 = roundVolumeList4.listIterator(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList4);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        boolean boolean30 = roundVolumeList24.contains((java.lang.Object) yourWood25);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor31 = roundVolumeList24.iterator();
        logic.YourWood yourWood33 = new logic.YourWood();
// flaky:         yourWood33.addWood((double) 1L, (int) (byte) 100);
        yourWood33.lengthFirstSortWood();
        yourWood33.diameterFirstSortWood();
        yourWood33.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList40 = yourWood33.getWood();
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        boolean boolean46 = roundVolumeList40.contains((java.lang.Object) yourWood41);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor47 = roundVolumeList40.iterator();
        boolean boolean48 = roundVolumeList24.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList40);
        java.lang.Object obj49 = null;
        boolean boolean50 = roundVolumeList24.remove(obj49);
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        logic.YourWood yourWood67 = new logic.YourWood();
// flaky:         yourWood67.addWood((double) 1L, (int) (byte) 100);
        yourWood67.lengthFirstSortWood();
        yourWood67.diameterFirstSortWood();
        yourWood67.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList74 = yourWood67.getWood();
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        boolean boolean80 = roundVolumeList74.contains((java.lang.Object) yourWood75);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor81 = roundVolumeList74.iterator();
        boolean boolean82 = roundVolumeList58.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        java.lang.Object[] objArray83 = roundVolumeList74.toArray();
        java.lang.Object[] objArray84 = roundVolumeList74.toArray();
        boolean boolean85 = roundVolumeList24.equals((java.lang.Object) roundVolumeList74);
        java.lang.Object obj86 = null;
        boolean boolean87 = roundVolumeList74.contains(obj86);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor88 = roundVolumeList74.iterator();
        boolean boolean89 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        logic.RoundVolume roundVolume93 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double94 = roundVolume93.getLength();
        int int95 = roundVolume93.getDiameter();
        double double96 = roundVolume93.getLength();
        int int97 = roundVolumeList7.indexOf((java.lang.Object) roundVolume93);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume99 = roundVolumeList7.get((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor31);
        org.junit.Assert.assertNotNull(roundVolumeList40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
        org.junit.Assert.assertNotNull(roundVolumeList74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor81);
// flaky:         org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor88);
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        boolean boolean30 = roundVolumeList24.contains((java.lang.Object) yourWood25);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor31 = roundVolumeList24.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream32 = roundVolumeList24.stream();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream33 = roundVolumeList24.stream();
        int int34 = roundVolumeList7.indexOf((java.lang.Object) roundVolumeList24);
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        boolean boolean66 = roundVolumeList42.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor67 = roundVolumeList58.listIterator();
        java.lang.Object[] objArray68 = roundVolumeList58.toArray();
        roundVolumeList58.clear();
        logic.RoundVolume roundVolume70 = new logic.RoundVolume();
        boolean boolean71 = roundVolumeList58.equals((java.lang.Object) roundVolume70);
        boolean boolean72 = roundVolumeList24.contains((java.lang.Object) roundVolumeList58);
        Main main73 = new Main();
        javafx.application.Application.Parameters parameters74 = main73.getParameters();
        javafx.application.HostServices hostServices75 = main73.getHostServices();
        main73.init();
        boolean boolean77 = roundVolumeList24.remove((java.lang.Object) main73);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor31);
        org.junit.Assert.assertNotNull(roundVolumeStream32);
        org.junit.Assert.assertNotNull(roundVolumeStream33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor67);
        org.junit.Assert.assertNotNull(objArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(parameters74);
        org.junit.Assert.assertNotNull(hostServices75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (short) 0, (int) ' ', 52.0d);
        java.lang.String str4 = roundVolume3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=32, volume=52.0)" + "'", str4, "RoundVolume(length=0.0, diameter=32, volume=52.0)");
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getLength();
        roundVolume0.setVolume(100.0d);
        double double6 = roundVolume0.getVolume();
        roundVolume0.setLength((double) 10L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        boolean boolean66 = roundVolumeList42.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        int int68 = roundVolumeList58.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray69 = roundVolumeList58.toArray();
        logic.RoundVolume roundVolume70 = new logic.RoundVolume();
        roundVolume70.setVolume((double) 0);
        double double73 = roundVolume70.getVolume();
        java.lang.String str74 = roundVolume70.toString();
        int int75 = roundVolume70.getDiameter();
        roundVolume70.setLength((double) '#');
        roundVolume70.setVolume(10.0d);
        roundVolume70.setVolume(100.0d);
        boolean boolean82 = roundVolumeList58.add(roundVolume70);
        boolean boolean83 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        java.lang.Object[] objArray84 = roundVolumeList23.toArray();
        java.lang.Class<?> wildcardClass85 = roundVolumeList23.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(objArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str74, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=35.0, diameter=0, volume=100.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=35.0, diameter=0, volume=100.0)]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        java.lang.String[] strArray4 = new java.lang.String[] { "RoundVolume(length=52.0, diameter=0, volume=0.0)", "RoundVolume(length=0.0, diameter=32, volume=52.0)", "RoundVolume(length=100.0, diameter=1, volume=1.0)", "RoundVolume(length=10.0, diameter=0, volume=0.0)" };
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.launch(strArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor70");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolumeList3.remove(obj4);
        java.lang.Object[] objArray6 = roundVolumeList3.toArray();
        logic.RoundVolume roundVolume10 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume10.setVolume((double) 10);
        java.lang.String str13 = roundVolume10.toString();
        logic.RoundVolume roundVolume14 = new logic.RoundVolume();
        roundVolume14.setVolume((double) 0);
        double double17 = roundVolume14.getVolume();
        java.lang.String str18 = roundVolume14.toString();
        double double19 = roundVolume14.getLength();
        roundVolume14.setLength((double) 'a');
        java.lang.String str22 = roundVolume14.toString();
        logic.RoundVolume roundVolume26 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume27 = new logic.RoundVolume();
        roundVolume27.setVolume((double) 0);
        double double30 = roundVolume27.getVolume();
        java.lang.String str31 = roundVolume27.toString();
        double double32 = roundVolume27.getLength();
        logic.RoundVolume roundVolume36 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume36.setVolume((double) 10);
        logic.RoundVolume roundVolume42 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str43 = roundVolume42.toString();
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        logic.RoundVolume roundVolume47 = new logic.RoundVolume();
        roundVolume47.setVolume((double) 0);
        double double50 = roundVolume47.getVolume();
        roundVolume47.setLength((double) 10L);
        logic.RoundVolume roundVolume53 = new logic.RoundVolume();
        roundVolume53.setVolume((double) 0);
        double double56 = roundVolume53.getVolume();
        java.lang.String str57 = roundVolume53.toString();
        boolean boolean58 = roundVolume47.equals((java.lang.Object) str57);
        logic.RoundVolume roundVolume62 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume62.setVolume((double) 10);
        java.lang.String str65 = roundVolume62.toString();
        logic.RoundVolume[] roundVolumeArray66 = new logic.RoundVolume[] { roundVolume10, roundVolume14, roundVolume26, roundVolume27, roundVolume36, roundVolume42, roundVolume44, roundVolume47, roundVolume62 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList67 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList67, roundVolumeArray66);
        logic.YourWood yourWood69 = new logic.YourWood();
// flaky:         yourWood69.addWood((double) 1L, (int) (byte) 100);
        yourWood69.lengthFirstSortWood();
        yourWood69.diameterFirstSortWood();
        yourWood69.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList76 = yourWood69.getWood();
        logic.YourWood yourWood77 = new logic.YourWood();
// flaky:         yourWood77.addWood((double) 1L, (int) (byte) 100);
        yourWood77.lengthFirstSortWood();
        boolean boolean82 = roundVolumeList76.contains((java.lang.Object) yourWood77);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor83 = roundVolumeList76.iterator();
        boolean boolean84 = roundVolumeList67.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList76);
        int int86 = roundVolumeList67.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator87 = roundVolumeList67.spliterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream88 = roundVolumeList67.stream();
        boolean boolean89 = roundVolumeList3.contains((java.lang.Object) roundVolumeList67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor90 = roundVolumeList67.iterator();
        java.lang.Object[] objArray91 = roundVolumeList67.toArray();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume93 = roundVolumeList67.remove((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str13, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str18, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str22, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str31, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str43, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str57, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str65, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(roundVolumeList76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeSpliterator87);
        org.junit.Assert.assertNotNull(roundVolumeStream88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor90);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setLength((double) 'a');
        boolean boolean40 = roundVolumeList7.add(roundVolume32);
        double double41 = roundVolume32.getLength();
        roundVolume32.setLength((double) '4');
        double double44 = roundVolume32.getVolume();
        double double45 = roundVolume32.getLength();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        double double51 = roundVolume46.getLength();
        roundVolume46.setLength((double) 'a');
        double double54 = roundVolume46.getLength();
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        yourWood55.diameterFirstSortWood();
        yourWood55.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList62 = yourWood55.getWood();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        boolean boolean68 = roundVolumeList62.contains((java.lang.Object) yourWood63);
        yourWood63.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList70 = yourWood63.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor71 = roundVolumeList70.listIterator();
        boolean boolean72 = roundVolume46.equals((java.lang.Object) roundVolumeList70);
        boolean boolean73 = roundVolume32.equals((java.lang.Object) roundVolume46);
        roundVolume32.setDiameter(1);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 97.0d + "'", double41 == 97.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 97.0d + "'", double54 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(roundVolumeList70);
        org.junit.Assert.assertNotNull(roundVolumeItor71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList57.listIterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        roundVolume67.setLength((double) (-1L));
        boolean boolean73 = roundVolumeList57.add(roundVolume67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor74 = roundVolumeList57.iterator();
        boolean boolean75 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream76 = roundVolumeList57.stream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor77 = roundVolumeList57.iterator();
        roundVolumeList57.clear();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream76);
        org.junit.Assert.assertNotNull(roundVolumeItor77);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream92 = roundVolumeList69.parallelStream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor93 = roundVolumeList69.iterator();
        Main main94 = new Main();
        main94.init();
        javafx.application.Application.Parameters parameters96 = main94.getParameters();
        int int97 = roundVolumeList69.indexOf((java.lang.Object) main94);
        javafx.application.Application.Parameters parameters98 = main94.getParameters();
        main94.init();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(roundVolumeStream92);
        org.junit.Assert.assertNotNull(roundVolumeItor93);
        org.junit.Assert.assertNull(parameters96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNull(parameters98);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        boolean boolean30 = roundVolumeList24.contains((java.lang.Object) yourWood25);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor31 = roundVolumeList24.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream32 = roundVolumeList24.stream();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream33 = roundVolumeList24.stream();
        int int34 = roundVolumeList7.indexOf((java.lang.Object) roundVolumeList24);
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        boolean boolean66 = roundVolumeList42.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor67 = roundVolumeList58.listIterator();
        java.lang.Object[] objArray68 = roundVolumeList58.toArray();
        roundVolumeList58.clear();
        logic.RoundVolume roundVolume70 = new logic.RoundVolume();
        boolean boolean71 = roundVolumeList58.equals((java.lang.Object) roundVolume70);
        boolean boolean72 = roundVolumeList24.contains((java.lang.Object) roundVolumeList58);
        java.util.Collection<logic.RoundVolume> roundVolumeCollection73 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = roundVolumeList24.removeAll(roundVolumeCollection73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor31);
        org.junit.Assert.assertNotNull(roundVolumeStream32);
        org.junit.Assert.assertNotNull(roundVolumeStream33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor67);
        org.junit.Assert.assertNotNull(objArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolumeList3.remove(obj4);
        roundVolumeList3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList9 = roundVolumeList3.subList((int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        Main main0 = new Main();
        javafx.application.Application.Parameters parameters1 = main0.getParameters();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        main0.init();
        javafx.application.Application.Parameters parameters4 = main0.getParameters();
        org.junit.Assert.assertNull(parameters1);
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNull(parameters4);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor36 = null; // flaky: roundVolumeList23.listIterator(1);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume((double) (short) 10, 0, (double) (-1));
        int int41 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator42 = roundVolumeList23.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeSpliterator42);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        yourWood17.diameterFirstSortWood();
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        logic.YourWood yourWood25 = new logic.YourWood();
// flaky:         yourWood25.addWood((double) 1L, (int) (byte) 100);
        yourWood25.lengthFirstSortWood();
        boolean boolean30 = roundVolumeList24.contains((java.lang.Object) yourWood25);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor31 = roundVolumeList24.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream32 = roundVolumeList24.stream();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream33 = roundVolumeList24.stream();
        int int34 = roundVolumeList7.indexOf((java.lang.Object) roundVolumeList24);
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        boolean boolean66 = roundVolumeList42.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor67 = roundVolumeList58.listIterator();
        java.lang.Object[] objArray68 = roundVolumeList58.toArray();
        roundVolumeList58.clear();
        logic.RoundVolume roundVolume70 = new logic.RoundVolume();
        boolean boolean71 = roundVolumeList58.equals((java.lang.Object) roundVolume70);
        boolean boolean72 = roundVolumeList24.contains((java.lang.Object) roundVolumeList58);
        logic.YourWood yourWood74 = new logic.YourWood();
        yourWood74.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList76 = yourWood74.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList77 = yourWood74.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream78 = roundVolumeList77.stream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = roundVolumeList58.addAll((int) (short) 10, (java.util.Collection<logic.RoundVolume>) roundVolumeList77);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor31);
        org.junit.Assert.assertNotNull(roundVolumeStream32);
        org.junit.Assert.assertNotNull(roundVolumeStream33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor67);
        org.junit.Assert.assertNotNull(objArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(roundVolumeList76);
        org.junit.Assert.assertNotNull(roundVolumeList77);
        org.junit.Assert.assertNotNull(roundVolumeStream78);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume35 = roundVolumeList23.get(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        Main main0 = new Main();
        main0.init();
        main0.init();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        main0.stop();
        javafx.application.HostServices hostServices5 = main0.getHostServices();
        org.junit.Assert.assertNull(parameters3);
        org.junit.Assert.assertNotNull(hostServices5);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        Main main0 = new Main();
        javafx.application.HostServices hostServices1 = main0.getHostServices();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        javafx.application.Application.Parameters parameters4 = main0.getParameters();
        main0.stop();
        org.junit.Assert.assertNotNull(hostServices1);
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNull(parameters3);
        org.junit.Assert.assertNull(parameters4);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        double double8 = roundVolume0.getLength();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList16 = yourWood9.getWood();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        boolean boolean22 = roundVolumeList16.contains((java.lang.Object) yourWood17);
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor25 = roundVolumeList24.listIterator();
        boolean boolean26 = roundVolume0.equals((java.lang.Object) roundVolumeList24);
        logic.YourWood yourWood27 = new logic.YourWood();
// flaky:         yourWood27.addWood((double) 1L, (int) (byte) 100);
        yourWood27.lengthFirstSortWood();
        yourWood27.diameterFirstSortWood();
        yourWood27.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList34 = yourWood27.getWood();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        boolean boolean40 = roundVolumeList34.contains((java.lang.Object) yourWood35);
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.RoundVolume roundVolume44 = new logic.RoundVolume();
        roundVolume44.setVolume((double) 0);
        double double47 = roundVolume44.getVolume();
        roundVolume44.setLength((double) 10L);
        logic.RoundVolume roundVolume50 = new logic.RoundVolume();
        roundVolume50.setVolume((double) 0);
        double double53 = roundVolume50.getVolume();
        java.lang.String str54 = roundVolume50.toString();
        boolean boolean55 = roundVolume44.equals((java.lang.Object) str54);
        roundVolume44.setLength((double) 10L);
        boolean boolean59 = roundVolume44.equals((java.lang.Object) "CASPIAN");
        roundVolumeList42.add(0, roundVolume44);
        boolean boolean61 = roundVolumeList42.isEmpty();
        boolean boolean62 = roundVolumeList24.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor63 = roundVolumeList24.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList24.listIterator((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 97.0d + "'", double8 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertNotNull(roundVolumeItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(roundVolumeList34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str54, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor63);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.lang.Object[] objArray92 = roundVolumeList69.toArray();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator93 = roundVolumeList69.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
        org.junit.Assert.assertNotNull(roundVolumeSpliterator93);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        boolean boolean17 = roundVolumeList7.contains((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        boolean boolean32 = roundVolumeList25.isEmpty();
        int int33 = roundVolumeList25.size();
        boolean boolean34 = roundVolumeList7.remove((java.lang.Object) int33);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream35 = roundVolumeList7.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream35);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        Main main0 = new Main();
        main0.init();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.HostServices hostServices3 = main0.getHostServices();
        javafx.application.Application.Parameters parameters4 = main0.getParameters();
        main0.stop();
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNotNull(hostServices3);
        org.junit.Assert.assertNull(parameters4);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        roundVolume0.setDiameter(100);
        java.lang.String str5 = roundVolume0.toString();
        boolean boolean7 = roundVolume0.equals((java.lang.Object) (-1L));
        roundVolume0.setLength((double) 'a');
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RoundVolume(length=0.0, diameter=100, volume=0.0)" + "'", str5, "RoundVolume(length=0.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        logic.RoundVolume roundVolume41 = roundVolumeList23.get((int) (short) 0);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor42 = roundVolumeList23.listIterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(roundVolume41);
        org.junit.Assert.assertNotNull(roundVolumeItor42);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        boolean boolean66 = roundVolumeList42.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        int int68 = roundVolumeList58.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray69 = roundVolumeList58.toArray();
        logic.RoundVolume roundVolume70 = new logic.RoundVolume();
        roundVolume70.setVolume((double) 0);
        double double73 = roundVolume70.getVolume();
        java.lang.String str74 = roundVolume70.toString();
        int int75 = roundVolume70.getDiameter();
        roundVolume70.setLength((double) '#');
        roundVolume70.setVolume(10.0d);
        roundVolume70.setVolume(100.0d);
        boolean boolean82 = roundVolumeList58.add(roundVolume70);
        boolean boolean83 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator84 = roundVolumeList23.spliterator();
        int int85 = roundVolumeList23.size();
        roundVolumeList23.clear();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(objArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str74, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator84);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        int int29 = roundVolumeList22.size();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double34 = roundVolume33.getLength();
        int int35 = roundVolume33.getDiameter();
        double double36 = roundVolume33.getLength();
        int int37 = roundVolume33.getDiameter();
        boolean boolean38 = roundVolumeList22.contains((java.lang.Object) int37);
        int int39 = roundVolumeList7.indexOf((java.lang.Object) boolean38);
        logic.RoundVolume roundVolume43 = new logic.RoundVolume((double) 52, 2, 0.0d);
        boolean boolean44 = roundVolumeList7.equals((java.lang.Object) 52);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream45 = roundVolumeList7.parallelStream();
        roundVolumeList7.clear();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream45);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.lengthFirstSortWood();
// flaky:         yourWood8.addWood((double) 1.0f, 100);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        boolean boolean80 = roundVolumeList69.contains((java.lang.Object) "");
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream81 = roundVolumeList69.stream();
        int int82 = roundVolumeList69.size();
        roundVolumeList69.clear();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeStream81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=52.0, diameter=0, volume=0.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        roundVolume3.setLength((double) 10.0f);
        int int9 = roundVolume3.getDiameter();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        roundVolumeList23.clear();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume36 = roundVolumeList23.get((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean80 = roundVolumeList60.isEmpty();
        logic.YourWood yourWood81 = new logic.YourWood();
// flaky:         yourWood81.addWood((double) 1L, (int) (byte) 100);
        yourWood81.lengthFirstSortWood();
        yourWood81.diameterFirstSortWood();
        yourWood81.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList88 = yourWood81.getWood();
        logic.YourWood yourWood89 = new logic.YourWood();
// flaky:         yourWood89.addWood((double) 1L, (int) (byte) 100);
        yourWood89.lengthFirstSortWood();
        boolean boolean94 = roundVolumeList88.contains((java.lang.Object) yourWood89);
        yourWood89.diameterFirstSortWood();
        yourWood89.lengthFirstSortWood();
        boolean boolean97 = roundVolumeList60.equals((java.lang.Object) yourWood89);
        yourWood89.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList99 = yourWood89.getWood();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(roundVolumeList88);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(roundVolumeList99);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getLength();
        roundVolume0.setVolume(100.0d);
        java.lang.String str6 = roundVolume0.toString();
        roundVolume0.setDiameter((int) (short) 0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str6, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setDiameter((int) 'a');
        roundVolume0.setLength((double) (byte) 1);
        double double12 = roundVolume0.getVolume();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setLength((double) 'a');
        boolean boolean40 = roundVolumeList7.add(roundVolume32);
        double double41 = roundVolume32.getLength();
        roundVolume32.setLength((double) '4');
        double double44 = roundVolume32.getVolume();
        roundVolume32.setLength((double) (byte) 0);
        java.lang.Class<?> wildcardClass47 = roundVolume32.getClass();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 97.0d + "'", double41 == 97.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList8 = yourWood0.getWood();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor9 = roundVolumeList8.iterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator10 = roundVolumeList8.spliterator();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor11 = roundVolumeList8.listIterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertNotNull(roundVolumeList8);
        org.junit.Assert.assertNotNull(roundVolumeItor9);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator10);
        org.junit.Assert.assertNotNull(roundVolumeItor11);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        yourWood23.diameterFirstSortWood();
        boolean boolean30 = roundVolumeList7.remove((java.lang.Object) yourWood23);
        yourWood23.diameterFirstSortWood();
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList33 = yourWood23.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream34 = roundVolumeList33.parallelStream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(roundVolumeList33);
        org.junit.Assert.assertNotNull(roundVolumeStream34);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int78 = roundVolumeList69.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList69.listIterator();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
        org.junit.Assert.assertNotNull(roundVolumeItor80);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double4 = roundVolume3.getLength();
        int int5 = roundVolume3.getDiameter();
        double double6 = roundVolume3.getLength();
        int int7 = roundVolume3.getDiameter();
        roundVolume3.setDiameter((int) '4');
        double double10 = roundVolume3.getLength();
        double double11 = roundVolume3.getLength();
        java.lang.Class<?> wildcardClass12 = roundVolume3.getClass();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        boolean boolean66 = roundVolumeList42.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        int int68 = roundVolumeList58.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray69 = roundVolumeList58.toArray();
        logic.RoundVolume roundVolume70 = new logic.RoundVolume();
        roundVolume70.setVolume((double) 0);
        double double73 = roundVolume70.getVolume();
        java.lang.String str74 = roundVolume70.toString();
        int int75 = roundVolume70.getDiameter();
        roundVolume70.setLength((double) '#');
        roundVolume70.setVolume(10.0d);
        roundVolume70.setVolume(100.0d);
        boolean boolean82 = roundVolumeList58.add(roundVolume70);
        boolean boolean83 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        logic.YourWood yourWood84 = new logic.YourWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood84.getWood();
        int int86 = roundVolumeList23.indexOf((java.lang.Object) roundVolumeList85);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(objArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str74, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        roundVolume3.setLength((double) 10.0f);
        roundVolume3.setLength((double) 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream33 = roundVolumeList23.parallelStream();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        boolean boolean48 = roundVolumeList23.remove((java.lang.Object) boolean47);
        logic.YourWood yourWood49 = new logic.YourWood();
// flaky:         yourWood49.addWood((double) 1L, (int) (byte) 100);
        yourWood49.lengthFirstSortWood();
        yourWood49.diameterFirstSortWood();
        yourWood49.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList56 = yourWood49.getWood();
        logic.YourWood yourWood57 = new logic.YourWood();
// flaky:         yourWood57.addWood((double) 1L, (int) (byte) 100);
        yourWood57.lengthFirstSortWood();
        boolean boolean62 = roundVolumeList56.contains((java.lang.Object) yourWood57);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor63 = roundVolumeList56.iterator();
        logic.YourWood yourWood65 = new logic.YourWood();
// flaky:         yourWood65.addWood((double) 1L, (int) (byte) 100);
        yourWood65.lengthFirstSortWood();
        yourWood65.diameterFirstSortWood();
        yourWood65.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList72 = yourWood65.getWood();
        logic.YourWood yourWood73 = new logic.YourWood();
// flaky:         yourWood73.addWood((double) 1L, (int) (byte) 100);
        yourWood73.lengthFirstSortWood();
        boolean boolean78 = roundVolumeList72.contains((java.lang.Object) yourWood73);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor79 = roundVolumeList72.iterator();
        boolean boolean80 = roundVolumeList56.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList72);
        java.lang.Object obj81 = null;
        boolean boolean82 = roundVolumeList56.remove(obj81);
        int int83 = roundVolumeList56.size();
        boolean boolean84 = roundVolumeList23.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList56);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream33);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeList56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor63);
        org.junit.Assert.assertNotNull(roundVolumeList72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList39.isEmpty();
        java.lang.Object[] objArray49 = roundVolumeList39.toArray();
        boolean boolean50 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        logic.VolumeDB volumeDB51 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap52 = volumeDB51.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap53 = volumeDB51.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap54 = volumeDB51.getVolumes();
        logic.VolumeDB volumeDB55 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap56 = volumeDB55.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap57 = volumeDB55.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap58 = volumeDB55.getVolumes();
        logic.VolumeDB volumeDB59 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap60 = volumeDB59.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap61 = volumeDB59.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap62 = volumeDB59.getVolumes();
        logic.VolumeDB volumeDB63 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap64 = volumeDB63.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap65 = volumeDB63.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap66 = volumeDB63.getVolumes();
        logic.VolumeDB volumeDB67 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap68 = volumeDB67.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap69 = volumeDB67.getVolumes();
        java.util.HashMap[] hashMapArray71 = new java.util.HashMap[5];
        @SuppressWarnings("unchecked")
        java.util.HashMap<java.lang.String, logic.RoundVolume>[] strMapArray72 = (java.util.HashMap<java.lang.String, logic.RoundVolume>[]) hashMapArray71;
        strMapArray72[0] = strMap54;
        strMapArray72[1] = strMap58;
        strMapArray72[2] = strMap62;
        strMapArray72[3] = strMap66;
        strMapArray72[4] = strMap69;
        java.util.HashMap<java.lang.String, logic.RoundVolume>[] strMapArray83 = roundVolumeList7.toArray(strMapArray72);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream84 = roundVolumeList7.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(hashMapArray71);
        org.junit.Assert.assertNotNull(strMapArray72);
        org.junit.Assert.assertNotNull(strMapArray83);
        org.junit.Assert.assertNotNull(roundVolumeStream84);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        logic.YourWood yourWood14 = new logic.YourWood();
// flaky:         yourWood14.addWood((double) 1L, (int) (byte) 100);
        yourWood14.lengthFirstSortWood();
        yourWood14.diameterFirstSortWood();
        yourWood14.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood14.getWood();
        logic.YourWood yourWood22 = new logic.YourWood();
// flaky:         yourWood22.addWood((double) 1L, (int) (byte) 100);
        yourWood22.lengthFirstSortWood();
        boolean boolean27 = roundVolumeList21.contains((java.lang.Object) yourWood22);
        boolean boolean28 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList21);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator29 = roundVolumeList21.spliterator();
        logic.RoundVolume roundVolume30 = new logic.RoundVolume();
        roundVolume30.setVolume((double) 0);
        double double33 = roundVolume30.getVolume();
        java.lang.String str34 = roundVolume30.toString();
        double double35 = roundVolume30.getLength();
        roundVolume30.setLength((double) 'a');
        double double38 = roundVolume30.getLength();
        logic.YourWood yourWood39 = new logic.YourWood();
// flaky:         yourWood39.addWood((double) 1L, (int) (byte) 100);
        yourWood39.lengthFirstSortWood();
        yourWood39.diameterFirstSortWood();
        yourWood39.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList46 = yourWood39.getWood();
        logic.YourWood yourWood47 = new logic.YourWood();
// flaky:         yourWood47.addWood((double) 1L, (int) (byte) 100);
        yourWood47.lengthFirstSortWood();
        boolean boolean52 = roundVolumeList46.contains((java.lang.Object) yourWood47);
        yourWood47.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList54 = yourWood47.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor55 = roundVolumeList54.listIterator();
        boolean boolean56 = roundVolume30.equals((java.lang.Object) roundVolumeList54);
        roundVolume30.setLength(10.0d);
        boolean boolean59 = roundVolumeList21.add(roundVolume30);
        int int60 = roundVolume30.getDiameter();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator29);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str34, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 97.0d + "'", double38 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeList54);
        org.junit.Assert.assertNotNull(roundVolumeItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 100L, 3, (double) (byte) 10);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setLength((double) 'a');
        boolean boolean40 = roundVolumeList7.add(roundVolume32);
        double double41 = roundVolume32.getLength();
        int int42 = roundVolume32.getDiameter();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 97.0d + "'", double41 == 97.0d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        int int79 = roundVolumeList60.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor80 = roundVolumeList60.listIterator();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeItor80);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator17 = roundVolumeList15.spliterator();
        Main main18 = new Main();
        main18.init();
        javafx.application.Application.Parameters parameters20 = main18.getParameters();
        javafx.application.HostServices hostServices21 = main18.getHostServices();
        javafx.application.HostServices hostServices22 = main18.getHostServices();
        int int23 = roundVolumeList15.lastIndexOf((java.lang.Object) main18);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume25 = roundVolumeList15.remove(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator17);
        org.junit.Assert.assertNull(parameters20);
        org.junit.Assert.assertNotNull(hostServices21);
        org.junit.Assert.assertNotNull(hostServices22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        java.lang.Object obj79 = null;
        boolean boolean80 = roundVolumeList69.remove(obj79);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        java.lang.Object[] objArray40 = roundVolumeList23.toArray();
        boolean boolean41 = roundVolumeList23.isEmpty();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str47 = roundVolume46.toString();
        double double48 = roundVolume46.getLength();
        double double49 = roundVolume46.getVolume();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume50 = roundVolumeList23.set((int) ' ', roundVolume46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=-1.0, diameter=0, volume=0.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=-1.0, diameter=0, volume=0.0)]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str47, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setVolume((double) (-1L));
        roundVolume0.setLength(35.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        // The following exception was thrown during execution in test generation
        try {
            javafx.application.Application.setUserAgentStylesheet("RoundVolume(length=0.0, diameter=32, volume=52.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Toolkit not initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList39.isEmpty();
        java.lang.Object[] objArray49 = roundVolumeList39.toArray();
        boolean boolean50 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        logic.RoundVolume roundVolume52 = new logic.RoundVolume();
        roundVolume52.setVolume((double) 0);
        double double55 = roundVolume52.getVolume();
        java.lang.String str56 = roundVolume52.toString();
        double double57 = roundVolume52.getLength();
        roundVolume52.setLength((double) 'a');
        roundVolume52.setLength((double) (short) 0);
        int int62 = roundVolume52.getDiameter();
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.add(1, roundVolume52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str56, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList8 = yourWood0.getWood();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList11 = roundVolumeList8.subList(2, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertNotNull(roundVolumeList8);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.lang.Object obj4 = new java.lang.Object();
        boolean boolean5 = roundVolumeList3.remove(obj4);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator6 = roundVolumeList3.spliterator();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        int int15 = roundVolumeList3.lastIndexOf((java.lang.Object) roundVolume7);
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        boolean boolean31 = roundVolumeList23.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        logic.YourWood yourWood33 = new logic.YourWood();
// flaky:         yourWood33.addWood((double) 1L, (int) (byte) 100);
        yourWood33.lengthFirstSortWood();
        yourWood33.diameterFirstSortWood();
        yourWood33.diameterFirstSortWood();
        yourWood33.lengthFirstSortWood();
        yourWood33.diameterFirstSortWood();
        int int42 = roundVolumeList23.indexOf((java.lang.Object) yourWood33);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor43 = roundVolumeList23.listIterator();
        boolean boolean44 = roundVolume7.equals((java.lang.Object) roundVolumeList23);
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeItor43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (short) 10, (int) (short) -1, (double) (-1.0f));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator14 = roundVolumeList7.spliterator();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        int int21 = roundVolume16.getDiameter();
        roundVolume16.setLength((double) '#');
        roundVolume16.setDiameter((int) 'a');
        roundVolume16.setLength((double) (byte) 1);
        logic.YourWood yourWood28 = new logic.YourWood();
// flaky:         yourWood28.addWood((double) 1L, (int) (byte) 100);
        yourWood28.lengthFirstSortWood();
        yourWood28.diameterFirstSortWood();
        yourWood28.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList35 = yourWood28.getWood();
        logic.YourWood yourWood36 = new logic.YourWood();
// flaky:         yourWood36.addWood((double) 1L, (int) (byte) 100);
        yourWood36.lengthFirstSortWood();
        boolean boolean41 = roundVolumeList35.contains((java.lang.Object) yourWood36);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor42 = roundVolumeList35.iterator();
        boolean boolean43 = roundVolumeList35.isEmpty();
        logic.YourWood yourWood44 = new logic.YourWood();
// flaky:         yourWood44.addWood((double) 1L, (int) (byte) 100);
        yourWood44.lengthFirstSortWood();
        yourWood44.diameterFirstSortWood();
        yourWood44.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList51 = yourWood44.getWood();
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        boolean boolean57 = roundVolumeList51.contains((java.lang.Object) yourWood52);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor58 = roundVolumeList51.iterator();
        boolean boolean59 = roundVolumeList35.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList51);
        logic.RoundVolume roundVolume60 = new logic.RoundVolume();
        roundVolume60.setVolume((double) 0);
        double double63 = roundVolume60.getVolume();
        java.lang.String str64 = roundVolume60.toString();
        double double65 = roundVolume60.getLength();
        roundVolume60.setLength((double) 'a');
        boolean boolean68 = roundVolumeList35.add(roundVolume60);
        double double69 = roundVolume60.getLength();
        roundVolume60.setLength((double) '4');
        double double72 = roundVolume60.getVolume();
        boolean boolean73 = roundVolume16.equals((java.lang.Object) roundVolume60);
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.add((int) (byte) 100, roundVolume60);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(roundVolumeList35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor42);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(roundVolumeList51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor58);
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str64, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 97.0d + "'", double69 == 97.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        int int5 = roundVolume0.getDiameter();
        roundVolume0.setLength((double) '#');
        roundVolume0.setDiameter((int) 'a');
        double double10 = roundVolume0.getLength();
        java.lang.Class<?> wildcardClass11 = roundVolume0.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.RoundVolume roundVolume16 = null;
        boolean boolean17 = roundVolumeList15.add(roundVolume16);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList15.listIterator((int) (short) 1);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor19);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        roundVolume3.setDiameter(1);
        roundVolume3.setVolume((double) 100L);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        Main main0 = new Main();
        javafx.application.Application.Parameters parameters1 = main0.getParameters();
        javafx.application.HostServices hostServices2 = main0.getHostServices();
        javafx.application.HostServices hostServices3 = main0.getHostServices();
        org.junit.Assert.assertNull(parameters1);
        org.junit.Assert.assertNotNull(hostServices2);
        org.junit.Assert.assertNotNull(hostServices3);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream92 = roundVolumeList69.parallelStream();
        int int94 = roundVolumeList69.indexOf((java.lang.Object) "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        java.lang.Object[] objArray95 = roundVolumeList69.toArray();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(roundVolumeStream92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[]");
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getLength();
        roundVolume0.setVolume(100.0d);
        java.lang.String str6 = roundVolume0.toString();
        logic.YourWood yourWood7 = new logic.YourWood();
        yourWood7.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList9 = yourWood7.getWood();
        yourWood7.lengthFirstSortWood();
        yourWood7.lengthFirstSortWood();
        boolean boolean12 = roundVolume0.equals((java.lang.Object) yourWood7);
        java.util.ArrayList<logic.RoundVolume> roundVolumeList13 = yourWood7.getWood();
        boolean boolean14 = roundVolumeList13.isEmpty();
        logic.RoundVolume roundVolume15 = new logic.RoundVolume();
        roundVolume15.setVolume((double) 0);
        double double18 = roundVolume15.getLength();
        double double19 = roundVolume15.getVolume();
        boolean boolean20 = roundVolumeList13.add(roundVolume15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor22 = roundVolumeList13.listIterator((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=100.0)" + "'", str6, "RoundVolume(length=0.0, diameter=0, volume=100.0)");
        org.junit.Assert.assertNotNull(roundVolumeList9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(roundVolumeList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList9 = yourWood0.getWood();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor11 = roundVolumeList9.listIterator(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertNotNull(roundVolumeList9);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        yourWood23.diameterFirstSortWood();
        boolean boolean30 = roundVolumeList7.remove((java.lang.Object) yourWood23);
        logic.RoundVolume roundVolume34 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double35 = roundVolume34.getLength();
        int int36 = roundVolume34.getDiameter();
        roundVolume34.setLength(100.0d);
        boolean boolean39 = roundVolumeList7.add(roundVolume34);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor40 = roundVolumeList7.iterator();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator41 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.replaceAll(roundVolumeUnaryOperator41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor40);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setLength((double) 'a');
        boolean boolean40 = roundVolumeList7.add(roundVolume32);
        java.lang.Object[] objArray41 = roundVolumeList7.toArray();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=97.0, diameter=0, volume=0.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=97.0, diameter=0, volume=0.0)]");
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        Main main0 = new Main();
        main0.init();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNull(parameters3);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        Main main0 = new Main();
        main0.stop();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        javafx.application.Application.Parameters parameters4 = main0.getParameters();
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNull(parameters3);
        org.junit.Assert.assertNull(parameters4);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream4 = roundVolumeList3.stream();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        boolean boolean18 = roundVolumeList12.contains((java.lang.Object) yourWood13);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList12.iterator();
        logic.YourWood yourWood21 = new logic.YourWood();
// flaky:         yourWood21.addWood((double) 1L, (int) (byte) 100);
        yourWood21.lengthFirstSortWood();
        yourWood21.diameterFirstSortWood();
        yourWood21.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList28 = yourWood21.getWood();
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        boolean boolean34 = roundVolumeList28.contains((java.lang.Object) yourWood29);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList28.iterator();
        boolean boolean36 = roundVolumeList12.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList28);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor38 = null; // flaky: roundVolumeList28.listIterator((int) (short) 1);
        boolean boolean39 = roundVolumeList3.remove((java.lang.Object) roundVolumeList28);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        java.lang.String str46 = roundVolume44.toString();
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList3.add((int) (byte) -1, roundVolume44);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertNotNull(roundVolumeStream4);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor19);
        org.junit.Assert.assertNotNull(roundVolumeList28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str46, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList57.listIterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        roundVolume67.setLength((double) (-1L));
        boolean boolean73 = roundVolumeList57.add(roundVolume67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor74 = roundVolumeList57.iterator();
        boolean boolean75 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream76 = roundVolumeList57.stream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor77 = roundVolumeList57.iterator();
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        yourWood78.diameterFirstSortWood();
        yourWood78.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood78.getWood();
        logic.YourWood yourWood86 = new logic.YourWood();
// flaky:         yourWood86.addWood((double) 1L, (int) (byte) 100);
        yourWood86.lengthFirstSortWood();
        boolean boolean91 = roundVolumeList85.contains((java.lang.Object) yourWood86);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor92 = roundVolumeList85.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream93 = roundVolumeList85.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor95 = roundVolumeList85.listIterator((int) (short) 0);
        boolean boolean96 = roundVolumeList57.equals((java.lang.Object) roundVolumeList85);
        boolean boolean97 = roundVolumeList57.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream76);
        org.junit.Assert.assertNotNull(roundVolumeItor77);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor92);
        org.junit.Assert.assertNotNull(roundVolumeStream93);
        org.junit.Assert.assertNotNull(roundVolumeItor95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        Main main0 = new Main();
        javafx.application.HostServices hostServices1 = main0.getHostServices();
        main0.stop();
        javafx.application.Application.Parameters parameters3 = main0.getParameters();
        org.junit.Assert.assertNotNull(hostServices1);
        org.junit.Assert.assertNull(parameters3);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        yourWood24.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList31 = yourWood24.getWood();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList39.isEmpty();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        yourWood48.diameterFirstSortWood();
        yourWood48.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList55 = yourWood48.getWood();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        boolean boolean61 = roundVolumeList55.contains((java.lang.Object) yourWood56);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor62 = roundVolumeList55.iterator();
        boolean boolean63 = roundVolumeList39.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList55);
        int int64 = roundVolumeList31.indexOf((java.lang.Object) roundVolumeList55);
        boolean boolean65 = roundVolumeList15.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList55);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator66 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList55.replaceAll(roundVolumeUnaryOperator66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeList31);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeList55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor62);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList39.isEmpty();
        boolean boolean49 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        int int64 = roundVolumeList57.size();
        boolean boolean65 = roundVolumeList39.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator66 = roundVolumeList39.spliterator();
        java.util.AbstractCollection[] abstractCollectionArray68 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<logic.RoundVolume>[] roundVolumeCollectionArray69 = (java.util.AbstractCollection<logic.RoundVolume>[]) abstractCollectionArray68;
        // The following exception was thrown during execution in test generation
        try {
            java.util.AbstractCollection<logic.RoundVolume>[] roundVolumeCollectionArray70 = roundVolumeList39.toArray((java.util.AbstractCollection<logic.RoundVolume>[]) abstractCollectionArray68);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator66);
        org.junit.Assert.assertNotNull(abstractCollectionArray68);
        org.junit.Assert.assertNotNull(roundVolumeCollectionArray69);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream34 = roundVolumeList23.stream();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        int int49 = roundVolumeList42.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream50 = roundVolumeList42.stream();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList56 = yourWood51.getWood();
        int int57 = roundVolumeList42.lastIndexOf((java.lang.Object) roundVolumeList56);
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        yourWood58.diameterFirstSortWood();
        yourWood58.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList65 = yourWood58.getWood();
        logic.YourWood yourWood66 = new logic.YourWood();
// flaky:         yourWood66.addWood((double) 1L, (int) (byte) 100);
        yourWood66.lengthFirstSortWood();
        boolean boolean71 = roundVolumeList65.contains((java.lang.Object) yourWood66);
        yourWood66.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList73 = yourWood66.getWood();
        logic.RoundVolume roundVolume75 = new logic.RoundVolume();
        roundVolume75.setVolume((double) 0);
        double double78 = roundVolume75.getVolume();
        roundVolume75.setLength((double) 10L);
        logic.RoundVolume roundVolume81 = new logic.RoundVolume();
        roundVolume81.setVolume((double) 0);
        double double84 = roundVolume81.getVolume();
        java.lang.String str85 = roundVolume81.toString();
        boolean boolean86 = roundVolume75.equals((java.lang.Object) str85);
        roundVolume75.setLength((double) 10L);
        boolean boolean90 = roundVolume75.equals((java.lang.Object) "CASPIAN");
        roundVolumeList73.add(0, roundVolume75);
        logic.RoundVolume roundVolume95 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean96 = roundVolumeList73.remove((java.lang.Object) (byte) 1);
        boolean boolean97 = roundVolumeList56.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList73);
        boolean boolean98 = roundVolumeList23.contains((java.lang.Object) roundVolumeList73);
        java.lang.Object[] objArray99 = roundVolumeList23.toArray();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream34);
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream50);
        org.junit.Assert.assertNotNull(roundVolumeList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(roundVolumeList73);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str85, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(objArray99);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray99), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray99), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) (byte) 1, (int) '4', (double) (byte) -1);
        boolean boolean38 = roundVolumeList7.add(roundVolume37);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor39 = roundVolumeList7.iterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor39);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        roundVolume0.setDiameter((int) (byte) 10);
        roundVolume0.setDiameter(100);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (byte) 1, (int) '4', (double) (byte) -1);
        java.lang.Object obj4 = null;
        boolean boolean5 = roundVolume3.equals(obj4);
        java.lang.String str6 = roundVolume3.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=1.0, diameter=52, volume=-1.0)" + "'", str6, "RoundVolume(length=1.0, diameter=52, volume=-1.0)");
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) ' ', (int) '#', 52.0d);
        java.lang.String str4 = roundVolume3.toString();
        roundVolume3.setDiameter((int) (short) 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=32.0, diameter=35, volume=52.0)" + "'", str4, "RoundVolume(length=32.0, diameter=35, volume=52.0)");
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        java.lang.Object obj79 = null;
        int int80 = roundVolumeList69.indexOf(obj79);
        roundVolumeList69.clear();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList23.isEmpty();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        int int48 = roundVolumeList15.indexOf((java.lang.Object) roundVolumeList39);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) (-1L));
        boolean boolean55 = roundVolumeList15.add(roundVolume49);
        java.util.Collection<logic.RoundVolume> roundVolumeCollection57 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = roundVolumeList15.addAll((int) 'a', roundVolumeCollection57);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList23.listIterator();
        logic.RoundVolume roundVolume33 = new logic.RoundVolume();
        roundVolume33.setVolume((double) 0);
        double double36 = roundVolume33.getVolume();
        roundVolume33.setLength((double) (-1L));
        boolean boolean39 = roundVolumeList23.add(roundVolume33);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor40 = roundVolumeList23.iterator();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor41 = roundVolumeList23.iterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor40);
        org.junit.Assert.assertNotNull(roundVolumeItor41);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        boolean boolean66 = roundVolumeList42.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        int int68 = roundVolumeList58.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray69 = roundVolumeList58.toArray();
        logic.RoundVolume roundVolume70 = new logic.RoundVolume();
        roundVolume70.setVolume((double) 0);
        double double73 = roundVolume70.getVolume();
        java.lang.String str74 = roundVolume70.toString();
        int int75 = roundVolume70.getDiameter();
        roundVolume70.setLength((double) '#');
        roundVolume70.setVolume(10.0d);
        roundVolume70.setVolume(100.0d);
        boolean boolean82 = roundVolumeList58.add(roundVolume70);
        boolean boolean83 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator84 = roundVolumeList23.spliterator();
        logic.RoundVolume roundVolume89 = new logic.RoundVolume((double) 0.0f, 0, (double) (-1));
        double double90 = roundVolume89.getLength();
        int int91 = roundVolume89.getDiameter();
        double double92 = roundVolume89.getLength();
        java.lang.String str93 = roundVolume89.toString();
        roundVolume89.setDiameter((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume96 = roundVolumeList23.set((int) 'a', roundVolume89);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(objArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str74, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator84);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=-1.0)" + "'", str93, "RoundVolume(length=0.0, diameter=0, volume=-1.0)");
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList3 = yourWood0.getWood();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream4 = roundVolumeList3.stream();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        boolean boolean18 = roundVolumeList12.contains((java.lang.Object) yourWood13);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor19 = roundVolumeList12.iterator();
        logic.YourWood yourWood21 = new logic.YourWood();
// flaky:         yourWood21.addWood((double) 1L, (int) (byte) 100);
        yourWood21.lengthFirstSortWood();
        yourWood21.diameterFirstSortWood();
        yourWood21.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList28 = yourWood21.getWood();
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        boolean boolean34 = roundVolumeList28.contains((java.lang.Object) yourWood29);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList28.iterator();
        boolean boolean36 = roundVolumeList12.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList28);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor38 = null; // flaky: roundVolumeList28.listIterator((int) (short) 1);
        boolean boolean39 = roundVolumeList3.remove((java.lang.Object) roundVolumeList28);
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        yourWood40.diameterFirstSortWood();
        yourWood40.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList47 = yourWood40.getWood();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        boolean boolean53 = roundVolumeList47.contains((java.lang.Object) yourWood48);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor54 = roundVolumeList47.iterator();
        boolean boolean55 = roundVolumeList47.isEmpty();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        yourWood56.diameterFirstSortWood();
        yourWood56.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList63 = yourWood56.getWood();
        logic.YourWood yourWood64 = new logic.YourWood();
// flaky:         yourWood64.addWood((double) 1L, (int) (byte) 100);
        yourWood64.lengthFirstSortWood();
        boolean boolean69 = roundVolumeList63.contains((java.lang.Object) yourWood64);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor70 = roundVolumeList63.iterator();
        logic.YourWood yourWood72 = new logic.YourWood();
// flaky:         yourWood72.addWood((double) 1L, (int) (byte) 100);
        yourWood72.lengthFirstSortWood();
        yourWood72.diameterFirstSortWood();
        yourWood72.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList79 = yourWood72.getWood();
        logic.YourWood yourWood80 = new logic.YourWood();
// flaky:         yourWood80.addWood((double) 1L, (int) (byte) 100);
        yourWood80.lengthFirstSortWood();
        boolean boolean85 = roundVolumeList79.contains((java.lang.Object) yourWood80);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor86 = roundVolumeList79.iterator();
        boolean boolean87 = roundVolumeList63.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList79);
        boolean boolean88 = roundVolumeList79.isEmpty();
        java.lang.Object[] objArray89 = roundVolumeList79.toArray();
        boolean boolean90 = roundVolumeList47.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList79);
        boolean boolean91 = roundVolumeList3.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList47);
        int int92 = roundVolumeList47.size();
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList3);
        org.junit.Assert.assertNotNull(roundVolumeStream4);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor19);
        org.junit.Assert.assertNotNull(roundVolumeList28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(roundVolumeList47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(roundVolumeList63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor70);
        org.junit.Assert.assertNotNull(roundVolumeList79);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor86);
// flaky:         org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean78 = roundVolumeList69.isEmpty();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        boolean boolean80 = roundVolumeList69.isEmpty();
        logic.YourWood yourWood81 = new logic.YourWood();
// flaky:         yourWood81.addWood((double) 1L, (int) (byte) 100);
        yourWood81.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList86 = yourWood81.getWood();
        yourWood81.lengthFirstSortWood();
        boolean boolean88 = roundVolumeList69.contains((java.lang.Object) yourWood81);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 52, 2, 0.0d);
        double double4 = roundVolume3.getVolume();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setLength((double) 'a');
        boolean boolean40 = roundVolumeList7.add(roundVolume32);
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        yourWood41.diameterFirstSortWood();
        yourWood41.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList48 = yourWood41.getWood();
        java.util.List<logic.RoundVolume> roundVolumeList51 = null; // flaky: roundVolumeList48.subList(1, (int) (short) 1);
        boolean boolean52 = false; // flaky: roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList51);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor54 = null; // flaky: roundVolumeList51.listIterator(10);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(roundVolumeList48);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList21 = yourWood16.getWood();
        int int22 = roundVolumeList7.lastIndexOf((java.lang.Object) roundVolumeList21);
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        yourWood23.diameterFirstSortWood();
        yourWood23.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList30 = yourWood23.getWood();
        logic.YourWood yourWood31 = new logic.YourWood();
// flaky:         yourWood31.addWood((double) 1L, (int) (byte) 100);
        yourWood31.lengthFirstSortWood();
        boolean boolean36 = roundVolumeList30.contains((java.lang.Object) yourWood31);
        yourWood31.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList38 = yourWood31.getWood();
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        roundVolume40.setLength((double) 10L);
        boolean boolean55 = roundVolume40.equals((java.lang.Object) "CASPIAN");
        roundVolumeList38.add(0, roundVolume40);
        logic.RoundVolume roundVolume60 = new logic.RoundVolume((double) '4', (int) (short) -1, (double) (byte) 1);
        boolean boolean61 = roundVolumeList38.remove((java.lang.Object) (byte) 1);
        boolean boolean62 = roundVolumeList21.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList38);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor63 = roundVolumeList38.iterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume(52.0d, 0, (double) 1L);
        roundVolume67.setLength((double) 100);
        boolean boolean70 = roundVolumeList38.add(roundVolume67);
        roundVolume67.setLength((double) 5);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeList30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(roundVolumeList38);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        boolean boolean34 = roundVolumeList23.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume36 = roundVolumeList23.get(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        java.lang.Object[] objArray79 = roundVolumeList69.toArray();
        boolean boolean80 = roundVolumeList69.isEmpty();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertNotNull(objArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood15 = new logic.YourWood();
// flaky:         yourWood15.addWood((double) 1L, (int) (byte) 100);
        yourWood15.lengthFirstSortWood();
        yourWood15.diameterFirstSortWood();
        yourWood15.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList22 = yourWood15.getWood();
        logic.YourWood yourWood23 = new logic.YourWood();
// flaky:         yourWood23.addWood((double) 1L, (int) (byte) 100);
        yourWood23.lengthFirstSortWood();
        boolean boolean28 = roundVolumeList22.contains((java.lang.Object) yourWood23);
        yourWood23.diameterFirstSortWood();
        boolean boolean30 = roundVolumeList7.remove((java.lang.Object) yourWood23);
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList7.replaceAll(roundVolumeUnaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume15 = roundVolumeList7.remove((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        roundVolume0.setLength((double) 10L);
        logic.RoundVolume roundVolume6 = new logic.RoundVolume();
        roundVolume6.setVolume((double) 0);
        double double9 = roundVolume6.getVolume();
        java.lang.String str10 = roundVolume6.toString();
        boolean boolean11 = roundVolume0.equals((java.lang.Object) str10);
        roundVolume0.setLength((double) 10L);
        boolean boolean15 = roundVolume0.equals((java.lang.Object) "CASPIAN");
        roundVolume0.setLength(100.0d);
        roundVolume0.setLength((double) (-1L));
        roundVolume0.setDiameter((int) (short) 0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str10, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        logic.RoundVolume roundVolume6 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume6.setVolume((double) 10);
        java.lang.String str9 = roundVolume6.toString();
        logic.RoundVolume roundVolume10 = new logic.RoundVolume();
        roundVolume10.setVolume((double) 0);
        double double13 = roundVolume10.getVolume();
        java.lang.String str14 = roundVolume10.toString();
        double double15 = roundVolume10.getLength();
        roundVolume10.setLength((double) 'a');
        java.lang.String str18 = roundVolume10.toString();
        logic.RoundVolume roundVolume22 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume23 = new logic.RoundVolume();
        roundVolume23.setVolume((double) 0);
        double double26 = roundVolume23.getVolume();
        java.lang.String str27 = roundVolume23.toString();
        double double28 = roundVolume23.getLength();
        logic.RoundVolume roundVolume32 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume32.setVolume((double) 10);
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str39 = roundVolume38.toString();
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        logic.RoundVolume roundVolume43 = new logic.RoundVolume();
        roundVolume43.setVolume((double) 0);
        double double46 = roundVolume43.getVolume();
        roundVolume43.setLength((double) 10L);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        java.lang.String str53 = roundVolume49.toString();
        boolean boolean54 = roundVolume43.equals((java.lang.Object) str53);
        logic.RoundVolume roundVolume58 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume58.setVolume((double) 10);
        java.lang.String str61 = roundVolume58.toString();
        logic.RoundVolume[] roundVolumeArray62 = new logic.RoundVolume[] { roundVolume6, roundVolume10, roundVolume22, roundVolume23, roundVolume32, roundVolume38, roundVolume40, roundVolume43, roundVolume58 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList63 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList63, roundVolumeArray62);
        logic.YourWood yourWood65 = new logic.YourWood();
// flaky:         yourWood65.addWood((double) 1L, (int) (byte) 100);
        yourWood65.lengthFirstSortWood();
        yourWood65.diameterFirstSortWood();
        yourWood65.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList72 = yourWood65.getWood();
        logic.YourWood yourWood73 = new logic.YourWood();
// flaky:         yourWood73.addWood((double) 1L, (int) (byte) 100);
        yourWood73.lengthFirstSortWood();
        boolean boolean78 = roundVolumeList72.contains((java.lang.Object) yourWood73);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor79 = roundVolumeList72.iterator();
        boolean boolean80 = roundVolumeList63.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList72);
        boolean boolean81 = roundVolume0.equals((java.lang.Object) roundVolumeList63);
        logic.RoundVolume roundVolume85 = new logic.RoundVolume((double) 0.0f, (int) (byte) 0, 35.0d);
        int int86 = roundVolumeList63.indexOf((java.lang.Object) (byte) 0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream87 = roundVolumeList63.stream();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream88 = roundVolumeList63.stream();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str9, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str14, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str18, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str27, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str39, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str53, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str61, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(roundVolumeList72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeStream87);
        org.junit.Assert.assertNotNull(roundVolumeStream88);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.RoundVolume roundVolume32 = new logic.RoundVolume();
        roundVolume32.setVolume((double) 0);
        double double35 = roundVolume32.getVolume();
        java.lang.String str36 = roundVolume32.toString();
        double double37 = roundVolume32.getLength();
        roundVolume32.setLength((double) 'a');
        boolean boolean40 = roundVolumeList7.add(roundVolume32);
        logic.YourWood yourWood41 = new logic.YourWood();
// flaky:         yourWood41.addWood((double) 1L, (int) (byte) 100);
        yourWood41.lengthFirstSortWood();
        yourWood41.diameterFirstSortWood();
        yourWood41.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList48 = yourWood41.getWood();
        java.util.List<logic.RoundVolume> roundVolumeList51 = null; // flaky: roundVolumeList48.subList(1, (int) (short) 1);
        boolean boolean52 = false; // flaky: roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList51);
        logic.YourWood yourWood53 = new logic.YourWood();
// flaky:         yourWood53.addWood((double) 1L, (int) (byte) 100);
        yourWood53.lengthFirstSortWood();
        yourWood53.diameterFirstSortWood();
        yourWood53.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = yourWood53.getWood();
        logic.YourWood yourWood61 = new logic.YourWood();
// flaky:         yourWood61.addWood((double) 1L, (int) (byte) 100);
        yourWood61.lengthFirstSortWood();
        boolean boolean66 = roundVolumeList60.contains((java.lang.Object) yourWood61);
        yourWood61.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList68 = yourWood61.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor69 = roundVolumeList68.listIterator();
        boolean boolean70 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList68);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str36, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(roundVolumeList48);
// flaky:         org.junit.Assert.assertNotNull(roundVolumeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(roundVolumeList60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(roundVolumeList68);
        org.junit.Assert.assertNotNull(roundVolumeItor69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) (-1), 10, (double) 1);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) (short) 0);
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList25.iterator();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        boolean boolean49 = roundVolumeList25.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList41.listIterator();
        java.lang.Object[] objArray51 = roundVolumeList41.toArray();
        roundVolumeList41.clear();
        boolean boolean53 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        logic.RoundVolume roundVolume54 = new logic.RoundVolume();
        roundVolume54.setVolume((double) 0);
        boolean boolean57 = roundVolumeList41.remove((java.lang.Object) 0);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertNotNull(objArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        boolean boolean32 = roundVolumeList23.isEmpty();
        java.lang.Object[] objArray33 = roundVolumeList23.toArray();
        boolean boolean34 = roundVolumeList23.isEmpty();
        Main main35 = new Main();
        main35.init();
        javafx.application.Application.Parameters parameters37 = main35.getParameters();
        int int38 = roundVolumeList23.lastIndexOf((java.lang.Object) parameters37);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream39 = roundVolumeList23.parallelStream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(parameters37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeStream39);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        Main main0 = new Main();
        javafx.application.Application.Parameters parameters1 = main0.getParameters();
        main0.init();
        main0.init();
        org.junit.Assert.assertNull(parameters1);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        yourWood78.diameterFirstSortWood();
        yourWood78.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList85 = yourWood78.getWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList86 = yourWood78.getWood();
        int int87 = roundVolumeList69.lastIndexOf((java.lang.Object) roundVolumeList86);
        int int88 = roundVolumeList69.size();
        int int89 = roundVolumeList69.size();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator90 = roundVolumeList69.spliterator();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeList85);
        org.junit.Assert.assertNotNull(roundVolumeList86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator90);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        boolean boolean17 = roundVolumeList7.contains((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor18 = roundVolumeList7.listIterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor18);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        roundVolumeList2.clear();
        logic.YourWood yourWood5 = new logic.YourWood();
// flaky:         yourWood5.addWood((double) 1L, (int) (byte) 100);
        yourWood5.lengthFirstSortWood();
        yourWood5.diameterFirstSortWood();
        yourWood5.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList12 = yourWood5.getWood();
        logic.YourWood yourWood13 = new logic.YourWood();
// flaky:         yourWood13.addWood((double) 1L, (int) (byte) 100);
        yourWood13.lengthFirstSortWood();
        boolean boolean18 = roundVolumeList12.contains((java.lang.Object) yourWood13);
        int int19 = roundVolumeList12.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream20 = roundVolumeList12.stream();
        logic.YourWood yourWood21 = new logic.YourWood();
// flaky:         yourWood21.addWood((double) 1L, (int) (byte) 100);
        yourWood21.lengthFirstSortWood();
        yourWood21.diameterFirstSortWood();
        yourWood21.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList28 = yourWood21.getWood();
        logic.YourWood yourWood29 = new logic.YourWood();
// flaky:         yourWood29.addWood((double) 1L, (int) (byte) 100);
        yourWood29.lengthFirstSortWood();
        boolean boolean34 = roundVolumeList28.contains((java.lang.Object) yourWood29);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor35 = roundVolumeList28.iterator();
        logic.YourWood yourWood37 = new logic.YourWood();
// flaky:         yourWood37.addWood((double) 1L, (int) (byte) 100);
        yourWood37.lengthFirstSortWood();
        yourWood37.diameterFirstSortWood();
        yourWood37.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList44 = yourWood37.getWood();
        logic.YourWood yourWood45 = new logic.YourWood();
// flaky:         yourWood45.addWood((double) 1L, (int) (byte) 100);
        yourWood45.lengthFirstSortWood();
        boolean boolean50 = roundVolumeList44.contains((java.lang.Object) yourWood45);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor51 = roundVolumeList44.iterator();
        boolean boolean52 = roundVolumeList28.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList44);
        boolean boolean53 = roundVolumeList44.isEmpty();
        boolean boolean54 = roundVolumeList12.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList44);
        logic.YourWood yourWood55 = new logic.YourWood();
// flaky:         yourWood55.addWood((double) 1L, (int) (byte) 100);
        yourWood55.lengthFirstSortWood();
        yourWood55.diameterFirstSortWood();
        yourWood55.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList62 = yourWood55.getWood();
        logic.YourWood yourWood63 = new logic.YourWood();
// flaky:         yourWood63.addWood((double) 1L, (int) (byte) 100);
        yourWood63.lengthFirstSortWood();
        boolean boolean68 = roundVolumeList62.contains((java.lang.Object) yourWood63);
        int int69 = roundVolumeList62.size();
        boolean boolean70 = roundVolumeList44.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList62);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator71 = roundVolumeList44.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = roundVolumeList2.addAll(4, (java.util.Collection<logic.RoundVolume>) roundVolumeList44);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream20);
        org.junit.Assert.assertNotNull(roundVolumeList28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor35);
        org.junit.Assert.assertNotNull(roundVolumeList44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(roundVolumeList62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator71);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.lang.Object[] objArray66 = roundVolumeList57.toArray();
        java.lang.Object[] objArray67 = roundVolumeList57.toArray();
        boolean boolean68 = roundVolumeList7.equals((java.lang.Object) roundVolumeList57);
        java.lang.Object obj69 = null;
        boolean boolean70 = roundVolumeList57.contains(obj69);
        logic.RoundVolume roundVolume72 = new logic.RoundVolume();
        roundVolume72.setVolume((double) 0);
        double double75 = roundVolume72.getVolume();
        roundVolume72.setLength((double) 10L);
        roundVolume72.setVolume((double) (short) 100);
        roundVolume72.setLength(1.0d);
        roundVolume72.setLength((-1.0d));
        roundVolumeList57.add((int) (short) 0, roundVolume72);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(objArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        logic.RoundVolume roundVolume17 = null; // flaky: roundVolumeList7.remove(0);
        boolean boolean19 = roundVolumeList7.contains((java.lang.Object) 'a');
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
// flaky:         org.junit.Assert.assertNotNull(roundVolume17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.YourWood yourWood35 = new logic.YourWood();
// flaky:         yourWood35.addWood((double) 1L, (int) (byte) 100);
        yourWood35.lengthFirstSortWood();
        yourWood35.diameterFirstSortWood();
        yourWood35.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList42 = yourWood35.getWood();
        logic.YourWood yourWood43 = new logic.YourWood();
// flaky:         yourWood43.addWood((double) 1L, (int) (byte) 100);
        yourWood43.lengthFirstSortWood();
        boolean boolean48 = roundVolumeList42.contains((java.lang.Object) yourWood43);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor49 = roundVolumeList42.iterator();
        logic.YourWood yourWood51 = new logic.YourWood();
// flaky:         yourWood51.addWood((double) 1L, (int) (byte) 100);
        yourWood51.lengthFirstSortWood();
        yourWood51.diameterFirstSortWood();
        yourWood51.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList58 = yourWood51.getWood();
        logic.YourWood yourWood59 = new logic.YourWood();
// flaky:         yourWood59.addWood((double) 1L, (int) (byte) 100);
        yourWood59.lengthFirstSortWood();
        boolean boolean64 = roundVolumeList58.contains((java.lang.Object) yourWood59);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor65 = roundVolumeList58.iterator();
        boolean boolean66 = roundVolumeList42.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        int int68 = roundVolumeList58.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray69 = roundVolumeList58.toArray();
        logic.RoundVolume roundVolume70 = new logic.RoundVolume();
        roundVolume70.setVolume((double) 0);
        double double73 = roundVolume70.getVolume();
        java.lang.String str74 = roundVolume70.toString();
        int int75 = roundVolume70.getDiameter();
        roundVolume70.setLength((double) '#');
        roundVolume70.setVolume(10.0d);
        roundVolume70.setVolume(100.0d);
        boolean boolean82 = roundVolumeList58.add(roundVolume70);
        boolean boolean83 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList58);
        java.lang.Object[] objArray84 = roundVolumeList23.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream85 = roundVolumeList23.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList88 = roundVolumeList23.subList(3, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(3) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeList42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor49);
        org.junit.Assert.assertNotNull(roundVolumeList58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(objArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str74, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=35.0, diameter=0, volume=100.0)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=1.0, diameter=1, volume=0.85), RoundVolume(length=35.0, diameter=0, volume=100.0)]");
        org.junit.Assert.assertNotNull(roundVolumeStream85);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        roundVolume0.setLength((double) 'a');
        double double8 = roundVolume0.getLength();
        logic.YourWood yourWood9 = new logic.YourWood();
// flaky:         yourWood9.addWood((double) 1L, (int) (byte) 100);
        yourWood9.lengthFirstSortWood();
        yourWood9.diameterFirstSortWood();
        yourWood9.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList16 = yourWood9.getWood();
        logic.YourWood yourWood17 = new logic.YourWood();
// flaky:         yourWood17.addWood((double) 1L, (int) (byte) 100);
        yourWood17.lengthFirstSortWood();
        boolean boolean22 = roundVolumeList16.contains((java.lang.Object) yourWood17);
        yourWood17.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList24 = yourWood17.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor25 = roundVolumeList24.listIterator();
        boolean boolean26 = roundVolume0.equals((java.lang.Object) roundVolumeList24);
        roundVolumeList24.clear();
        java.lang.Object[] objArray28 = roundVolumeList24.toArray();
        Main main29 = new Main();
        main29.stop();
        javafx.application.Application.Parameters parameters31 = main29.getParameters();
        javafx.application.Application.Parameters parameters32 = main29.getParameters();
        main29.init();
        javafx.application.Application.Parameters parameters34 = main29.getParameters();
        boolean boolean35 = roundVolumeList24.contains((java.lang.Object) main29);
        logic.RoundVolume roundVolume36 = new logic.RoundVolume();
        roundVolume36.setVolume((double) 0);
        double double39 = roundVolume36.getVolume();
        java.lang.String str40 = roundVolume36.toString();
        double double41 = roundVolume36.getLength();
        roundVolume36.setVolume((double) (-1L));
        java.lang.String str44 = roundVolume36.toString();
        roundVolume36.setVolume(0.0d);
        boolean boolean47 = roundVolumeList24.add(roundVolume36);
        java.lang.String str48 = roundVolume36.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 97.0d + "'", double8 == 97.0d);
        org.junit.Assert.assertNotNull(roundVolumeList16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(roundVolumeList24);
        org.junit.Assert.assertNotNull(roundVolumeItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNull(parameters31);
        org.junit.Assert.assertNull(parameters32);
        org.junit.Assert.assertNull(parameters34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str40, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=-1.0)" + "'", str44, "RoundVolume(length=0.0, diameter=0, volume=-1.0)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str48, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        boolean boolean78 = roundVolumeList69.isEmpty();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator79 = roundVolumeList69.spliterator();
        boolean boolean80 = roundVolumeList69.isEmpty();
        java.lang.Object[] objArray81 = roundVolumeList69.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList84 = roundVolumeList69.subList((int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        int int33 = roundVolumeList23.size();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        logic.YourWood yourWood50 = new logic.YourWood();
// flaky:         yourWood50.addWood((double) 1L, (int) (byte) 100);
        yourWood50.lengthFirstSortWood();
        yourWood50.diameterFirstSortWood();
        yourWood50.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList57 = yourWood50.getWood();
        logic.YourWood yourWood58 = new logic.YourWood();
// flaky:         yourWood58.addWood((double) 1L, (int) (byte) 100);
        yourWood58.lengthFirstSortWood();
        boolean boolean63 = roundVolumeList57.contains((java.lang.Object) yourWood58);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor64 = roundVolumeList57.iterator();
        boolean boolean65 = roundVolumeList41.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor66 = roundVolumeList57.listIterator();
        logic.RoundVolume roundVolume67 = new logic.RoundVolume();
        roundVolume67.setVolume((double) 0);
        double double70 = roundVolume67.getVolume();
        roundVolume67.setLength((double) (-1L));
        boolean boolean73 = roundVolumeList57.add(roundVolume67);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor74 = roundVolumeList57.iterator();
        boolean boolean75 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList57);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream76 = roundVolumeList57.stream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor77 = roundVolumeList57.iterator();
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume79 = roundVolumeList57.remove((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
        org.junit.Assert.assertNotNull(roundVolumeList57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream76);
        org.junit.Assert.assertNotNull(roundVolumeItor77);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        logic.YourWood yourWood0 = new logic.YourWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList2 = yourWood0.getWood();
        yourWood0.lengthFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList4 = yourWood0.getWood();
        logic.RoundVolume roundVolume8 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume8.setVolume((double) 10);
        java.lang.String str11 = roundVolume8.toString();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume();
        roundVolume12.setVolume((double) 0);
        double double15 = roundVolume12.getVolume();
        java.lang.String str16 = roundVolume12.toString();
        double double17 = roundVolume12.getLength();
        roundVolume12.setLength((double) 'a');
        java.lang.String str20 = roundVolume12.toString();
        logic.RoundVolume roundVolume24 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume25 = new logic.RoundVolume();
        roundVolume25.setVolume((double) 0);
        double double28 = roundVolume25.getVolume();
        java.lang.String str29 = roundVolume25.toString();
        double double30 = roundVolume25.getLength();
        logic.RoundVolume roundVolume34 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume34.setVolume((double) 10);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str41 = roundVolume40.toString();
        logic.RoundVolume roundVolume42 = new logic.RoundVolume();
        roundVolume42.setVolume((double) 0);
        logic.RoundVolume roundVolume45 = new logic.RoundVolume();
        roundVolume45.setVolume((double) 0);
        double double48 = roundVolume45.getVolume();
        roundVolume45.setLength((double) 10L);
        logic.RoundVolume roundVolume51 = new logic.RoundVolume();
        roundVolume51.setVolume((double) 0);
        double double54 = roundVolume51.getVolume();
        java.lang.String str55 = roundVolume51.toString();
        boolean boolean56 = roundVolume45.equals((java.lang.Object) str55);
        logic.RoundVolume roundVolume60 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume60.setVolume((double) 10);
        java.lang.String str63 = roundVolume60.toString();
        logic.RoundVolume[] roundVolumeArray64 = new logic.RoundVolume[] { roundVolume8, roundVolume12, roundVolume24, roundVolume25, roundVolume34, roundVolume40, roundVolume42, roundVolume45, roundVolume60 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList65 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList65, roundVolumeArray64);
        logic.YourWood yourWood67 = new logic.YourWood();
// flaky:         yourWood67.addWood((double) 1L, (int) (byte) 100);
        yourWood67.lengthFirstSortWood();
        yourWood67.diameterFirstSortWood();
        yourWood67.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList74 = yourWood67.getWood();
        logic.YourWood yourWood75 = new logic.YourWood();
// flaky:         yourWood75.addWood((double) 1L, (int) (byte) 100);
        yourWood75.lengthFirstSortWood();
        boolean boolean80 = roundVolumeList74.contains((java.lang.Object) yourWood75);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor81 = roundVolumeList74.iterator();
        boolean boolean82 = roundVolumeList65.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList74);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream83 = roundVolumeList65.stream();
        boolean boolean84 = roundVolumeList4.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList65);
        // The following exception was thrown during execution in test generation
        try {
            logic.RoundVolume roundVolume86 = roundVolumeList4.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList2);
        org.junit.Assert.assertNotNull(roundVolumeList4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str11, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str16, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str29, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str41, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str55, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str63, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(roundVolumeList74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        yourWood40.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList47 = yourWood40.getWood();
        logic.YourWood yourWood48 = new logic.YourWood();
// flaky:         yourWood48.addWood((double) 1L, (int) (byte) 100);
        yourWood48.lengthFirstSortWood();
        yourWood48.diameterFirstSortWood();
        yourWood48.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList55 = yourWood48.getWood();
        logic.YourWood yourWood56 = new logic.YourWood();
// flaky:         yourWood56.addWood((double) 1L, (int) (byte) 100);
        yourWood56.lengthFirstSortWood();
        boolean boolean61 = roundVolumeList55.contains((java.lang.Object) yourWood56);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor62 = roundVolumeList55.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream63 = roundVolumeList55.stream();
        logic.YourWood yourWood64 = new logic.YourWood();
// flaky:         yourWood64.addWood((double) 1L, (int) (byte) 100);
        yourWood64.lengthFirstSortWood();
        yourWood64.diameterFirstSortWood();
        yourWood64.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList71 = yourWood64.getWood();
        logic.YourWood yourWood72 = new logic.YourWood();
// flaky:         yourWood72.addWood((double) 1L, (int) (byte) 100);
        yourWood72.lengthFirstSortWood();
        boolean boolean77 = roundVolumeList71.contains((java.lang.Object) yourWood72);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList71.iterator();
        boolean boolean79 = roundVolumeList55.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList71);
        int int80 = roundVolumeList47.indexOf((java.lang.Object) roundVolumeList71);
        roundVolumeList47.clear();
        boolean boolean82 = roundVolumeList23.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList47);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<logic.RoundVolume> roundVolumeItor84 = roundVolumeList47.listIterator(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeList47);
        org.junit.Assert.assertNotNull(roundVolumeList55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor62);
        org.junit.Assert.assertNotNull(roundVolumeStream63);
        org.junit.Assert.assertNotNull(roundVolumeList71);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        boolean boolean15 = roundVolumeList7.isEmpty();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        logic.YourWood yourWood32 = new logic.YourWood();
// flaky:         yourWood32.addWood((double) 1L, (int) (byte) 100);
        yourWood32.lengthFirstSortWood();
        yourWood32.diameterFirstSortWood();
        yourWood32.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList39 = yourWood32.getWood();
        logic.YourWood yourWood40 = new logic.YourWood();
// flaky:         yourWood40.addWood((double) 1L, (int) (byte) 100);
        yourWood40.lengthFirstSortWood();
        boolean boolean45 = roundVolumeList39.contains((java.lang.Object) yourWood40);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor46 = roundVolumeList39.iterator();
        boolean boolean47 = roundVolumeList23.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        boolean boolean48 = roundVolumeList39.isEmpty();
        java.lang.Object[] objArray49 = roundVolumeList39.toArray();
        boolean boolean50 = roundVolumeList7.removeAll((java.util.Collection<logic.RoundVolume>) roundVolumeList39);
        logic.VolumeDB volumeDB51 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap52 = volumeDB51.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap53 = volumeDB51.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap54 = volumeDB51.getVolumes();
        logic.VolumeDB volumeDB55 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap56 = volumeDB55.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap57 = volumeDB55.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap58 = volumeDB55.getVolumes();
        logic.VolumeDB volumeDB59 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap60 = volumeDB59.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap61 = volumeDB59.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap62 = volumeDB59.getVolumes();
        logic.VolumeDB volumeDB63 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap64 = volumeDB63.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap65 = volumeDB63.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap66 = volumeDB63.getVolumes();
        logic.VolumeDB volumeDB67 = new logic.VolumeDB();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap68 = volumeDB67.getVolumes();
        java.util.HashMap<java.lang.String, logic.RoundVolume> strMap69 = volumeDB67.getVolumes();
        java.util.HashMap[] hashMapArray71 = new java.util.HashMap[5];
        @SuppressWarnings("unchecked")
        java.util.HashMap<java.lang.String, logic.RoundVolume>[] strMapArray72 = (java.util.HashMap<java.lang.String, logic.RoundVolume>[]) hashMapArray71;
        strMapArray72[0] = strMap54;
        strMapArray72[1] = strMap58;
        strMapArray72[2] = strMap62;
        strMapArray72[3] = strMap66;
        strMapArray72[4] = strMap69;
        java.util.HashMap<java.lang.String, logic.RoundVolume>[] strMapArray83 = roundVolumeList7.toArray(strMapArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList86 = roundVolumeList7.subList(5, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
        org.junit.Assert.assertNotNull(roundVolumeList39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(hashMapArray71);
        org.junit.Assert.assertNotNull(strMapArray72);
        org.junit.Assert.assertNotNull(strMapArray83);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean14 = roundVolumeList7.isEmpty();
        java.lang.Object[][] objArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[][] objArray16 = roundVolumeList7.toArray(objArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        int int33 = roundVolumeList23.lastIndexOf((java.lang.Object) 0);
        java.lang.Object[] objArray34 = roundVolumeList23.toArray();
        logic.RoundVolume roundVolume35 = new logic.RoundVolume();
        roundVolume35.setVolume((double) 0);
        double double38 = roundVolume35.getVolume();
        java.lang.String str39 = roundVolume35.toString();
        int int40 = roundVolume35.getDiameter();
        roundVolume35.setLength((double) '#');
        roundVolume35.setVolume(10.0d);
        roundVolume35.setVolume(100.0d);
        boolean boolean47 = roundVolumeList23.add(roundVolume35);
        logic.RoundVolume roundVolume48 = new logic.RoundVolume();
        roundVolume48.setVolume((double) 0);
        double double51 = roundVolume48.getVolume();
        java.lang.String str52 = roundVolume48.toString();
        int int53 = roundVolume48.getDiameter();
        boolean boolean54 = roundVolume35.equals((java.lang.Object) int53);
        java.lang.String str55 = roundVolume35.toString();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str39, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str52, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "RoundVolume(length=35.0, diameter=0, volume=100.0)" + "'", str55, "RoundVolume(length=35.0, diameter=0, volume=100.0)");
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) (short) 0);
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList25.iterator();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        boolean boolean49 = roundVolumeList25.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor50 = roundVolumeList41.listIterator();
        java.lang.Object[] objArray51 = roundVolumeList41.toArray();
        roundVolumeList41.clear();
        boolean boolean53 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream54 = roundVolumeList41.stream();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor50);
        org.junit.Assert.assertNotNull(objArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream54);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        yourWood8.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList15 = yourWood8.getWood();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor16 = roundVolumeList15.listIterator();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator17 = roundVolumeList15.spliterator();
        java.lang.Object[] objArray18 = roundVolumeList15.toArray();
        java.util.function.UnaryOperator<logic.RoundVolume> roundVolumeUnaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            roundVolumeList15.replaceAll(roundVolumeUnaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeList15);
        org.junit.Assert.assertNotNull(roundVolumeItor16);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator17);
        org.junit.Assert.assertNotNull(objArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume12 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume12.setVolume((double) 10);
        java.lang.String str15 = roundVolume12.toString();
        logic.RoundVolume roundVolume16 = new logic.RoundVolume();
        roundVolume16.setVolume((double) 0);
        double double19 = roundVolume16.getVolume();
        java.lang.String str20 = roundVolume16.toString();
        double double21 = roundVolume16.getLength();
        roundVolume16.setLength((double) 'a');
        java.lang.String str24 = roundVolume16.toString();
        logic.RoundVolume roundVolume28 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume29 = new logic.RoundVolume();
        roundVolume29.setVolume((double) 0);
        double double32 = roundVolume29.getVolume();
        java.lang.String str33 = roundVolume29.toString();
        double double34 = roundVolume29.getLength();
        logic.RoundVolume roundVolume38 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume38.setVolume((double) 10);
        logic.RoundVolume roundVolume44 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str45 = roundVolume44.toString();
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        logic.RoundVolume roundVolume49 = new logic.RoundVolume();
        roundVolume49.setVolume((double) 0);
        double double52 = roundVolume49.getVolume();
        roundVolume49.setLength((double) 10L);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume();
        roundVolume55.setVolume((double) 0);
        double double58 = roundVolume55.getVolume();
        java.lang.String str59 = roundVolume55.toString();
        boolean boolean60 = roundVolume49.equals((java.lang.Object) str59);
        logic.RoundVolume roundVolume64 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume64.setVolume((double) 10);
        java.lang.String str67 = roundVolume64.toString();
        logic.RoundVolume[] roundVolumeArray68 = new logic.RoundVolume[] { roundVolume12, roundVolume16, roundVolume28, roundVolume29, roundVolume38, roundVolume44, roundVolume46, roundVolume49, roundVolume64 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69, roundVolumeArray68);
        logic.YourWood yourWood71 = new logic.YourWood();
// flaky:         yourWood71.addWood((double) 1L, (int) (byte) 100);
        yourWood71.lengthFirstSortWood();
        yourWood71.diameterFirstSortWood();
        yourWood71.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList78 = yourWood71.getWood();
        logic.YourWood yourWood79 = new logic.YourWood();
// flaky:         yourWood79.addWood((double) 1L, (int) (byte) 100);
        yourWood79.lengthFirstSortWood();
        boolean boolean84 = roundVolumeList78.contains((java.lang.Object) yourWood79);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor85 = roundVolumeList78.iterator();
        boolean boolean86 = roundVolumeList69.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList78);
        int int88 = roundVolumeList69.lastIndexOf((java.lang.Object) "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        boolean boolean89 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor91 = roundVolumeList69.listIterator(0);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream92 = roundVolumeList69.parallelStream();
        java.util.Iterator<logic.RoundVolume> roundVolumeItor93 = roundVolumeList69.iterator();
        Main main94 = new Main();
        main94.init();
        javafx.application.Application.Parameters parameters96 = main94.getParameters();
        int int97 = roundVolumeList69.indexOf((java.lang.Object) main94);
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor98 = roundVolumeList69.listIterator();
        int int99 = roundVolumeList69.size();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str15, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str20, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str33, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str45, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str59, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str67, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(roundVolumeList78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor91);
        org.junit.Assert.assertNotNull(roundVolumeStream92);
        org.junit.Assert.assertNotNull(roundVolumeItor93);
        org.junit.Assert.assertNull(parameters96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(roundVolumeItor98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object obj32 = null;
        boolean boolean33 = roundVolumeList7.remove(obj32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList36 = roundVolumeList7.subList(1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        boolean boolean15 = roundVolumeList7.equals((java.lang.Object) (short) 100);
        java.lang.Object[] objArray16 = roundVolumeList7.toArray();
        logic.RoundVolume roundVolume17 = new logic.RoundVolume();
        int int18 = roundVolume17.getDiameter();
        boolean boolean19 = roundVolumeList7.add(roundVolume17);
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator20 = roundVolumeList7.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(roundVolumeSpliterator20);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        logic.YourWood yourWood16 = new logic.YourWood();
// flaky:         yourWood16.addWood((double) 1L, (int) (byte) 100);
        yourWood16.lengthFirstSortWood();
        yourWood16.diameterFirstSortWood();
        yourWood16.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList23 = yourWood16.getWood();
        logic.YourWood yourWood24 = new logic.YourWood();
// flaky:         yourWood24.addWood((double) 1L, (int) (byte) 100);
        yourWood24.lengthFirstSortWood();
        boolean boolean29 = roundVolumeList23.contains((java.lang.Object) yourWood24);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor30 = roundVolumeList23.iterator();
        boolean boolean31 = roundVolumeList7.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList23);
        java.lang.Object[] objArray32 = roundVolumeList23.toArray();
        roundVolumeList23.clear();
        java.util.Spliterator<logic.RoundVolume> roundVolumeSpliterator34 = roundVolumeList23.spliterator();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeList23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeSpliterator34);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        int int14 = roundVolumeList7.size();
        boolean boolean15 = roundVolumeList7.isEmpty();
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        logic.RoundVolume roundVolume3 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume3.setVolume((double) 10);
        java.lang.String str6 = roundVolume3.toString();
        logic.RoundVolume roundVolume7 = new logic.RoundVolume();
        roundVolume7.setVolume((double) 0);
        double double10 = roundVolume7.getVolume();
        java.lang.String str11 = roundVolume7.toString();
        double double12 = roundVolume7.getLength();
        roundVolume7.setLength((double) 'a');
        java.lang.String str15 = roundVolume7.toString();
        logic.RoundVolume roundVolume19 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume20 = new logic.RoundVolume();
        roundVolume20.setVolume((double) 0);
        double double23 = roundVolume20.getVolume();
        java.lang.String str24 = roundVolume20.toString();
        double double25 = roundVolume20.getLength();
        logic.RoundVolume roundVolume29 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume29.setVolume((double) 10);
        logic.RoundVolume roundVolume35 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str36 = roundVolume35.toString();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume();
        roundVolume37.setVolume((double) 0);
        logic.RoundVolume roundVolume40 = new logic.RoundVolume();
        roundVolume40.setVolume((double) 0);
        double double43 = roundVolume40.getVolume();
        roundVolume40.setLength((double) 10L);
        logic.RoundVolume roundVolume46 = new logic.RoundVolume();
        roundVolume46.setVolume((double) 0);
        double double49 = roundVolume46.getVolume();
        java.lang.String str50 = roundVolume46.toString();
        boolean boolean51 = roundVolume40.equals((java.lang.Object) str50);
        logic.RoundVolume roundVolume55 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume55.setVolume((double) 10);
        java.lang.String str58 = roundVolume55.toString();
        logic.RoundVolume[] roundVolumeArray59 = new logic.RoundVolume[] { roundVolume3, roundVolume7, roundVolume19, roundVolume20, roundVolume29, roundVolume35, roundVolume37, roundVolume40, roundVolume55 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList60 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList60, roundVolumeArray59);
        logic.YourWood yourWood62 = new logic.YourWood();
// flaky:         yourWood62.addWood((double) 1L, (int) (byte) 100);
        yourWood62.lengthFirstSortWood();
        yourWood62.diameterFirstSortWood();
        yourWood62.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList69 = yourWood62.getWood();
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        boolean boolean75 = roundVolumeList69.contains((java.lang.Object) yourWood70);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor76 = roundVolumeList69.iterator();
        boolean boolean77 = roundVolumeList60.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList69);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor78 = roundVolumeList69.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream79 = roundVolumeList69.parallelStream();
        int int80 = roundVolumeList69.size();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<logic.RoundVolume> roundVolumeList83 = roundVolumeList69.subList(0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(0) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str6, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str11, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str15, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str24, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str36, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str50, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str58, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(roundVolumeList69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor78);
        org.junit.Assert.assertNotNull(roundVolumeStream79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        Main main0 = new Main();
        javafx.application.HostServices hostServices1 = main0.getHostServices();
        javafx.application.Application.Parameters parameters2 = main0.getParameters();
        main0.init();
        javafx.application.Application.Parameters parameters4 = main0.getParameters();
        main0.init();
        org.junit.Assert.assertNotNull(hostServices1);
        org.junit.Assert.assertNull(parameters2);
        org.junit.Assert.assertNull(parameters4);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        logic.RoundVolume roundVolume0 = new logic.RoundVolume();
        roundVolume0.setVolume((double) 0);
        double double3 = roundVolume0.getVolume();
        java.lang.String str4 = roundVolume0.toString();
        double double5 = roundVolume0.getLength();
        double double6 = roundVolume0.getVolume();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str4, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.RoundVolume roundVolume11 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume11.setVolume((double) 10);
        java.lang.String str14 = roundVolume11.toString();
        logic.RoundVolume roundVolume15 = new logic.RoundVolume();
        roundVolume15.setVolume((double) 0);
        double double18 = roundVolume15.getVolume();
        java.lang.String str19 = roundVolume15.toString();
        double double20 = roundVolume15.getLength();
        roundVolume15.setLength((double) 'a');
        java.lang.String str23 = roundVolume15.toString();
        logic.RoundVolume roundVolume27 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        logic.RoundVolume roundVolume28 = new logic.RoundVolume();
        roundVolume28.setVolume((double) 0);
        double double31 = roundVolume28.getVolume();
        java.lang.String str32 = roundVolume28.toString();
        double double33 = roundVolume28.getLength();
        logic.RoundVolume roundVolume37 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume37.setVolume((double) 10);
        logic.RoundVolume roundVolume43 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        java.lang.String str44 = roundVolume43.toString();
        logic.RoundVolume roundVolume45 = new logic.RoundVolume();
        roundVolume45.setVolume((double) 0);
        logic.RoundVolume roundVolume48 = new logic.RoundVolume();
        roundVolume48.setVolume((double) 0);
        double double51 = roundVolume48.getVolume();
        roundVolume48.setLength((double) 10L);
        logic.RoundVolume roundVolume54 = new logic.RoundVolume();
        roundVolume54.setVolume((double) 0);
        double double57 = roundVolume54.getVolume();
        java.lang.String str58 = roundVolume54.toString();
        boolean boolean59 = roundVolume48.equals((java.lang.Object) str58);
        logic.RoundVolume roundVolume63 = new logic.RoundVolume((double) 10L, (int) (byte) 100, 0.0d);
        roundVolume63.setVolume((double) 10);
        java.lang.String str66 = roundVolume63.toString();
        logic.RoundVolume[] roundVolumeArray67 = new logic.RoundVolume[] { roundVolume11, roundVolume15, roundVolume27, roundVolume28, roundVolume37, roundVolume43, roundVolume45, roundVolume48, roundVolume63 };
        java.util.ArrayList<logic.RoundVolume> roundVolumeList68 = new java.util.ArrayList<logic.RoundVolume>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<logic.RoundVolume>) roundVolumeList68, roundVolumeArray67);
        logic.YourWood yourWood70 = new logic.YourWood();
// flaky:         yourWood70.addWood((double) 1L, (int) (byte) 100);
        yourWood70.lengthFirstSortWood();
        yourWood70.diameterFirstSortWood();
        yourWood70.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList77 = yourWood70.getWood();
        logic.YourWood yourWood78 = new logic.YourWood();
// flaky:         yourWood78.addWood((double) 1L, (int) (byte) 100);
        yourWood78.lengthFirstSortWood();
        boolean boolean83 = roundVolumeList77.contains((java.lang.Object) yourWood78);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor84 = roundVolumeList77.iterator();
        boolean boolean85 = roundVolumeList68.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList77);
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream86 = roundVolumeList68.parallelStream();
        boolean boolean87 = roundVolumeList7.containsAll((java.util.Collection<logic.RoundVolume>) roundVolumeList68);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor88 = roundVolumeList7.iterator();
        logic.RoundVolume roundVolume92 = new logic.RoundVolume((double) 0.0f, (int) (byte) 0, 35.0d);
        boolean boolean93 = roundVolumeList7.contains((java.lang.Object) roundVolume92);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str14, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str19, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "RoundVolume(length=97.0, diameter=0, volume=0.0)" + "'", str23, "RoundVolume(length=97.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str32, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=0.0)" + "'", str44, "RoundVolume(length=10.0, diameter=100, volume=0.0)");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "RoundVolume(length=0.0, diameter=0, volume=0.0)" + "'", str58, "RoundVolume(length=0.0, diameter=0, volume=0.0)");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "RoundVolume(length=10.0, diameter=100, volume=10.0)" + "'", str66, "RoundVolume(length=10.0, diameter=100, volume=10.0)");
        org.junit.Assert.assertNotNull(roundVolumeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(roundVolumeList77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(roundVolumeStream86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(roundVolumeItor88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        logic.YourWood yourWood0 = new logic.YourWood();
// flaky:         yourWood0.addWood((double) 1L, (int) (byte) 100);
        yourWood0.lengthFirstSortWood();
        yourWood0.diameterFirstSortWood();
        yourWood0.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList7 = yourWood0.getWood();
        logic.YourWood yourWood8 = new logic.YourWood();
// flaky:         yourWood8.addWood((double) 1L, (int) (byte) 100);
        yourWood8.lengthFirstSortWood();
        boolean boolean13 = roundVolumeList7.contains((java.lang.Object) yourWood8);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor14 = roundVolumeList7.iterator();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream15 = roundVolumeList7.stream();
        java.util.ListIterator<logic.RoundVolume> roundVolumeItor17 = roundVolumeList7.listIterator((int) (short) 0);
        logic.YourWood yourWood18 = new logic.YourWood();
// flaky:         yourWood18.addWood((double) 1L, (int) (byte) 100);
        yourWood18.lengthFirstSortWood();
        yourWood18.diameterFirstSortWood();
        yourWood18.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList25 = yourWood18.getWood();
        logic.YourWood yourWood26 = new logic.YourWood();
// flaky:         yourWood26.addWood((double) 1L, (int) (byte) 100);
        yourWood26.lengthFirstSortWood();
        boolean boolean31 = roundVolumeList25.contains((java.lang.Object) yourWood26);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor32 = roundVolumeList25.iterator();
        logic.YourWood yourWood34 = new logic.YourWood();
// flaky:         yourWood34.addWood((double) 1L, (int) (byte) 100);
        yourWood34.lengthFirstSortWood();
        yourWood34.diameterFirstSortWood();
        yourWood34.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList41 = yourWood34.getWood();
        logic.YourWood yourWood42 = new logic.YourWood();
// flaky:         yourWood42.addWood((double) 1L, (int) (byte) 100);
        yourWood42.lengthFirstSortWood();
        boolean boolean47 = roundVolumeList41.contains((java.lang.Object) yourWood42);
        java.util.Iterator<logic.RoundVolume> roundVolumeItor48 = roundVolumeList41.iterator();
        boolean boolean49 = roundVolumeList25.addAll(0, (java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        java.lang.Object[] objArray50 = roundVolumeList41.toArray();
        java.util.stream.Stream<logic.RoundVolume> roundVolumeStream51 = roundVolumeList41.parallelStream();
        logic.YourWood yourWood52 = new logic.YourWood();
// flaky:         yourWood52.addWood((double) 1L, (int) (byte) 100);
        yourWood52.lengthFirstSortWood();
        yourWood52.diameterFirstSortWood();
        yourWood52.diameterFirstSortWood();
        java.util.ArrayList<logic.RoundVolume> roundVolumeList59 = yourWood52.getWood();
        logic.YourWood yourWood60 = new logic.YourWood();
// flaky:         yourWood60.addWood((double) 1L, (int) (byte) 100);
        yourWood60.lengthFirstSortWood();
        boolean boolean65 = roundVolumeList59.contains((java.lang.Object) yourWood60);
        boolean boolean66 = roundVolumeList41.remove((java.lang.Object) boolean65);
        boolean boolean67 = roundVolumeList7.retainAll((java.util.Collection<logic.RoundVolume>) roundVolumeList41);
        logic.RoundVolume roundVolume69 = null; // flaky: roundVolumeList41.remove(0);
        org.junit.Assert.assertNotNull(roundVolumeList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor14);
        org.junit.Assert.assertNotNull(roundVolumeStream15);
        org.junit.Assert.assertNotNull(roundVolumeItor17);
        org.junit.Assert.assertNotNull(roundVolumeList25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor32);
        org.junit.Assert.assertNotNull(roundVolumeList41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(roundVolumeItor48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[RoundVolume(length=1.0, diameter=1, volume=0.85)]");
        org.junit.Assert.assertNotNull(roundVolumeStream51);
        org.junit.Assert.assertNotNull(roundVolumeList59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertNotNull(roundVolume69);
    }
}
